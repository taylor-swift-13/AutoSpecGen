File Name: ThreeAxisController.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (4/13):\nEffect at line 28\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (6/13):\nEffect at line 35\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (8/13):\nEffect at line 42\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (10/13):\nEffect at line 48\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (11/13):\nEffect at line 52\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (12/13):\nEffect at line 56\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (13/13):\nEffect at line 59\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- True
- False
- True
- False
- True
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TripleFabsMax.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ('Goal Assertion (file Output/TripleFabsMax.c, line 25):\nLet a = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(pIp_0.F10___TripleFabsMax_fx1).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: L_fabs(r) = r.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (2.4s)', 'Error found in file: Output/TripleFabsMax.c at line: 25', 'Error line content: /*@ assert fabsfx1 == fabs(pIp->fx1); */')
- ('Goal Assertion (file Output/TripleFabsMax.c, line 31):\nLet r = of_f32(pIp_0.F10___TripleFabsMax_fx1).\nLet a = pIp_0.F10___TripleFabsMax_ret.\nLet r_1 = of_f32(pIp_0.F10___TripleFabsMax_fy2).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Assertion *)\n  Have: L_fabs(r) = r.\n}\nProve: L_fabs(r_1) = r_1.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (2.5s)', 'Error found in file: Output/TripleFabsMax.c at line: 31', 'Error line content: /*@ assert fabsfy2 == fabs(pIp->fy2); */')
- ('Goal Assertion (file Output/TripleFabsMax.c, line 37):\nLet r = of_f32(pIp_0.F10___TripleFabsMax_fy2).\nLet r_1 = of_f32(pIp_0.F10___TripleFabsMax_fx1).\nLet a = pIp_0.F10___TripleFabsMax_ret.\nLet r_2 = of_f32(pIp_0.F10___TripleFabsMax_fz3).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Assertion *)\n  Have: L_fabs(r_1) = r_1.\n  (* Assertion *)\n  Have: L_fabs(r) = r.\n}\nProve: L_fabs(r_2) = r_2.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)', 'Error found in file: Output/TripleFabsMax.c at line: 37', 'Error line content: /*@ assert fabsfz3 == fabs(pIp->fz3); */')
- ("Goal Assigns (file Output/TripleFabsMax.c, line 11) in 'TripleFabsMaxFun' (8/8):\nEffect at line 57\nLet a = pIp_1.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet r = of_f32(a).\nLet a_2 = pIp_1.F10___TripleFabsMax_fy2.\nLet r_1 = of_f32(a_2).\nLet a_3 = pIp_1.F10___TripleFabsMax_fx1.\nLet r_2 = of_f32(a_3).\nLet a_4 = pIp_1.F10___TripleFabsMax_ret.\nLet a_5 = pIp_0.F10___TripleFabsMax_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_5, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Assertion *)\n  Have: L_fabs(r_2) = r_2.\n  If lt_f32(a_3, a_1)\n  Then { Have: neg_f32(a_3) = fabsfx1_0. }\n  Else { Have: a_3 = fabsfx1_0. }\n  (* Assertion *)\n  Have: L_fabs(r_1) = r_1.\n  If lt_f32(a_2, a_1)\n  Then { Have: neg_f32(a_2) = fabsfy2_0. }\n  Else { Have: a_2 = fabsfy2_0. }\n  (* Assertion *)\n  Have: L_fabs(r) = r.\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: a_5 = a_4.\nProver Z3 4.8.12 returns Timeout (Qed:54ms) (3s)", 'Error found in file: Output/TripleFabsMax.c at line: 11', 'Error line content: assigns pIp->tmax, *(pIp->ret);')

Assertion Results:
- False
- False
- False
- True
- True
- True
- True
- True
- True
- True
- False

Postcond Errors:
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 12) in 'TripleFabsMaxFun':\nLet a = pIp_1.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet r = of_f32(a).\nLet a_2 = pIp_1.F10___TripleFabsMax_fy2.\nLet r_1 = of_f32(a_2).\nLet a_3 = pIp_1.F10___TripleFabsMax_fx1.\nLet r_2 = of_f32(a_3).\nLet a_4 = pIp_1.F10___TripleFabsMax_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Assertion *)\n  Have: L_fabs(r_2) = r_2.\n  If lt_f32(a_3, a_1)\n  Then { Have: neg_f32(a_3) = fabsfx1_0. }\n  Else { Have: a_3 = fabsfx1_0. }\n  (* Assertion *)\n  Have: L_fabs(r_1) = r_1.\n  If lt_f32(a_2, a_1)\n  Then { Have: neg_f32(a_2) = fabsfy2_0. }\n  Else { Have: a_2 = fabsfy2_0. }\n  (* Assertion *)\n  Have: L_fabs(r) = r.\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___TripleFabsMax_tmax) = Rg.max(r_2, Rg.max(r_1, r)).\nProver Z3 4.8.12 returns Timeout (Qed:71ms) (2.4s)", 'Error found in file: Output/TripleFabsMax.c at line: 12', 'Error line content: ensures *(pIp->ret) == \\max(fabs(\\at(pIp->fx1, Pre)), \\max(fabs(\\at(pIp->fy2, Pre)), fabs(\\at(pIp->fz3, Pre))));')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 13) in 'TripleFabsMaxFun':\nLet a = pIp_1.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet r = of_f32(a).\nLet a_2 = pIp_1.F10___TripleFabsMax_fy2.\nLet r_1 = of_f32(a_2).\nLet a_3 = pIp_1.F10___TripleFabsMax_fx1.\nLet r_2 = of_f32(a_3).\nLet a_4 = pIp_1.F10___TripleFabsMax_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Assertion *)\n  Have: L_fabs(r_2) = r_2.\n  If lt_f32(a_3, a_1)\n  Then { Have: neg_f32(a_3) = fabsfx1_0. }\n  Else { Have: a_3 = fabsfx1_0. }\n  (* Assertion *)\n  Have: L_fabs(r_1) = r_1.\n  If lt_f32(a_2, a_1)\n  Then { Have: neg_f32(a_2) = fabsfy2_0. }\n  Else { Have: a_2 = fabsfy2_0. }\n  (* Assertion *)\n  Have: L_fabs(r) = r.\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___TripleFabsMax_tmax) = Rg.max(r_2, Rg.max(r_1, r)).\nProver Z3 4.8.12 returns Timeout (Qed:70ms) (2.5s)", 'Error found in file: Output/TripleFabsMax.c at line: 13', 'Error line content: ensures pIp->tmax == \\max(fabs(\\at(pIp->fx1, Pre)), \\max(fabs(\\at(pIp->fy2, Pre)), fabs(\\at(pIp->fz3, Pre))));')

Postcond Results:
- False
- False

------------------------------------------------
File Name: MatrixMulti.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixMulti.c, line 42):\nLet x = pIp_0.F10___MatrixMulti_nrc.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_1 = pIp_0.F10___MatrixMulti_nrow.\nLet x_2 = pIp_0.F10___MatrixMulti_ncol.\nLet x_3 = x_1 * x_2.\nLet a_2 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_0, a_1, x_3), a_1,\n            x_2).\nLet a_3 = a_2[a_1 <- v].\nLet a_4 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_5 = pIp_0.F10___MatrixMulti_faciend.\nLet r = of_f32(L_sum(a_3, a_5, 0, 0)).\nLet r_1 = of_f32(L_sum(a_3, a_4, 0, 0)) * r.\nLet a_6 = a_2[a_1 <- to_f32(.0)].\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (i <= 0) /\\ (0 <= i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), x_1 * x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), x * x_2).\n  (* Pre-condition *)\n  Have: (0 <= x) /\\ (0 <= x_2).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Then *)\n  Have: 0 < x_1.\n  (* Then *)\n  Have: 0 < x_2.\n  (* Invariant *)\n  Have: (of_f32(L_sum(a_6, a_4, 0, 0)) * of_f32(L_sum(a_6, a_5, 0, 0))) = .0.\n  (* Invariant *)\n  Have: r_1 = of_f32(v).\n  (* Else *)\n  Have: x <= 0.\n}\nProve: (of_f32(L_sum(a_3, a_4, 0, x_2)) * r) = r_1.\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)', 'Error found in file: Output/MatrixMulti.c at line: 42', 'Error line content: loop invariant \\forall integer j; 0 <= j < jc ==>')
- ('Goal Preservation of Invariant (file Output/MatrixMulti.c, line 56):\nLet x = pIp_0.F10___MatrixMulti_nrc.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_1 = pIp_0.F10___MatrixMulti_nrow.\nLet x_2 = pIp_0.F10___MatrixMulti_ncol.\nLet x_3 = x_1 * x_2.\nLet a_2 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_0, a_1, x_3), a_1,\n            x_2).\nLet a_3 = a_2[a_1 <- v].\nLet a_4 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_5 = pIp_0.F10___MatrixMulti_faciend.\nLet a_6 = a_2[a_1 <- to_f32(.0)].\nLet a_7 = shift_float32(a_4, 0).\nLet a_8 = shift_float32(a_5, 0).\nLet a_9 = add_f32(v, mul_f32(a_3[a_8], a_3[a_7])).\nLet a_10 = a_2[a_1 <- a_9].\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_8, x_1 * x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, x * x_2).\n  (* Pre-condition *)\n  Have: (0 <= x) /\\ (0 <= x_2).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Then *)\n  Have: 0 < x_1.\n  (* Then *)\n  Have: 0 < x_2.\n  (* Invariant *)\n  Have: (of_f32(L_sum(a_6, a_4, 0, 0)) * of_f32(L_sum(a_6, a_5, 0, 0))) = .0.\n  (* Invariant *)\n  Have: (of_f32(L_sum(a_3, a_4, 0, 0)) * of_f32(L_sum(a_3, a_5, 0, 0)))\n          = of_f32(v).\n  (* Then *)\n  Have: 0 < x.\n}\nProve: (of_f32(L_sum(a_10, a_4, 0, 1)) * of_f32(L_sum(a_10, a_5, 0, 1)))\n         = of_f32(a_9).\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)', 'Error found in file: Output/MatrixMulti.c at line: 56', 'Error line content: loop invariant pIp->product[index] ==')

Loop Invariant Results:
- True
- True
- True
- False
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: InitVar.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (2/10):\nEffect at line 34\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (3/10):\nEffect at line 34\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (4/10):\nEffect at line 34\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (5/10):\nEffect at line 35\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32024), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (6/10):\nEffect at line 35\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32364), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (7/10):\nEffect at line 35\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32704), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (8/10):\nEffect at line 36\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (9/10):\nEffect at line 36\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (10/10):\nEffect at line 36\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')

Assertion Results:
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: AppInit.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'AppInitFun' (1/3):\nEffect at line 13\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.98ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (2/3):\nEffect at line 16\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.90ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (3/3):\nEffect at line 21\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32899), 1).\nProver Z3 4.8.12 returns Timeout (Qed:0.82ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: main.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (1/3):\nEffect at line 16\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_ipAppInit_45 <- 105][L_ipPeriodControl_46 <- 162],\n          a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (2/3):\nEffect at line 19\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_ipAppInit_45 <- 105][L_ipPeriodControl_46 <- 162],\n          a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (3/3):\nEffect at line 21\nLet a = pIp_1.F12___main_ret.\nLet a_1 = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_ipAppInit_45 <- 105][L_ipPeriodControl_46 <- 162],\n          a, 1).\n}\nProve: a_1 = a.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')

Assertion Results:
- True
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CalculateGyroRs.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True
- True
- True

Assertion Errors:
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 24) in 'CalculateGyroRsFun' (2/12):\nEffect at line 35\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), 5).\n  (* Then *)\n  Have: 6 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 24', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 24) in 'CalculateGyroRsFun' (3/12):\nEffect at line 35\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), 5).\n  (* Else *)\n  Have: x <= 5.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 24', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 24) in 'CalculateGyroRsFun' (8/12):\nEffect at line 72\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_71).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nLet a_3 = shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), 5).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:33ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 24', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 24) in 'CalculateGyroRsFun' (9/12):\nEffect at line 75\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_71).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nLet a_3 = shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), 5).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:35ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 24', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 24) in 'CalculateGyroRsFun' (10/12):\nEffect at line 79\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_71).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nLet a_3 = shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), 5).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:36ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 24', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 24) in 'CalculateGyroRsFun' (11/12):\nEffect at line 82\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_71).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nLet a_3 = shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), 5).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:41ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 24', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 24) in 'CalculateGyroRsFun' (12/12):\nEffect at line 85\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_71).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a).\nLet x_1 = Mint_2[a_3].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nLet a_4 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nLet a_5 = shift_A5_float32(a_4, 0).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(pIp_1.F13___CalculateGyroRs_pGyroData).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: 3 <= x.\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), 5).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_7 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_7)))))) ->\n      (Mf32_0[a_7] = Mf32_1[a_7])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_7 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_7)))))) ->\n      (Mf32_1[a_7] = Mf32_2[a_7])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n}\nProve: (a_3 = a_6) \\/\n    (exists i_2,i_1 : Z.\n     (shift_float32(shift_A5_float32(a_4, i_2), i_1) = a_6) /\\ (0 <= i_2) /\\\n     (0 <= i_1) /\\ (i_2 <= 2) /\\ (i_1 <= 4)).\nProver Z3 4.8.12 returns Unknown (Qed:55ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 24', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')

Assertion Results:
- True
- False
- False
- True
- True
- True
- True
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/CalculateGyroRs.c, line 23) in 'CalculateGyroRsFun':\nLet a = pIp_1.F13___CalculateGyroRs_pGyroData.\nLet x = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_1 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_2 = Mint_3[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0).\nLet x_3 = Mint_0\n            [shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(pIp_0.F13___CalculateGyroRs_pGyroData)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\\n      is_uint8(Mint_2\n                 [shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(pIp_2.F13___CalculateGyroRs_pGyroData)]) /\\\n      is_uint8(x_2) /\\ is_uint32(x_1) /\\ is_uint32(x) /\\ is_uint32(x_3).\n  (* Heap *)\n  Type: (region(pIp_1.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), 5).\n  If 6 <= x_2\n  Then {\n    Have: Mint_3 = Mint_4.\n    Have: Mint_4[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a) <- 5] =\n        Mint_2.\n  }\n  Else {\n    Let a_2 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\n    Have: Mint_3 = Mint_5.\n    Have: Mint_5[a_2 <- Mint_5[a_2]] = Mint_2.\n  }\n  If x != x_1\n  Then {\n    Let a_3 = pIp_0.F13___CalculateGyroRs_pGyroData.\n    Let x_4 = Mint_2[a_2].\n    Let a_4 = global(L_Rgtemp_71).\n    Let a_5 = { pIp_1 with F13___CalculateGyroRs_flgGryoCalc = 235 }.\n    Have: a_5 = pIp_2.\n    (* Invariant *)\n    Have: 0 <= x_4.\n    (* Loop assigns ... *)\n    Have: forall a_6 : addr.\n        ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n          ((i_2 <= 4) ->\n          (shift_float32(shift_A3_float32(a_4, i_2), i_1) != a_6)))))) ->\n        (Mf32_0[a_6] = Mf32_1[a_6])).\n    Have: (pIp_3 = pIp_2) /\\ (a_5 = pIp_3).\n    (* Invariant *)\n    Have: (0 <= j) /\\ (j <= x_4).\n    (* Else *)\n    Have: x_4 <= j.\n    Have: (pIp_4 = pIp_2) /\\ (a_5 = pIp_4).\n    (* Invariant *)\n    Have: x_4 <= 5.\n    (* Loop assigns ... *)\n    Have: forall a_6 : addr.\n        ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x_4 <= i_2) -> ((i_1 <= 2) ->\n          ((i_2 <= 4) ->\n          (shift_float32(shift_A3_float32(a_4, i_2), i_1) != a_6)))))) ->\n        (Mf32_1[a_6] = Mf32_2[a_6])).\n    (* Invariant *)\n    Have: (x_4 <= i) /\\ (i <= 5).\n    (* Else *)\n    Have: 5 <= i.\n    If 3 <= x_4\n    Else { Have: (Mint_6 = Mint_1) /\\ (a_5 = pIp_0). }\n    Have: Mint_6[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a_3)\n            <- Mint_6[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a_3)]] =\n        Mint_0.\n  }\n  Else { Have: (Mint_0 = Mint_1) /\\ (pIp_0 = pIp_1). }\n}\nProve: x_3 = x_1.\nProver Z3 4.8.12 returns Unknown (Qed:77ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 23', 'Error line content: ensures pIp->pGyroData->gyroStatus1 == \\old(pIp->pGyroData->gyroStatus0);')

Postcond Results:
- False

------------------------------------------------
File Name: CheckCal.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CheckCal.c, line 24):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___CheckCal_len.\nLet a = pIp_0.F10___CheckCal_pkv.\nLet x_2 = Mint_0[shift_uint8(a, i)].\nLet x_3 = L_sum(Mint_0, a, 0, i).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: to_uint8(x_2 + x_3) = L_sum(Mint_0, a, 0, x).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)', 'Error found in file: Output/CheckCal.c at line: 24', 'Error line content: loop invariant chksum == sum(pIp->pkv, 0, i);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/CheckCal.c, line 16) in 'CheckCalFun':\nLet x = pIp_0.F10___CheckCal_len.\nLet a = pIp_0.F10___CheckCal_pkv.\nLet x_1 = Mint_0[shift_uint8(a, x - 1)].\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x) /\\ is_uint8(L_sum(Mint_0, a, 0, i)) /\\\n      is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x).\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x).\n  (* Else *)\n  Have: x <= i.\n}\nProve: x_1 = 0.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/CheckCal.c at line: 16', 'Error line content: ensures sum(pIp->pkv, 0, pIp->len) == \\old(sum(pIp->pkv, 0, pIp->len)) + pIp->pkv[pIp->len - 1];')

Postcond Results:
- False

------------------------------------------------
File Name: SendUartData.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: TMProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
- ("Goal Assigns nothing in 'TMProcessFun' (2/41):\nEffect at line 34\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (38/41):\nEffect at line 89\nLet a = global(L_pkv_68).\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (havoc(Mint_undef_0, Mint_0, shift_uint8(a, 0), 32)\n         [shift_uint8(a, i_1)] = 0))).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (41/41):\nEffect at line 95\nLet a = global(L_pkv_68).\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (havoc(Mint_undef_0, Mint_0, shift_uint8(a, 0), 32)\n         [shift_uint8(a, i_1)] = 0))).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)", None, None)

Assertion Results:
- True
- False
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- True
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Float.c

Syntax Error:
syntax Error
[kernel] Parsing Output/Tr32Float.c (with preprocessing)
[kernel:annot-error] Output/Tr32Float.c:34: Warning: 
  Only one code annotation is allowed per comment
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: NoctrlJudge.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/NoctrlJudge.c, line 16) in 'NoctrlJudgeFun' (2/3):\nEffect at line 31\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 16', 'Error line content: assigns pIp->mFWarning.countAV, pIp->mFWarning.Wav, pIp->nouse;')

Assertion Results:
- True
- False
- True

Postcond Errors:
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 17) in 'NoctrlJudgeFun':\nLet a = pIp_1.F11___NoctrlJudge_mFWarning.\nLet a_1 = pIp_0.F11___NoctrlJudge_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_countAV.\nLet x_1 = a_1.F4_TAG_FAULT_WARNING_countAV.\nLet a_2 = (pIp_1.F11___NoctrlJudge_mAttitude).F6_TAG_ATTITUDE_PARA_rate.\nAssume {\n  Type: is_uint8(pIp_1.F11___NoctrlJudge_nouse) /\\\n      is_uint8(pIp_0.F11___NoctrlJudge_nouse) /\\\n      is_uint8(a.F4_TAG_FAULT_WARNING_Wav) /\\\n      is_uint8(a_1.F4_TAG_FAULT_WARNING_Wav) /\\ is_uint32(x) /\\\n      is_uint32(x_1) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_1.F11___NoctrlJudge_fun.base) <= 0.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_75)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_3 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_3 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_3.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_3 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_3.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_4 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_4 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_4.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_4 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x_1\n         = (x\n            + (if (2.0 < Rg.max(RAbs.abs(of_f32(a_2[0])),\n                     Rg.max(RAbs.abs(of_f32(a_2[1])),\n                     RAbs.abs(of_f32(a_2[2]))))) then 1\n               else (if (0 < x_1) then (-1) else 0))).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/NoctrlJudge.c at line: 17', 'Error line content: ensures pIp->mFWarning.countAV == \\old(pIp->mFWarning.countAV) + (\\max(\\abs(\\old(pIp->mAttitude.rate[0])), \\max(\\abs(\\old(pIp->mAttitude.rate[1])), \\abs(\\old(pIp->mAttitude.rate[2])))) > 2.0f ? 1 : (pIp->mFWarning.countAV > 0 ? -1 : 0));')
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 18) in 'NoctrlJudgeFun':\nLet a = pIp_1.F11___NoctrlJudge_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_Wav.\nLet a_1 = pIp_0.F11___NoctrlJudge_mFWarning.\nLet x_1 = a_1.F4_TAG_FAULT_WARNING_Wav.\nLet x_2 = a.F4_TAG_FAULT_WARNING_countAV.\nAssume {\n  Type: is_uint8(pIp_1.F11___NoctrlJudge_nouse) /\\\n      is_uint8(pIp_0.F11___NoctrlJudge_nouse) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_1.F11___NoctrlJudge_fun.base) <= 0.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_75)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_2 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_3 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_3 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_3.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_4 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x_1 = (if (301 <= x_2) then 235 else x).\nProver Z3 4.8.12 returns Timeout (Qed:31ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 18', 'Error line content: ensures pIp->mFWarning.Wav == (\\old(pIp->mFWarning.countAV) > 300 ? TRUE : \\old(pIp->mFWarning.Wav));')
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 19) in 'NoctrlJudgeFun':\nLet x = pIp_1.F11___NoctrlJudge_nouse.\nLet x_1 = pIp_0.F11___NoctrlJudge_nouse.\nLet a = pIp_1.F11___NoctrlJudge_mFWarning.\nLet a_1 = pIp_0.F11___NoctrlJudge_mFWarning.\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1) /\\\n      is_uint8(a.F4_TAG_FAULT_WARNING_Wav) /\\\n      is_uint8(a_1.F4_TAG_FAULT_WARNING_Wav) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_1.F11___NoctrlJudge_fun.base) <= 0.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_75)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_2 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_3 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_3 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_3.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_4 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x_1 = x.\nProver Z3 4.8.12 returns Timeout (Qed:31ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 19', 'Error line content: ensures pIp->nouse == \\old(pIp->nouse);')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: GyroChoose.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroChoose.c, line 19):\nLet x = to_uint8(1 + i_1).\nLet a = pIp_0.F10___GyroChoose_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_stateFlag(a).\nLet x_1 = Mint_2[shift_uint64(a_1, i_1)].\nLet a_2 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_4 = shift_uint8(a_3, 0).\nAssume {\n  Type: is_uint8(i_1) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroChoose_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (Mint_2[shift_uint64(a_1, i)] = 235) /\\ (0 <= i) /\\ (i < x) /\\\n      is_uint8(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= 9).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_2[shift_uint64(a_1, i_2)] = 235) ->\n      ((0 <= i_2) -> ((i_2 < i_1) ->\n      ((land(v, lsl(1, i_2)) != 0) /\\\n       (havoc(Mint_undef_0, Mint_3[a_2 <- 0], a_4, 9)[a_2 <- v_1]\n          [shift_uint8(a_3, v_1 - 1)] = i_2))))).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_2[shift_uint64(a_1, i_2)] = 0) ->\n      ((0 <= i_2) -> ((i_2 < i_1) -> (land(v, lsl(1, i_2)) = 0)))).\n  (* Then *)\n  Have: i_1 <= 8.\n  If x_1 = 235\n  Then {\n    Let a_5 = havoc(Mint_undef_0, Mint_3[a_2 <- 0], a_4, 9)[a_2 <- v_1]\n                [shift_uint8(a_3, v_1) <- i_1].\n    Have: a_5[a_2 <- to_uint8(1 + a_5[a_2])] = Mint_1.\n    Have: Mint_4[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a) <- lor(v,\n            to_uint32(lsl(1, i_1)))] = Mint_0.\n  }\n  Else {\n    Have: (Mint_4[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a) <- v] =\n           Mint_0) /\\\n        (havoc(Mint_undef_0, Mint_3[a_2 <- 0], a_4, 9)[a_2 <- v_1] = Mint_1).\n  }\n  (* Invariant *)\n  Have: x <= 9.\n}\nProve: (land(lsl(1, i),\n          Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)]) != 0) /\\\n    (Mint_1[shift_uint8(a_3, Mint_1[a_2] - 1)] = i).\nProver Z3 4.8.12 returns Timeout (Qed:38ms) (3s)', 'Error found in file: Output/GyroChoose.c at line: 19', 'Error line content: loop invariant \\forall unint08 j; 0 <= j < i ==>')
- ('Goal Preservation of Invariant (file Output/GyroChoose.c, line 23):\nLet a = pIp_0.F10___GyroChoose_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_stateFlag(a).\nLet x = to_uint8(1 + i_1).\nLet x_1 = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet a_2 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x_2 = Mint_1[shift_uint64(a_1, i_1)].\nLet a_4 = shift_uint8(a_2, 0).\nAssume {\n  Type: is_uint8(i_1) /\\ is_uint64(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroChoose_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (Mint_1[shift_uint64(a_1, i)] = 0) /\\ (0 <= i) /\\ (i < x) /\\\n      is_uint8(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= 9).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_1[shift_uint64(a_1, i_2)] = 235) ->\n      ((0 <= i_2) -> ((i_2 < i_1) ->\n      ((land(v, lsl(1, i_2)) != 0) /\\\n       (havoc(Mint_undef_0, Mint_2[a_3 <- 0], a_4, 9)[a_3 <- v_1]\n          [shift_uint8(a_2, v_1 - 1)] = i_2))))).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_1[shift_uint64(a_1, i_2)] = 0) ->\n      ((0 <= i_2) -> ((i_2 < i_1) -> (land(v, lsl(1, i_2)) = 0)))).\n  (* Then *)\n  Have: i_1 <= 8.\n  If x_2 = 235\n  Then {\n    Let a_5 = havoc(Mint_undef_0, Mint_2[a_3 <- 0], a_4, 9)[a_3 <- v_1]\n                [shift_uint8(a_2, v_1) <- i_1].\n    Have: a_5[a_3 <- to_uint8(1 + a_5[a_3])] = Mint_3.\n    Have: Mint_4[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a) <- lor(v,\n            to_uint32(lsl(1, i_1)))] = Mint_0.\n  }\n  Else {\n    Have: (Mint_4[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a) <- v] =\n           Mint_0) /\\\n        (havoc(Mint_undef_0, Mint_2[a_3 <- 0], a_4, 9)[a_3 <- v_1] = Mint_3).\n  }\n  (* Invariant *)\n  Have: x <= 9.\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_1[shift_uint64(a_1, i_2)] = 235) ->\n      ((0 <= i_2) -> ((i_2 < x) ->\n      ((land(lsl(1, i_2), x_1) != 0) /\\\n       (Mint_3[shift_uint8(a_2, Mint_3[a_3] - 1)] = i_2))))).\n}\nProve: land(lsl(1, i), x_1) = 0.\nProver Z3 4.8.12 returns Timeout (Qed:41ms) (3s)', 'Error found in file: Output/GyroChoose.c at line: 23', 'Error line content: loop invariant \\forall unint08 j; 0 <= j < i ==>')

Loop Invariant Results:
- True
- False
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrusterCtrlLogic.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: SAMSubModeCruise.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (2/9):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.87ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData;')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (3/9):\nEffect at line 24\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData;')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (4/9):\nEffect at line 28\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData;')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (5/9):\nEffect at line 32\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData;')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (8/9):\nEffect at line 43\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData;')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (9/9):\nEffect at line 51\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData;')

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- False
- False
- False
- True
- True
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Inputproceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Inputproceed.c, line 12) in 'InputproceedFun' (2/4):\nEffect at line 21\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 12', 'Error line content: assigns pIp->mAttitude.angle[0..1], pIp->mAttitude.rate[0..2], pIp->mGyroData.Gi[0..1];')
- ("Goal Assigns (file Output/Inputproceed.c, line 12) in 'InputproceedFun' (4/4):\nEffect at line 25\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.79ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 12', 'Error line content: assigns pIp->mAttitude.angle[0..1], pIp->mAttitude.rate[0..2], pIp->mGyroData.Gi[0..1];')

Assertion Results:
- True
- False
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultJudgeSP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 7) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\ is_uint32(x_1) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Residual *)\n  When: x_1 <= 33750.\n  If x = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1 + x_2) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_0).\n  }\n  Else {\n    If x_2 != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1\n                                                       + (a_1.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_2 = pIp_1. }\n    If 3\n         <= ((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_2 = pIp_3.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_3 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_3.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_0).\n    }\n    Else { Have: pIp_2 = pIp_0. }\n  }\n}\nProve: (x_1 = 0) \\/ (x_1 = (1 + x_2)).\nProver Z3 4.8.12 returns Timeout (Qed:71ms) (3s)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 7', 'Error line content: ensures pIp->mFWarning.countSPLost == 0 || pIp->mFWarning.countSPLost == \\old(pIp->mFWarning.countSPLost) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 8) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_countSPSeen.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_3) /\\\n      is_uint32(x) /\\\n      is_uint32((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  If x_1 = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1\n                                                     + (a.F4_TAG_FAULT_WARNING_countSPLost)) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_2).\n  }\n  Else {\n    If (a.F4_TAG_FAULT_WARNING_countSPLost) != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1 + x_2) } }) =\n           pIp_3).\n    }\n    Else { Have: pIp_3 = pIp_1. }\n    If 3\n         <= ((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_3 = pIp_4.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_4 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_4.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_3 = pIp_2. }\n  }\n  If 33751 <= x\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_5).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_5 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_5.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: (x_3 = 0) \\/ (x_3 = (1 + x_2)).\nProver Z3 4.8.12 returns Unknown (Qed:77ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 8', 'Error line content: ensures pIp->mFWarning.countSPSeen == 0 || pIp->mFWarning.countSPSeen == \\old(pIp->mFWarning.countSPSeen) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 9) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet a_1 = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a_1.F4_TAG_FAULT_WARNING_Wsp.\nLet x_3 = a.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint32(x_3) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\ is_uint32(x) /\\\n      is_uint32((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_0.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: (a.F4_TAG_FAULT_WARNING_Wsp) = 0.\n  If x_1 = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_0 with\n            F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                 F4_TAG_FAULT_WARNING_Wsp = 0 ;\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1 + x_3) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_2).\n  }\n  Else {\n    If x_3 != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_0 with\n              F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                   F4_TAG_FAULT_WARNING_Wsp = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1\n                                                       + (a.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                   } }) = pIp_3).\n    }\n    Else { Have: pIp_3 = pIp_0. }\n    If 3\n         <= ((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_3 = pIp_4.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_4 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_4.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_3 = pIp_2. }\n  }\n  If 33751 <= x\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_5).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_5 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_5.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: (33751 <= x_3) <-> (x_2 != 0).\nProver Z3 4.8.12 returns Unknown (Qed:67ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 9', 'Error line content: ensures pIp->mFWarning.Wsp == (\\old(pIp->mFWarning.countSPLost) > 33750) ? TRUE : \\old(pIp->mFWarning.Wsp);')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: Delay.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: LimitControllerInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitControllerInput.c, line 8) in 'LimitControllerInputFun' (1/2):\nEffect at line 17\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 8', 'Error line content: assigns pIp->mAttitude, pIp->mController[0];')
- ("Goal Assigns (file Output/LimitControllerInput.c, line 8) in 'LimitControllerInputFun' (2/2):\nEffect at line 24\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.64ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 8', 'Error line content: assigns pIp->mAttitude, pIp->mController[0];')

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GyroPick.c

Syntax Error:
syntax Error
[kernel] Parsing Output/GyroPick.c (with preprocessing)
[kernel:annot-error] Output/GyroPick.c:5: Warning: unexpected token 'logic'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'TcProcessFun' (1/2):\nEffect at line 21\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.75ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TcProcessFun' (2/2):\nEffect at line 30\nAssume { (* Then *) Have: Mint_0[global(L_GetUartData_ret_44)] = 1. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.83ms) (3s)", None, None)

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixInv33F.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: Input.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Input.c, line 12) in 'InputFun' (1/3):\nEffect at line 18\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.54ms) (3s)", 'Error found in file: Output/Input.c at line: 12', 'Error line content: assigns pIp->mGyroData.stateFlag[0..8], pIp->mGyroData.wa[0..8], pIp->mDSSData;')
- ("Goal Assigns (file Output/Input.c, line 12) in 'InputFun' (2/3):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.56ms) (3s)", 'Error found in file: Output/Input.c at line: 12', 'Error line content: assigns pIp->mGyroData.stateFlag[0..8], pIp->mGyroData.wa[0..8], pIp->mDSSData;')
- ("Goal Assigns (file Output/Input.c, line 12) in 'InputFun' (3/3):\nEffect at line 25\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/Input.c at line: 12', 'Error line content: assigns pIp->mGyroData.stateFlag[0..8], pIp->mGyroData.wa[0..8], pIp->mDSSData;')

Assertion Results:
- True
- True
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: PeriodControl.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Establishment of Invariant (file Output/PeriodControl.c, line 59):\nLet x = pIp_1.F18___PeriodControl_countSate.\nLet x_1 = pIp_0.F18___PeriodControl_flg160INT.\nAssume {\n  Type: is_uint64(v) /\\ is_uint32(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F18___PeriodControl_fun.base) <= 0.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: (({ Init_pIp_0 with Init_F18___PeriodControl_countSate = v_1 }) =\n         Init_pIp_0) /\\\n      (({ Init_pIp_0 with Init_F18___PeriodControl_flgGryoCalc = v_2 }) =\n       Init_pIp_0) /\\\n      (({ Init_pIp_0 with Init_F18___PeriodControl_flg160INT = v_3 }) =\n       Init_pIp_0).\n  (* Invariant *)\n  Have: 0 <= v.\n}\nProve: x_1 = 52428.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)', 'Error found in file: Output/PeriodControl.c at line: 59', 'Error line content: loop invariant pIp->flg160INT == 0xCCCC;')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GetUartData.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GetUartData.c, line 31):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___GetUartData_len.\nLet a = pIp_0.F10___GetUartData_data.\nLet a_1 = shift_uint8(a, 0).\nLet a_2 = havoc(Mint_undef_0, Mint_0, a_1, x_1).\nLet a_3 = pIp_0.F10___GetUartData_ret.\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GetUartData_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_1).\n  Have: ({ Init_pIp_0 with Init_F10___GetUartData_bSucc = true }) =\n      Init_pIp_0.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->\n      (a_2[shift_uint8(a, i_2)] = w_2))).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: a_2[shift_uint8(a, i) <- to_uint8(w)][shift_uint8(a, i_1)] = w_1.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)', 'Error found in file: Output/GetUartData.c at line: 31', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> pIp->data[j] == ADDR_READ(pIp->addr);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/GetUartData.c, line 18) in 'GetUartDataFun':\nLet x = pIp_1.F10___GetUartData_len.\nLet a = pIp_1.F10___GetUartData_data.\nLet a_1 = pIp_1.F10___GetUartData_ret.\nAssume {\n  Type: is_uint64(fifoCnt_0) /\\ is_uint64(i_1) /\\ is_uint64(x) /\\\n      is_uint64(pIp_2.F10___GetUartData_len) /\\\n      is_uint64(pIp_3.F10___GetUartData_len).\n  (* Heap *)\n  Type: (region(pIp_1.F10___GetUartData_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: ((pIp_0.F10___GetUartData_bSucc) = 1) /\\ (0 <= i) /\\\n      (i < (pIp_0.F10___GetUartData_len)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x).\n  Have: ({ Init_pIp_0 with Init_F10___GetUartData_bSucc = true }) =\n      Init_pIp_0.\n  If x = fifoCnt_0\n  Then {\n    Let a_2 = { pIp_1 with F10___GetUartData_bSucc = 0 }.\n    Have: a_2 = pIp_2.\n    (* Invariant *)\n    Have: 0 <= x.\n    (* Loop assigns ... *)\n    Have: havoc(Mint_undef_0, Mint_1, shift_uint8(a, 0), x) = Mint_0.\n    Have: (pIp_3 = pIp_2) /\\ (a_2 = pIp_3).\n    (* Invariant *)\n    Have: (0 <= i_1) /\\ (i_1 <= x).\n    (* Invariant *)\n    Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n        (Mint_0[shift_uint8(a, i_2)] = w_1))).\n    (* Else *)\n    Have: x <= i_1.\n    Have: ({ pIp_1 with F10___GetUartData_bSucc = 1 }) = pIp_0.\n  }\n  Else { Have: a_2 = pIp_0. }\n}\nProve: Mint_0[shift_uint8(pIp_0.F10___GetUartData_data, i)] = w.\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/GetUartData.c at line: 18', 'Error line content: ensures pIp->bSucc == 1 ==> \\forall integer i; 0 <= i < pIp->len ==> pIp->data[i] == ADDR_READ(pIp->addr);')

Postcond Results:
- True
- False

------------------------------------------------
File Name: GyroStateGet.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 36):\nLet x = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_2 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_3 = to_uint64(2 + to_uint64(2 * i_1)).\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(x) /\\ is_uint8(Mint_0[shift_uint8(a, x_3)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, to_uint64(1 + x_3))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= x).\n  (* Then *)\n  Have: i_1 < x.\n}\nProve: to_uint64(1 + i) <= x_2.\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 36', 'Error line content: loop invariant 0 <= i <= pIp->NumGyro;')

Loop Invariant Results:
- False

Assertion Errors:
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (3/7):\nEffect at line 24\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (4/7):\nEffect at line 27\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (5/7):\nEffect at line 31\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (7/7):\nEffect at line 40\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet a_2 = shift_uint64(a_1, 0).\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_3 = pIp_1.F14___GyroStateGet_wa.\nLet a_4 = shift_float32(a_3, 0).\nLet a_5 = shift_float32(pIp_0.F14___GyroStateGet_wa, 0).\nLet a_6 = shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, 0).\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: (((!invalid(Malloc_0, a_5, x)) ->\n        (included(a_5, x, a_4, x_1) \\/ included(a_5, x, a_2, x_1)))) /\\\n    (((!invalid(Malloc_0, a_6, x)) ->\n     (included(a_6, x, a_4, x_1) \\/ included(a_6, x, a_2, x_1)))).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')

Assertion Results:
- True
- True
- False
- False
- False
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: JetDataGet.c

Syntax Error:
syntax Error
[kernel] Parsing Output/JetDataGet.c (with preprocessing)
[kernel:annot-error] Output/JetDataGet.c:6: Warning: unexpected token 'volatile'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SwitchSS.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'SwitchSSFun' (1/2):\nEffect at line 16\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___SwitchSS_fun.base) <= 0) /\\ linked(Malloc_0).\n  (* Then *)\n  Have: ((pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A) = 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Unknown (Qed:0.92ms)", None, None)
- ("Goal Assigns nothing in 'SwitchSSFun' (2/2):\nEffect at line 21\nLet x = (pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SwitchSS_fun.base) <= 0) /\\ linked(Malloc_0).\n  (* Else *)\n  Have: x != 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", None, None)

Assertion Results:
- True
- True
- True
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SwitchSS.c, line 6) in 'SwitchSSFun':\nAssume {\n  (* Heap *)\n  Type: region(pIp_0.F10___SwitchSS_fun.base) <= 0.\n  (* Goal *)\n  When: ((pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A) = 1.\n}\nProve: w = 2.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/SwitchSS.c at line: 6', 'Error line content: ensures pIp->mDSSData.stateFlag_A == 1 ==> \\at(ADDR_READ(0x8000), Post) == 0x2;')
- ("Goal Post-condition (file Output/SwitchSS.c, line 7) in 'SwitchSSFun':\nLet x = (pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_0.F10___SwitchSS_fun.base) <= 0.\n  (* Goal *)\n  When: x != 1.\n}\nProve: w = 1.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/SwitchSS.c at line: 7', 'Error line content: ensures pIp->mDSSData.stateFlag_A != 1 ==> \\at(ADDR_READ(0x8000), Post) == 0x1;')

Postcond Results:
- False
- False

------------------------------------------------
File Name: SAMSubModePitch.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ('Goal Assertion (file Output/SAMSubModePitch.c, line 27):\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n}\nProve: .0 <= of_f32(to_f32(real_of_int(fabs_0))).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)', 'Error found in file: Output/SAMSubModePitch.c at line: 27', 'Error line content: /*@ assert pirawtmp >= 0.0; */')
- ('Goal Assertion (file Output/SAMSubModePitch.c, line 32):\nLet a = to_f32(real_of_int(fabs_0)).\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_2 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_2, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Assertion *)\n  Have: .0 <= of_f32(a).\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), a).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n}\nProve: to_uint64(1 + x) <= 17.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.4s)', 'Error found in file: Output/SAMSubModePitch.c at line: 32', 'Error line content: /*@ assert 0 <= pIp->countPublic <= 17; */')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (4/21):\nEffect at line 35\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet x_1 = to_uint64(1 + x).\nLet a = to_f32(real_of_int(fabs_0)).\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_2 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_2, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Assertion *)\n  Have: .0 <= of_f32(a).\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), a).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Assertion *)\n  Have: x_1 <= 17.\n  (* Then *)\n  Have: 17 <= x_1.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, i)) =\n     a_3) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (5/21):\nEffect at line 35\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet x_1 = to_uint64(1 + x).\nLet a = to_f32(real_of_int(fabs_0)).\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_2 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_2, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Assertion *)\n  Have: .0 <= of_f32(a).\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), a).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Assertion *)\n  Have: x_1 <= 17.\n  (* Then *)\n  Have: 17 <= x_1.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, i)) =\n     a_3) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (6/21):\nEffect at line 35\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet x_1 = to_uint64(1 + x).\nLet a = to_f32(real_of_int(fabs_0)).\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_2 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_2, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Assertion *)\n  Have: .0 <= of_f32(a).\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), a).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Assertion *)\n  Have: x_1 <= 17.\n  (* Then *)\n  Have: 17 <= x_1.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, i)) =\n     a_3) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (7/21):\nEffect at line 38\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet x_1 = to_uint64(1 + x).\nLet a = to_f32(real_of_int(fabs_0)).\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_2 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_2, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Assertion *)\n  Have: .0 <= of_f32(a).\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), a).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Assertion *)\n  Have: x_1 <= 17.\n  (* Then *)\n  Have: 17 <= x_1.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, i)) =\n     a_3) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (8/21):\nEffect at line 38\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet x_1 = to_uint64(1 + x).\nLet a = to_f32(real_of_int(fabs_0)).\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_2 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_2, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Assertion *)\n  Have: .0 <= of_f32(a).\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), a).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Assertion *)\n  Have: x_1 <= 17.\n  (* Then *)\n  Have: 17 <= x_1.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, i)) =\n     a_3) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (9/21):\nEffect at line 38\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet x_1 = to_uint64(1 + x).\nLet a = to_f32(real_of_int(fabs_0)).\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_2 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_2, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Assertion *)\n  Have: .0 <= of_f32(a).\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), a).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Assertion *)\n  Have: x_1 <= 17.\n  (* Then *)\n  Have: 17 <= x_1.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, i)) =\n     a_3) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (13/21):\nEffect at line 59\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:44ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (14/21):\nEffect at line 59\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:56ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (15/21):\nEffect at line 59\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:60ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (16/21):\nEffect at line 60\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32024).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:51ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (17/21):\nEffect at line 60\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32364).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:72ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (18/21):\nEffect at line 60\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32704).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:69ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (19/21):\nEffect at line 61\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:64ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (20/21):\nEffect at line 61\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:63ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 16) in 'SAMSubModePitchFun' (21/21):\nEffect at line 61\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Let a_3 = to_f32(real_of_int(fabs_0)).\n    Have: (ta_tmp_0=false).\n    (* Assertion *)\n    Have: .0 <= of_f32(a_3).\n    If lt_f32(to_f32(1.0), a_3)\n    Then {\n      Let x_2 = to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic)).\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      (* Assertion *)\n      Have: x_2 <= 17.\n      If 17 <= x_2\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = x_2 }) =\n            pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:65ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')

Assertion Results:
- True
- False
- False
- True
- True
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultProceedSP.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SoftFaultProceedSP.c (with preprocessing)
[kernel] Output/SoftFaultProceedSP.c:29: 
  syntax error:
  Location: line 29, between columns 20 and 21, before or at token: ipSwitchSS
  27            case 5:
  28                /*@ assert pIp->mFWarning.countSPset == 5; */
  29                IPCREATE(SwitchSS, ipSwitchSS);
                            ^
  30                /*@ assert \valid(ipSwitchSS); */
  31                IPCALL(ipSwitchSS);
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrABAutoChoose.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ThrABAutoChoose.c, line 9) in 'ThrABAutoChooseFun' (3/9):\nEffect at line 18\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.82ms) (3s)", 'Error found in file: Output/ThrABAutoChoose.c at line: 9', 'Error line content: assigns pIp->mThrDistribute.flgABChoose;')
- ("Goal Assigns (file Output/ThrABAutoChoose.c, line 9) in 'ThrABAutoChooseFun' (5/9):\nEffect at line 19\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.97ms) (3s)", 'Error found in file: Output/ThrABAutoChoose.c at line: 9', 'Error line content: assigns pIp->mThrDistribute.flgABChoose;')

Assertion Results:
- True
- True
- True
- True
- True
- True
- False
- True
- False
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: LimitFloat32.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/LimitFloat32.c, line 12) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: L_limit(of_f32(pIp_0.F10___LimitFloat32_fin),\n         of_f32(pIp_0.F10___LimitFloat32_fbound))\n         = of_f32(pIp_0.F10___LimitFloat32_fvalue).\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/LimitFloat32.c at line: 12', 'Error line content: ensures *pIp->ret == limit(pIp->fin, pIp->fbound);')
- ("Goal Post-condition (file Output/LimitFloat32.c, line 13) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: L_limit(of_f32(pIp_0.F10___LimitFloat32_fin),\n         of_f32(pIp_0.F10___LimitFloat32_fbound))\n         = of_f32(pIp_0.F10___LimitFloat32_fvalue).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/LimitFloat32.c at line: 13', 'Error line content: ensures pIp->fvalue == limit(pIp->fin, pIp->fbound);')

Postcond Results:
- False
- False

------------------------------------------------
File Name: DevControl.c

Syntax Error:
syntax Error
[kernel] Parsing Output/DevControl.c (with preprocessing)
[kernel:annot-error] Output/DevControl.c:9: Warning: 
  logic label `addr' not found. Ignoring global annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Uint08.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: LimitCtrlAngleInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 9) in 'LimitCtrlAngleInputFun' (3/7):\nEffect at line 16\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0,\n           shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1,\n                                               2)), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 1][L_ipLimitFloat32_0_41\n                   <- 6][L_LimitFloat32_ret_1_42 <- 1][L_ipLimitFloat32_1_43\n                   <- 6],\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 9', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 9) in 'LimitCtrlAngleInputFun' (4/7):\nEffect at line 21\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 1][L_ipLimitFloat32_0_41\n                   <- 6][L_LimitFloat32_ret_1_42 <- 1][L_ipLimitFloat32_1_43\n                   <- 6],\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 9', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 9) in 'LimitCtrlAngleInputFun' (5/7):\nEffect at line 23\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 1][L_ipLimitFloat32_0_41\n                   <- 6][L_LimitFloat32_ret_1_42 <- 1][L_ipLimitFloat32_1_43\n                   <- 6],\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1))).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 9', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 9) in 'LimitCtrlAngleInputFun' (6/7):\nEffect at line 28\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 1][L_ipLimitFloat32_0_41\n                   <- 6][L_LimitFloat32_ret_1_42 <- 1][L_ipLimitFloat32_1_43\n                   <- 6],\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 9', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 9) in 'LimitCtrlAngleInputFun' (7/7):\nEffect at line 30\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 1][L_ipLimitFloat32_0_41\n                   <- 6][L_LimitFloat32_ret_1_42 <- 1][L_ipLimitFloat32_1_43\n                   <- 6],\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1))).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 9', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')

Assertion Results:
- True
- True
- True
- True
- True
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SAMSubModeRoll.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (4/22):\nEffect at line 36\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (5/22):\nEffect at line 36\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (6/22):\nEffect at line 36\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:15ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (7/22):\nEffect at line 37\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:13ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (8/22):\nEffect at line 37\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:13ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (9/22):\nEffect at line 37\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:15ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (13/22):\nEffect at line 67\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:97ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (14/22):\nEffect at line 67\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:91ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (15/22):\nEffect at line 67\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:83ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (16/22):\nEffect at line 68\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:84ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (17/22):\nEffect at line 68\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:98ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (18/22):\nEffect at line 68\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:103ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (19/22):\nEffect at line 69\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32028).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:90ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (20/22):\nEffect at line 69\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32368).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:106ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (21/22):\nEffect at line 69\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32708).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:111ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (22/22):\nEffect at line 80\nLet x = pIp_0.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      If 17 <= to_uint64(1 + (pIp_1.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_1.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_0).\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else { Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_0.\n  }\n  (* Then *)\n  Have: 6251 <= x.\n  Have: ((pIp_0.F11___SAMSubModeRoll_flgPRSAM) = 13107) /\\\n      (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n       Init_pIp_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n      Init_pIp_0.\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:131ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CalculateGyroDg.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
- ("Goal Assigns (file Output/CalculateGyroDg.c, line 13) in 'CalculateGyroDgFun' (5/8):\nEffect at line 43\nLet a = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(j_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a), 0), 3).\n  (* Pre-condition *)\n  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i_1 <= 2) ->\n      ((i <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i *\n          i_1), 5))))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Else *)\n  Have: 5 <= j.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= x).\n  (* Else *)\n  Have: x <= j_1.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/CalculateGyroDg.c at line: 13', 'Error line content: assigns pIp->pGyroData->W[0..2];')

Assertion Results:
- True
- True
- True
- True
- False
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: DSSDataGet.c

Syntax Error:
syntax Error
[kernel] Parsing Output/DSSDataGet.c (with preprocessing)
[kernel:annot-error] Output/DSSDataGet.c:7: Warning: unexpected token 'volatile'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: common.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/common.c, line 17):\nLet a = shift_sint32(global(G_b_29), 0).\nLet a_1 = havoc(Mint_undef_1, Mint_0, a, n).\nLet a_2 = shift_sint32(global(G_a_28), 0).\nLet a_3 = havoc(Mint_undef_0, a_1, a_2, n)[a_2].\nAssume {\n  Type: is_sint32(n) /\\ is_sint32(a_3).\n  (* Goal *)\n  When: (i <= 0) /\\ (0 <= i).\n  (* Pre-condition *)\n  Have: n <= 1.\n  (* Invariant *)\n  Have: 0 <= n.\n  (* Invariant *)\n  Have: 0 < n.\n}\nProve: a_3 = a_1[a].\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)', 'Error found in file: Output/common.c at line: 17', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> a[j] == initial_b[j];')

Loop Invariant Results:
- True
- False
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: ModeControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (2/10):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (4/10):\nEffect at line 30\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 0. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (5/10):\nEffect at line 36\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 17. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (6/10):\nEffect at line 42\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 34. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (7/10):\nEffect at line 48\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 51. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (8/10):\nEffect at line 52\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32000).\nLet a_1 = global(G_pIp_56).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: (shiftfield_F15___ModeControl_Count160ms(a_1) = a) \\/\n    (shiftfield_F15___ModeControl_countMode(a_1) = a) \\/\n    (shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(shiftfield_F15___ModeControl_mAttitude(a_1)),\n       0) = a) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mDSSData(a_1), 5) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mFWarning(a_1), 12) \\/\n    included(a, 1,\n      shift_S7_TAG_CONTROLLERIN(shiftfield_F15___ModeControl_mController(a_1),\n        0), 3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (9/10):\nEffect at line 52\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32340).\nLet a_1 = global(G_pIp_56).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: (shiftfield_F15___ModeControl_Count160ms(a_1) = a) \\/\n    (shiftfield_F15___ModeControl_countMode(a_1) = a) \\/\n    (shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(shiftfield_F15___ModeControl_mAttitude(a_1)),\n       0) = a) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mDSSData(a_1), 5) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mFWarning(a_1), 12) \\/\n    included(a, 1,\n      shift_S7_TAG_CONTROLLERIN(shiftfield_F15___ModeControl_mController(a_1),\n        0), 3).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 11) in 'ModeControlFun' (10/10):\nEffect at line 52\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32680).\nLet a_1 = global(G_pIp_56).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: (shiftfield_F15___ModeControl_Count160ms(a_1) = a) \\/\n    (shiftfield_F15___ModeControl_countMode(a_1) = a) \\/\n    (shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(shiftfield_F15___ModeControl_mAttitude(a_1)),\n       0) = a) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mDSSData(a_1), 5) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mFWarning(a_1), 12) \\/\n    included(a, 1,\n      shift_S7_TAG_CONTROLLERIN(shiftfield_F15___ModeControl_mController(a_1),\n        0), 3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/ModeControl.c, line 12) in 'ModeControlFun':\nLet x = Mint_2[global(L_Tr32Uint08_ret_61)].\nLet a = shiftfield_F15___ModeControl_countMode(global(G_pIp_56)).\nLet x_1 = Mint_1[a].\nLet x_2 = Mint_0[a].\nAssume {\n  Type: is_uint8(x) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(Mint_3[a]).\n  If x = 0\n  Else {\n    If x = 17\n    Else {\n      If x = 34\n      Else {\n        Have: Mint_2 = Mint_4.\n        If Mint_4[global(L_Tr32Uint08_ret_61)] = 51\n        Else {\n          Have: (Mint_4 = Mint_5) /\\\n              (Mint_3[a <- to_uint64(1 + Mint_3[a])] = Mint_0).\n        }\n      }\n    }\n  }\n}\nProve: x_2 = (1 + x_1).\nProver Z3 4.8.12 returns Timeout (Qed:30ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: ensures pIp->countMode == \\old(pIp->countMode) + 1;')

Postcond Results:
- False

------------------------------------------------
File Name: ModPNHP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ('Goal Assertion (file Output/ModPNHP.c, line 21):\nLet a = pIp_0.F10___ModPNHP_ret.\nLet a_1 = pIp_0.F10___ModPNHP_halfperiod.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___ModPNHP_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (2.0 * of_f32(a_1)) = of_f32(mul_f32(to_f32(2.0), a_1)).\nProver Z3 4.8.12 returns Timeout (Qed:0.98ms) (2.6s)', 'Error found in file: Output/ModPNHP.c at line: 21', 'Error line content: /*@ assert period == 2.0f * \\at(pIp->halfperiod, Pre); */')
- ('Goal Assertion (file Output/ModPNHP.c, line 24):\nLet a = pIp_0.F10___ModPNHP_halfperiod.\nLet r = of_f32(a).\nLet r_1 = 2.0 * r.\nLet a_1 = mul_f32(to_f32(2.0), a).\nLet a_2 = pIp_0.F10___ModPNHP_ret.\nLet a_3 = pIp_0.F10___ModPNHP_x.\nLet r_2 = of_f32(a_3).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___ModPNHP_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Assertion *)\n  Have: r_1 = of_f32(a_1).\n}\nProve: ((2.0 * r * ((r_2 + r) / r_1))\n        + of_f32(sub_f32(a_3, mul_f32(div_f32(add_f32(a_3, a), a_1), a_1))))\n         = r_2.\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/ModPNHP.c at line: 24', 'Error line content: /*@ assert pIp->npp2 == \\at(pIp->x, Pre) - (\\at(pIp->x, Pre) + \\at(pIp->halfperiod, Pre)) / (2.0f * \\at(pIp->halfperiod, Pre)) * (2.0f * \\at(pIp->halfperiod, Pre)); */')

Assertion Results:
- True
- False
- False
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: SAMSubModeDamp.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun' (2/9):\nEffect at line 19\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun' (4/9):\nEffect at line 33\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun' (5/9):\nEffect at line 33\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:19ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun' (6/9):\nEffect at line 33\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:20ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun' (7/9):\nEffect at line 34\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:22ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun' (8/9):\nEffect at line 34\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:22ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun' (9/9):\nEffect at line 34\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:23ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')

Assertion Results:
- True
- True
- True
- True
- False
- True
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun':\nLet x = pIp_3.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nLet x_1 = pIp_0.F11___SAMSubModeDamp_countPublic.\nLet x_2 = pIp_1.F11___SAMSubModeDamp_countPublic.\nLet r = of_f32(pIp_1.F11___SAMSubModeDamp_max).\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\ is_uint64(x_2) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_2.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_4.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_1[global(L_TripleFabsMax_ret_41)],\n       pIp_5.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_5 = pIp_4.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_4.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_3).\n  }\n  Else { Have: pIp_5 = pIp_3. }\n  If 351 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_3 = pIp_6).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ pIp_6 with F11___SAMSubModeDamp_countPublic = 0 ;\n             F11___SAMSubModeDamp_countMode = 0 ;\n             F11___SAMSubModeDamp_flgMode = 17 }) = pIp_0.\n  }\n  Else {\n    Have: (Init_pIp_0 = Init_pIp_2) /\\ (pIp_3 = pIp_2).\n    If 1001 <= (pIp_2.F11___SAMSubModeDamp_countMode)\n    Then {\n      Have: (Init_pIp_2 = Init_pIp_1) /\\ (pIp_2 = pIp_6).\n      Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_flgMode = true }) =\n          Init_pIp_1.\n      Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_countMode = true }) =\n          Init_pIp_1.\n      Have: ({ pIp_6 with F11___SAMSubModeDamp_countPublic = 0 ;\n               F11___SAMSubModeDamp_countMode = 0 ;\n               F11___SAMSubModeDamp_flgMode = 17 }) = pIp_0.\n    }\n    Else { Have: pIp_2 = pIp_0. }\n  }\n}\nProve: x_1\n         = (x_2\n            + (if ((of_f32(Mf32_0[a_1]) < r) &\n                   (of_f32(Mf32_0[shift_float32(a, 1)]) < r) &\n                   (of_f32(Mf32_0[shift_float32(a, 2)]) < r)) then 1 else 0)).\nProver Z3 4.8.12 returns Timeout (Qed:68ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: ensures pIp->countPublic == \\old(pIp->countPublic) + ((\\old(pIp->rate[0]) < \\old(pIp->max) && \\old(pIp->rate[1]) < \\old(pIp->max) && \\old(pIp->rate[2]) < \\old(pIp->max)) ? 1 : 0);')
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun':\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet a_1 = shift_float32(a, 0).\nLet x = pIp_1.F11___SAMSubModeDamp_countPublic.\nLet x_1 = pIp_1.F11___SAMSubModeDamp_countMode.\nLet x_2 = pIp_0.F11___SAMSubModeDamp_countPublic.\nLet x_3 = pIp_0.F11___SAMSubModeDamp_countMode.\nLet x_4 = pIp_0.F11___SAMSubModeDamp_flgMode.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(x_3) /\\ is_uint64(x_4) /\\ is_uint64(x) /\\\n      is_uint64(x_1) /\\ is_uint64(pIp_2.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_3 <= 1000.\n  (* Residual *)\n  When: x_2 <= 350.\n  (* Goal *)\n  When: (351 <= x) \\/ (1001 <= x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 3).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_TripleFabsMax_ret_41 <- 1][L_ipTripleFabsMax_42\n                   <- 6], a_1, 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_3.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_3 = pIp_2.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_2.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_0).\n  }\n  Else { Have: pIp_3 = pIp_0. }\n}\nProve: (x_2 = 0) /\\ (x_3 = 0) /\\ (x_4 = 17).\nProver Z3 4.8.12 returns Unknown (Qed:40ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: ensures ((\\old(pIp->countPublic) > 350) || (\\old(pIp->countMode) > 1000)) ==> (pIp->flgMode == SAM_PITCH && pIp->countMode == 0 && pIp->countPublic == 0);')

Postcond Results:
- False
- False

------------------------------------------------
File Name: LimitCtrlRateInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ('Goal Assertion (file Output/LimitCtrlRateInput.c, line 18):\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n}\nProve: valid_rw(Malloc_0, pIp_0.F12___LimitCtrlRateInput_pSA, 6).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)', 'Error found in file: Output/LimitCtrlRateInput.c at line: 18', 'Error line content: /*@ assert \\valid(pIp->pSA); */')
- ('Goal Assertion (file Output/LimitCtrlRateInput.c, line 19):\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0, pIp_0.F12___LimitCtrlRateInput_pSA, 6).\n}\nProve: valid_rw(Malloc_0,\n         shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl, 0),\n         9).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)', 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: /*@ assert \\valid(pIp->pSCtrl + (0..2)); */')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (1/10):\nEffect at line 16\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (2/10):\nEffect at line 21\nLet a = shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl, 0).\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_0.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, a, 9).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (3/10):\nEffect at line 22\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_0.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (4/10):\nEffect at line 23\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_0.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (5/10):\nEffect at line 27\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_1.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1,\n          shift_S7_TAG_CONTROLLERIN(pIp_1.F12___LimitCtrlRateInput_pSCtrl, 0),\n          9).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (6/10):\nEffect at line 29\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_2.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1,\n          shift_S7_TAG_CONTROLLERIN(pIp_2.F12___LimitCtrlRateInput_pSCtrl, 0),\n          9).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (7/10):\nEffect at line 33\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_1.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1,\n          shift_S7_TAG_CONTROLLERIN(pIp_1.F12___LimitCtrlRateInput_pSCtrl, 0),\n          9).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (8/10):\nEffect at line 35\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_2.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1,\n          shift_S7_TAG_CONTROLLERIN(pIp_2.F12___LimitCtrlRateInput_pSCtrl, 0),\n          9).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (9/10):\nEffect at line 39\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_1.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1,\n          shift_S7_TAG_CONTROLLERIN(pIp_1.F12___LimitCtrlRateInput_pSCtrl, 0),\n          9).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 10) in 'LimitCtrlRateInputFun' (10/10):\nEffect at line 41\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, pIp_2.F12___LimitCtrlRateInput_pSA, 6).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1,\n          shift_S7_TAG_CONTROLLERIN(pIp_2.F12___LimitCtrlRateInput_pSCtrl, 0),\n          9).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: PseudoRateModulator.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 12) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = Mf32_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1)].\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(a_4).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(a) + r) < of_f32(a_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(a_2, a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(a_2, a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 15) /\\ (x_1 = 0) /\\\n    (L_weighted_sum(r, (9231.0/10000), (961.0/12500)) = of_f32(Mf32_1[a_3])).\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (2.4s)", 'Error found in file: Output/PseudoRateModulator.c at line: 12', 'Error line content: ensures \\old(pIp->pModulator->u) - \\old(pIp->pModulator->r) > \\old(pIp->h1) ==>')
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 15) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = Mf32_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1)].\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(a_4).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(a) + of_f32(a_2)) < r.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(a_2, a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(a_2, a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 0) /\\ (x_1 = 15) /\\\n    (L_weighted_sum(r, (9231.0/10000), (-961.0/12500)) = of_f32(Mf32_1[a_3])).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (2.5s)", 'Error found in file: Output/PseudoRateModulator.c at line: 15', 'Error line content: ensures \\old(pIp->pModulator->u) - \\old(pIp->pModulator->r) < -\\old(pIp->h1) ==>')
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 18) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = Mf32_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1)].\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(a_2).\nLet r_1 = of_f32(a).\nLet r_2 = of_f32(a_4).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (r <= (r_1 + r_2)) /\\ (r_2 <= (r_1 + r)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(a_2, a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(a_2, a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 0) /\\ (x_1 = 0) /\\\n    (L_weighted_sum(r_2, (9231.0/10000), .0) = of_f32(Mf32_1[a_3])).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (2.5s)", 'Error found in file: Output/PseudoRateModulator.c at line: 18', 'Error line content: ensures \\old(pIp->pModulator->u) - \\old(pIp->pModulator->r) >= -\\old(pIp->h1) &&')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: DiviationToFloat.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/DiviationToFloat.c, line 7) in 'DiviationToFloatFun':\nLet a = pIp_0.F10___DiviationToFloat_ret.\nLet x = pIp_0.F10___DiviationToFloat_input.\nLet x_1 = pIp_0.F10___DiviationToFloat_mask.\nLet x_2 = pIp_0.F10___DiviationToFloat_offset.\nLet r = real_of_int(to_sint32(land(x, x_1) - x_2)).\nLet a_1 = pIp_0.F10___DiviationToFloat_LSB.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___DiviationToFloat_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (r * of_f32(a_1)) = of_f32(mul_f32(to_f32(r), a_1)).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (2.5s)", 'Error found in file: Output/DiviationToFloat.c at line: 7', 'Error line content: ensures pIp->fresult == ((siint16)((pIp->input & pIp->mask) - pIp->offset)) * pIp->LSB;')
- ("Goal Post-condition (file Output/DiviationToFloat.c, line 8) in 'DiviationToFloatFun':\nLet a = pIp_0.F10___DiviationToFloat_ret.\nLet x = pIp_0.F10___DiviationToFloat_input.\nLet x_1 = pIp_0.F10___DiviationToFloat_mask.\nLet x_2 = pIp_0.F10___DiviationToFloat_offset.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___DiviationToFloat_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: of_f32(mul_f32(to_f32(real_of_int(to_sint32(land(x, x_1) - x_2))),\n                pIp_0.F10___DiviationToFloat_LSB))\n         = of_f32(pIp_0.F10___DiviationToFloat_fresult).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (2.6s)", 'Error found in file: Output/DiviationToFloat.c at line: 8', 'Error line content: ensures *(pIp->ret) == \\old(pIp->fresult);')

Postcond Results:
- False
- False

------------------------------------------------
File Name: FaultJudgeProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (1/3):\nEffect at line 16\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nAssume {\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (2/3):\nEffect at line 22\nLet a = pIp_1.F13___FaultJudgeProceed_mFWarning.\nLet a_1 = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a_1.F4_TAG_FAULT_WARNING_Wsp.\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Residual *)\n  When: (a_1.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  If x = 0\n  Else { Have: pIp_0 = pIp_1. }\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 235.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (3/3):\nEffect at line 26\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_CWsp.\nLet x_1 = (pIp_2.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_CWsp.\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_2.F13___FaultJudgeProceed_fun.base) <= 0) /\\\n      linked(Malloc_0).\n  If x_1 = 235\n  Then {\n    Have: pIp_2 = pIp_1.\n    If ((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp)\n         = 0\n    Then {\n      (* Block Out *)\n      Have: Malloc_1[L_ipSoftFaultJudgeSP_48 <- 0] = Malloc_2.\n    }\n    Else {\n      Have: (pIp_1 = pIp_0) /\\\n          (Malloc_0[L_ipNoctrlJudge_50 <- 20] = Malloc_2).\n    }\n  }\n  Else {\n    Have: (pIp_2 = pIp_0) /\\ (Malloc_0[L_ipNoctrlJudge_50 <- 20] = Malloc_2).\n  }\n  If x = 235\n  Then { Have: Malloc_2 = Malloc_3. }\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:26ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixTran.c

Syntax Error:


Loop Invariant Errors:
- ("Goal Preservation of Invariant (file Output/MatrixTran.c, line 30):\nOutput/MatrixTran.c:25: warning from Typed Model:\n - Warning: Hide \\result\n   Reason: Cast with incompatible pointers types (source: sint8*) (target: float32*)\nLet x = to_uint8(1 + i_2).\nLet x_1 = pIp_0.F10___MatrixTran_nrow.\nLet x_2 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_3 = x_1 * x_2.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = havoc(Mf32_undef_1, Mf32_0, a_1, x_3).\nLet a_4 = pIp_0.F10___MatrixTran_mat.\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (0 <= i_1) /\\ (i_1 < x_2) /\\ (i < x) /\\ is_uint8(i).\n  (* Pre-condition *)\n  Have: P_valid_matrix(Malloc_0, a_4, x_1, x_2).\n  (* Pre-condition *)\n  Have: P_valid_transpose(Malloc_0, a, x_2, x_1).\n  (* Assertion 'alloca_bounds' *)\n  Have: 0 < to_sint32(x_3).\n  (* Assertion *)\n  Have: forall i_4,i_3 : Z. let x_4 = i_3 + (i_4 * x_2) in ((0 <= i_4) ->\n      ((0 <= i_3) -> ((i_4 < x_1) -> ((i_3 < x_2) ->\n      (of_f32(Mf32_0[shift_float32(a_4, x_4)])\n         = of_f32(Mf32_0[shift_float32(mat_initial_0, x_4)])))))).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x_1).\n  (* Invariant *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((0 <= i_3) ->\n      ((i_3 < x_2) ->\n      (of_f32(a_3[shift_float32(a, i_4 + (i_3 * x_1))])\n         = of_f32(a_3[shift_float32(mat_initial_0, i_3 + (i_4 * x_2))])))))).\n  (* Then *)\n  Have: i_2 < x_1.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->\n      (of_f32(a_2[shift_float32(a, i_2 + (i_3 * x_1))])\n         = of_f32(a_2[shift_float32(mat_initial_0, i_3 + (i_2 * x_2))])))).\n  (* Else *)\n  Have: x_2 <= j.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_2[shift_float32(a, i + (i_1 * x_1))])\n         = of_f32(a_2[shift_float32(mat_initial_0, i_1 + (i * x_2))]).\nProver Z3 4.8.12 returns Timeout (Qed:20ms) (2.6s)", 'Error found in file: Output/MatrixTran.c at line: 30', 'Error line content: loop invariant \\forall unint08 k, l; 0 <= k < i && 0 <= l < pIp->ncol ==>')
- ("Goal Preservation of Invariant (file Output/MatrixTran.c, line 38):\nOutput/MatrixTran.c:25: warning from Typed Model:\n - Warning: Hide \\result\n   Reason: Cast with incompatible pointers types (source: sint8*) (target: float32*)\nLet x = to_uint8(1 + j).\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = pIp_0.F10___MatrixTran_nrow.\nLet x_3 = x_2 * x_1.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet x_4 = i * x_1.\nLet a_3 = havoc(Mf32_undef_1, Mf32_0, a_1, x_3).\nLet a_4 = pIp_0.F10___MatrixTran_mat.\nLet a_5 = a_2[shift_float32(a, i + (j * x_2))\n            <- a_2[shift_float32(a_4, j + x_4)]].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_2) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x) /\\ is_uint8(i_1).\n  (* Pre-condition *)\n  Have: P_valid_matrix(Malloc_0, a_4, x_2, x_1).\n  (* Pre-condition *)\n  Have: P_valid_transpose(Malloc_0, a, x_1, x_2).\n  (* Assertion 'alloca_bounds' *)\n  Have: 0 < to_sint32(x_3).\n  (* Assertion *)\n  Have: forall i_3,i_2 : Z. let x_5 = i_2 + (i_3 * x_1) in ((0 <= i_3) ->\n      ((0 <= i_2) -> ((i_3 < x_2) -> ((i_2 < x_1) ->\n      (of_f32(Mf32_0[shift_float32(a_4, x_5)])\n         = of_f32(Mf32_0[shift_float32(mat_initial_0, x_5)])))))).\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_2).\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((0 <= i_2) ->\n      ((i_2 < x_1) ->\n      (of_f32(a_3[shift_float32(a, i_3 + (i_2 * x_2))])\n         = of_f32(a_3[shift_float32(mat_initial_0, i_2 + (i_3 * x_1))])))))).\n  (* Then *)\n  Have: i < x_2.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->\n      (of_f32(a_2[shift_float32(a, i + (i_2 * x_2))])\n         = of_f32(a_2[shift_float32(mat_initial_0, i_2 + x_4)])))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_5[shift_float32(a, i + (i_1 * x_2))])\n         = of_f32(a_5[shift_float32(mat_initial_0, i_1 + x_4)]).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/MatrixTran.c at line: 38', 'Error line content: loop invariant \\forall unint08 k; 0 <= k < j ==>')

Loop Invariant Results:
- True
- False
- True
- False

Assertion Errors:
- ("Goal Assertion 'alloca_bounds' (file Output/MatrixTran.c, line 25):\nLet a = pIp_0.F10___MatrixTran_tran.\nLet x = pIp_0.F10___MatrixTran_ncol.\nLet x_1 = pIp_0.F10___MatrixTran_nrow.\nLet a_1 = pIp_0.F10___MatrixTran_mat.\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: P_valid_matrix(Malloc_0, a_1, x_1, x).\n  (* Pre-condition *)\n  Have: P_valid_transpose(Malloc_0, a, x, x_1).\n}\nProve: 0 < to_sint32(x_1 * x).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/MatrixTran.c at line: 25', 'Error line content: /*@ ghost float32 mat_initial[pIp->nrow * pIp->ncol]; */')
- ("Goal Assertion (file Output/MatrixTran.c, line 26):\nOutput/MatrixTran.c:25: warning from Typed Model:\n - Warning: Hide \\result\n   Reason: Cast with incompatible pointers types (source: sint8*) (target: float32*)\nLet x = pIp_0.F10___MatrixTran_nrow.\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = pIp_0.F10___MatrixTran_mat.\nLet x_2 = i + (i_1 * x_1).\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (0 <= i) /\\ (i_1 < x) /\\ (i < x_1).\n  (* Pre-condition *)\n  Have: P_valid_matrix(Malloc_0, a_1, x, x_1).\n  (* Pre-condition *)\n  Have: P_valid_transpose(Malloc_0, a, x_1, x).\n  (* Assertion 'alloca_bounds' *)\n  Have: 0 < to_sint32(x * x_1).\n}\nProve: of_f32(Mf32_0[shift_float32(a_1, x_2)])\n         = of_f32(Mf32_0[shift_float32(mat_initial_0, x_2)]).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.5s)", 'Error found in file: Output/MatrixTran.c at line: 26', 'Error line content: /*@ assert \\forall unint08 k, l; 0 <= k < pIp->nrow && 0 <= l < pIp->ncol ==>')

Assertion Results:
- False
- False
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/MatrixTran.c, line 15) in 'MatrixTranFun':\nOutput/MatrixTran.c:25: warning from Typed Model:\n - Warning: Hide sub-term definition\n   Reason: Cast with incompatible pointers types (source: float32*) (target: sint8*)\nOutput/MatrixTran.c:25: warning from Typed Model:\n - Warning: Hide \\result\n   Reason: Cast with incompatible pointers types (source: sint8*) (target: float32*)\nLet x = pIp_0.F10___MatrixTran_nrow.\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet x_2 = x * x_1.\nLet a_1 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a, 0), x_2).\nLet a_2 = pIp_0.F10___MatrixTran_mat.\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (0 <= i_1) /\\ (i < x) /\\ (i_1 < x_1).\n  (* Pre-condition *)\n  Have: P_valid_matrix(Malloc_0, a_2, x, x_1).\n  (* Pre-condition *)\n  Have: P_valid_transpose(Malloc_0, a, x_1, x).\n  (* Assertion 'alloca_bounds' *)\n  Have: 0 < to_sint32(x_2).\n  (* Assertion *)\n  Have: forall i_4,i_3 : Z. let x_3 = i_3 + (i_4 * x_1) in ((0 <= i_4) ->\n      ((0 <= i_3) -> ((i_4 < x) -> ((i_3 < x_1) ->\n      (of_f32(Mf32_0[shift_float32(a_2, x_3)])\n         = of_f32(Mf32_0[shift_float32(mat_initial_0, x_3)])))))).\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x).\n  (* Invariant *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((0 <= i_3) ->\n      ((i_3 < x_1) ->\n      (of_f32(a_1[shift_float32(a, i_4 + (i_3 * x))])\n         = of_f32(a_1[shift_float32(mat_initial_0, i_3 + (i_4 * x_1))])))))).\n  (* Else *)\n  Have: x <= i_2.\n}\nProve: of_f32(a_1[shift_float32(a, i + (i_1 * x))])\n         = of_f32(Mf32_0[shift_float32(a_2, i_1 + (i * x_1))]).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (2.5s)", 'Error found in file: Output/MatrixTran.c at line: 15', 'Error line content: ensures \\forall unint08 i, j; 0 <= i < pIp->nrow && 0 <= j < pIp->ncol ==>')

Postcond Results:
- False

------------------------------------------------
File Name: CheckCal16.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CheckCal16.c, line 23):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___CheckCal16_len.\nLet a = pIp_0.F10___CheckCal16_pkv.\nLet x_2 = Mint_0[shift_uint8(a, i)].\nLet x_3 = L_sum(Mint_0, a, 0, i).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint8(x_2) /\\ is_uint32(x_3).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal16_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: to_uint32(x_2 + x_3) = L_sum(Mint_0, a, 0, x).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)', 'Error found in file: Output/CheckCal16.c at line: 23', 'Error line content: loop invariant chksum == sum(pIp->pkv, 0, i);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: B_TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'B_TcProcessFun' (1/10):\nEffect at line 27\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet a_1 = shift_uint8(a, 0).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  (* Then *)\n  Have: Mint_0[a_1] = 225.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (2/10):\nEffect at line 41\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (3/10):\nEffect at line 41\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (4/10):\nEffect at line 41\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (5/10):\nEffect at line 45\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (6/10):\nEffect at line 45\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (7/10):\nEffect at line 45\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (8/10):\nEffect at line 49\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (9/10):\nEffect at line 49\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", None, None)
- ("Goal Assigns nothing in 'B_TcProcessFun' (10/10):\nEffect at line 49\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_1.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", None, None)

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
