File Name: ThreeAxisController.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (2/8):\nEffect at line 36\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (3/8):\nEffect at line 48\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (4/8):\nEffect at line 60\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (5/8):\nEffect at line 70\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (6/8):\nEffect at line 77\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (7/8):\nEffect at line 84\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (8/8):\nEffect at line 87\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')

Assertion Results:
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TripleFabsMax.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 7) in 'TripleFabsMaxFun':\nLet a = to_f32(.0).\nLet a_1 = pIp_1.F10___TripleFabsMax_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n  If lt_f32(pIp_1.F10___TripleFabsMax_fx1, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  If lt_f32(pIp_1.F10___TripleFabsMax_fy2, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  If lt_f32(pIp_1.F10___TripleFabsMax_fz3, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___TripleFabsMax_tmax)\n         = Rg.max(RAbs.abs(of_f32(pIp_0.F10___TripleFabsMax_fx1)),\n         Rg.max(RAbs.abs(of_f32(pIp_0.F10___TripleFabsMax_fy2)),\n         RAbs.abs(of_f32(pIp_0.F10___TripleFabsMax_fz3)))).\nProver Z3 4.8.12 returns Timeout (Qed:61ms) (2.5s)", 'Error found in file: Output/TripleFabsMax.c at line: 7', 'Error line content: ensures *(pIp->ret) == \\max(\\max(\\abs(pIp->fx1), \\abs(pIp->fy2)), \\abs(pIp->fz3));')

Postcond Results:
- False

------------------------------------------------
File Name: MatrixMulti.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixMulti.c, line 27):\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nOutput/MatrixMulti.c:39: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:39: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nLet x = to_uint8(1 + jc_0).\nLet x_1 = pIp_0.F10___MatrixMulti_ncol.\nLet x_2 = pIp_0.F10___MatrixMulti_nrc.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_3 = pIp_0.F10___MatrixMulti_nrow.\nLet x_4 = x_3 * x_1.\nLet a_2 = havoc(Mf32_undef_1, Mf32_0, a_1, x_4).\nLet x_5 = ir_0 * x_1.\nLet a_3 = havoc(Mf32_undef_0, a_2, shift_float32(a, x_5), x_1).\nLet a_4 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_5 = pIp_0.F10___MatrixMulti_faciend.\nAssume {\n  Type: is_uint8(ir_0) /\\ is_uint8(jc_0) /\\ is_uint8(nk_0) /\\\n      is_uint8(x_3) /\\ is_uint8(x_2) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: is_uint8(i_1) /\\ is_uint8(i) /\\\n      ((i_1 < ir_0) \\/ ((ir_0 = i_1) /\\ (i < x))).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), x_3 * x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), x_2 * x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_4).\n  (* Invariant *)\n  Have: 0 <= x_3.\n  (* Invariant *)\n  Have: (0 <= ir_0) /\\ (ir_0 <= x_3).\n  (* Then *)\n  Have: ir_0 < x_3.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  Warning[wp]: array type non-supported({ ℤ}ℝ)\n  (Hide sub-term definition).\n  Warning[wp]: Lambda-functions not yet implemented\n  (Hide sub-term definition).\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. (is_uint8(i_3) -> (is_uint8(i_2) ->\n      (((i_3 < ir_0) \\/ ((i_3 = ir_0) /\\ (i_2 < 0))) ->\n      (of_f32(a_2[shift_float32(a, i_2 + (i_3 * x_1))]) = w_1)))).\n  (* Invariant *)\n  Have: (0 <= jc_0) /\\ (jc_0 <= x_1).\n  Warning[wp]: array type non-supported({ ℤ}ℝ)\n  (Hide sub-term definition).\n  Warning[wp]: Lambda-functions not yet implemented\n  (Hide sub-term definition).\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. (is_uint8(i_3) -> (is_uint8(i_2) ->\n      (((i_3 < ir_0) \\/ ((i_3 = ir_0) /\\ (i_2 < jc_0))) ->\n      (of_f32(a_3[shift_float32(a, i_2 + (i_3 * x_1))]) = w_2)))).\n  (* Then *)\n  Have: jc_0 < x_1.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= nk_0) /\\ (nk_0 <= x_2).\n  (* Else *)\n  Have: x_2 <= nk_0.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_3[shift_float32(a, to_uint8(jc_0 + x_5)) <- v]\n                [shift_float32(a, i + (i_1 * x_1))]) = w.\nProver Z3 4.8.12 returns Timeout (Qed:18ms) (2.5s)', 'Error found in file: Output/MatrixMulti.c at line: 27', 'Error line content: loop invariant \\forall unint08 i, j; (i < ir || (i == ir && j < jc)) ==> pIp->product[i * pIp->ncol + j] == \\sum(0, pIp->nrc, \\lambda integer k; pIp->faciend[i * pIp->nrc + k] * pIp->multiplier[k * pIp->ncol + j]);')
- ('Goal Establishment of Invariant (file Output/MatrixMulti.c, line 27):\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nLet x = pIp_0.F10___MatrixMulti_ncol.\nLet x_1 = pIp_0.F10___MatrixMulti_nrow.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = x_1 * x.\nLet a_2 = pIp_0.F10___MatrixMulti_multiplier.\nLet x_3 = pIp_0.F10___MatrixMulti_nrc.\nLet a_3 = pIp_0.F10___MatrixMulti_faciend.\nAssume {\n  Type: is_uint8(ir_0) /\\ is_uint8(x_1) /\\ is_uint8(x_3) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: is_uint8(i_1) /\\ is_uint8(i) /\\\n      ((i_1 < ir_0) \\/ ((ir_0 = i_1) /\\ (i < 0))).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_1 * x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_3 * x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_2).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= ir_0) /\\ (ir_0 <= x_1).\n  (* Then *)\n  Have: ir_0 < x_1.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: of_f32(havoc(Mf32_undef_0, Mf32_0, a_1, x_2)\n                [shift_float32(a, i + (i_1 * x))]) = w.\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (2.5s)', 'Error found in file: Output/MatrixMulti.c at line: 27', 'Error line content: loop invariant \\forall unint08 i, j; (i < ir || (i == ir && j < jc)) ==> pIp->product[i * pIp->ncol + j] == \\sum(0, pIp->nrc, \\lambda integer k; pIp->faciend[i * pIp->nrc + k] * pIp->multiplier[k * pIp->ncol + j]);')
- ('Goal Preservation of Invariant (file Output/MatrixMulti.c, line 39):\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nOutput/MatrixMulti.c:39: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:39: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nLet x = pIp_0.F10___MatrixMulti_nrc.\nLet x_1 = pIp_0.F10___MatrixMulti_ncol.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = pIp_0.F10___MatrixMulti_nrow.\nLet x_3 = x_2 * x_1.\nLet a_2 = havoc(Mf32_undef_1, Mf32_0, a_1, x_3).\nLet x_4 = ir_0 * x_1.\nLet a_3 = havoc(Mf32_undef_0, a_2, shift_float32(a, x_4), x_1).\nLet a_4 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_5 = pIp_0.F10___MatrixMulti_faciend.\nLet a_6 = a_3[shift_float32(a, to_uint8(jc_0 + x_4)) <- v].\nAssume {\n  Type: is_uint8(ir_0) /\\ is_uint8(jc_0) /\\ is_uint8(nk_0) /\\\n      is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), x_2 * x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), x * x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= ir_0) /\\ (ir_0 <= x_2).\n  (* Then *)\n  Have: ir_0 < x_2.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  Warning[wp]: array type non-supported({ ℤ}ℝ)\n  (Hide sub-term definition).\n  Warning[wp]: Lambda-functions not yet implemented\n  (Hide sub-term definition).\n  (* Invariant *)\n  Have: forall i_1,i : Z. (is_uint8(i_1) -> (is_uint8(i) ->\n      (((i_1 < ir_0) \\/ ((i_1 = ir_0) /\\ (i < 0))) ->\n      (of_f32(a_2[shift_float32(a, i + (i_1 * x_1))]) = w_1)))).\n  (* Invariant *)\n  Have: (0 <= jc_0) /\\ (jc_0 <= x_1).\n  Warning[wp]: array type non-supported({ ℤ}ℝ)\n  (Hide sub-term definition).\n  Warning[wp]: Lambda-functions not yet implemented\n  (Hide sub-term definition).\n  (* Invariant *)\n  Have: forall i_1,i : Z. (is_uint8(i_1) -> (is_uint8(i) ->\n      (((i_1 < ir_0) \\/ ((i_1 = ir_0) /\\ (i < jc_0))) ->\n      (of_f32(a_3[shift_float32(a, i + (i_1 * x_1))]) = w_2)))).\n  (* Then *)\n  Have: jc_0 < x_1.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= nk_0) /\\ (nk_0 <= x).\n  (* Then *)\n  Have: nk_0 < x.\n  (* Invariant *)\n  Have: to_uint8(1 + nk_0) <= x.\n}\nProve: of_f32(add_f32(v,\n                mul_f32(a_6[shift_float32(a_5, nk_0 + (ir_0 * x))],\n                  a_6[shift_float32(a_4, jc_0 + (nk_0 * x_1))]))) = w.\nProver Z3 4.8.12 returns Timeout (Qed:24ms) (2.6s)', 'Error found in file: Output/MatrixMulti.c at line: 39', 'Error line content: loop invariant pIp->product[index] == \\sum(0, nk, \\lambda integer k; pIp->faciend[ir * pIp->nrc + k] * pIp->multiplier[k * pIp->ncol + jc]);')
- ('Goal Establishment of Invariant (file Output/MatrixMulti.c, line 39):\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:27: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nOutput/MatrixMulti.c:39: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:39: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nLet x = pIp_0.F10___MatrixMulti_nrc.\nLet x_1 = pIp_0.F10___MatrixMulti_ncol.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = pIp_0.F10___MatrixMulti_nrow.\nLet x_3 = x_2 * x_1.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_4 = pIp_0.F10___MatrixMulti_faciend.\nAssume {\n  Type: is_uint8(ir_0) /\\ is_uint8(jc_0) /\\ is_uint8(x_2) /\\ is_uint8(x) /\\\n      is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), x_2 * x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x * x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= ir_0) /\\ (ir_0 <= x_2).\n  (* Then *)\n  Have: ir_0 < x_2.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  Warning[wp]: array type non-supported({ ℤ}ℝ)\n  (Hide sub-term definition).\n  Warning[wp]: Lambda-functions not yet implemented\n  (Hide sub-term definition).\n  (* Invariant *)\n  Have: forall i_1,i : Z. (is_uint8(i_1) -> (is_uint8(i) ->\n      (((i_1 < ir_0) \\/ ((i_1 = ir_0) /\\ (i < 0))) ->\n      (of_f32(a_2[shift_float32(a, i + (i_1 * x_1))]) = w_1)))).\n  (* Invariant *)\n  Have: (0 <= jc_0) /\\ (jc_0 <= x_1).\n  Warning[wp]: array type non-supported({ ℤ}ℝ)\n  (Hide sub-term definition).\n  Warning[wp]: Lambda-functions not yet implemented\n  (Hide sub-term definition).\n  (* Invariant *)\n  Have: forall i_1,i : Z. (is_uint8(i_1) -> (is_uint8(i) ->\n      (((i_1 < ir_0) \\/ ((i_1 = ir_0) /\\ (i < jc_0))) ->\n      (of_f32(havoc(Mf32_undef_1, a_2, shift_float32(a, ir_0 * x_1), x_1)\n                [shift_float32(a, i + (i_1 * x_1))]) = w_2)))).\n  (* Then *)\n  Have: jc_0 < x_1.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: w = .0.\nProver Z3 4.8.12 returns Unknown (Qed:11ms)', 'Error found in file: Output/MatrixMulti.c at line: 39', 'Error line content: loop invariant pIp->product[index] == \\sum(0, nk, \\lambda integer k; pIp->faciend[ir * pIp->nrc + k] * pIp->multiplier[k * pIp->ncol + jc]);')

Loop Invariant Results:
- True
- True
- False
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: InitVar.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (2/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (3/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (4/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (5/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32024), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (6/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32364), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (7/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32704), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (8/10):\nEffect at line 51\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (9/10):\nEffect at line 51\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (10/10):\nEffect at line 51\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM,')

Assertion Results:
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

------------------------------------------------
File Name: AppInit.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'AppInitFun' (1/3):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (2/3):\nEffect at line 30\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (3/3):\nEffect at line 36\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32899), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: main.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/main.c, line 9) in 'mainFun' (1/3):\nEffect at line 15\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 9', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 9) in 'mainFun' (2/3):\nEffect at line 18\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 9', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 9) in 'mainFun' (3/3):\nEffect at line 20\nLet a = pIp_1.F12___main_ret.\nLet a_1 = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: a_1 = a.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 9', 'Error line content: assigns *(pIp->ret);')

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CalculateGyroRs.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CalculateGyroRs.c (with preprocessing)
[kernel:annot-error] Output/CalculateGyroRs.c:18: Warning: 
  unbound logic variable Rgtrans. Ignoring logic specification of function CalculateGyroRsFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CheckCal.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CheckCal.c, line 26):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___CheckCal_len.\nLet a = pIp_0.F10___CheckCal_pkv.\nLet x_2 = Mint_0[shift_uint8(a, i)].\nLet x_3 = L_sum(Mint_0, a, 0, i).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: to_uint8(x_2 + x_3) = L_sum(Mint_0, a, 0, x).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)', 'Error found in file: Output/CheckCal.c at line: 26', 'Error line content: loop invariant chksum == sum(pIp->pkv, 0, i);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: SendUartData.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SendUartData.c (with preprocessing)
[kernel:annot-error] Output/SendUartData.c:9: Warning: 
  \old(pIp)->addr is not a pointer.. Ignoring logic specification of function SendUartDataFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TMProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
- ("Goal Assigns nothing in 'TMProcessFun' (2/41):\nEffect at line 25\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (38/41):\nEffect at line 80\nLet a = global(L_pkv_52).\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (havoc(Mint_undef_0, Mint_0, shift_uint8(a, 0), 32)\n         [shift_uint8(a, i_1)] = 0))).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (41/41):\nEffect at line 86\nLet a = global(L_pkv_52).\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (havoc(Mint_undef_0, Mint_0, shift_uint8(a, 0), 32)\n         [shift_uint8(a, i_1)] = 0))).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", None, None)

Assertion Results:
- True
- False
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- True
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Float.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True

------------------------------------------------
File Name: NoctrlJudge.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/NoctrlJudge.c, line 11) in 'NoctrlJudgeFun' (2/3):\nEffect at line 21\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 11', 'Error line content: assigns pIp->mFWarning.countAV, pIp->mFWarning.Wav, pIp->nouse;')

Assertion Results:
- True
- False
- True

Postcond Errors:
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 12) in 'NoctrlJudgeFun':\nLet x = (pIp_1.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV.\nLet a = pIp_0.F11___NoctrlJudge_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_countAV.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wav) /\\ is_uint32(x_1) /\\\n      is_uint32(x) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_1.F11___NoctrlJudge_fun.base) <= 0.\n  (* Goal *)\n  When: x <= 300.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_41)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_1 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_1 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_1.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_1 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_1.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_2 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_2 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_2.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_4 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x_1 <= 301.\nProver Z3 4.8.12 returns Timeout (Qed:25ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 12', 'Error line content: ensures \\old(pIp->mFWarning.countAV) <= 300 ==> pIp->mFWarning.countAV <= 301;')
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 13) in 'NoctrlJudgeFun':\nLet x = (pIp_1.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV.\nLet a = pIp_0.F11___NoctrlJudge_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_Wav.\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint32(a.F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32(x) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_1.F11___NoctrlJudge_fun.base) <= 0.\n  (* Goal *)\n  When: 301 <= x.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_41)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_1 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_1 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_1.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_1 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_1.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_2 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_2 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_2.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_4 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x_1 = 235.\nProver Z3 4.8.12 returns Timeout (Qed:26ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 13', 'Error line content: ensures \\old(pIp->mFWarning.countAV) > 300 ==> pIp->mFWarning.Wav == TRUE;')

Postcond Results:
- False
- False

------------------------------------------------
File Name: GyroChoose.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroChoose.c, line 23):\nLet a = pIp_0.F10___GyroChoose_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet x_1 = to_uint8(1 + i_1).\nLet a_2 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_stateFlag(a).\nLet x_2 = Mint_1[shift_uint64(a_2, i_1)].\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_4 = shift_uint8(a_3, 0).\nAssume {\n  Type: is_uint8(i_1) /\\ is_uint8(v) /\\ is_uint8(x) /\\ is_uint64(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroChoose_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (Mint_1[shift_uint64(a_2, i)] = 235) /\\ (0 <= i) /\\ (i < x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_2, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= 9).\n  (* Invariant *)\n  Have: (v <= i_1) /\\ (0 <= v).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_1[shift_uint64(a_2, i_2)] = 235) ->\n      ((0 <= i_2) -> ((i_2 < i_1) ->\n      (havoc(Mint_undef_0, Mint_2[a_1 <- 0], a_4, 9)[a_1 <- v]\n         [shift_uint8(a_3, v - 1)] = i_2)))).\n  (* Then *)\n  Have: i_1 <= 8.\n  If x_2 = 235\n  Then {\n    Let a_5 = havoc(Mint_undef_0, Mint_2[a_1 <- 0], a_4, 9)[a_1 <- v]\n                [shift_uint8(a_3, v) <- i_1].\n    Have: a_5[a_1 <- to_uint8(1 + a_5[a_1])] = Mint_0.\n  }\n  Else {\n    Have: havoc(Mint_undef_0, Mint_2[a_1 <- 0], a_4, 9)[a_1 <- v] = Mint_0.\n  }\n  (* Invariant *)\n  Have: x_1 <= 9.\n  (* Invariant *)\n  Have: (0 <= x) /\\ (x <= x_1).\n}\nProve: Mint_0[shift_uint8(a_3, x - 1)] = i.\nProver Z3 4.8.12 returns Timeout (Qed:21ms) (3s)', 'Error found in file: Output/GyroChoose.c at line: 23', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> (pIp->pGyroData->stateFlag[j] == TRUE ==> pIp->pGyroData->SignFlag[pIp->pGyroData->JoinTotal - 1] == j);')

Loop Invariant Results:
- True
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: ThrusterCtrlLogic.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 9) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_6) /\\ is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 2).\nProver Z3 4.8.12 returns Timeout (Qed:87ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 9', 'Error line content: ensures (pIp->mModulator[0].Yp != 0) ==> (pIp->mThrDistribute.wPulse & 0x04) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 10) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_6) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 3).\nProver Z3 4.8.12 returns Timeout (Qed:90ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 10', 'Error line content: ensures (pIp->mModulator[0].Yn != 0) ==> (pIp->mThrDistribute.wPulse & 0x08) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 11) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[1].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x_6) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 4).\nProver Z3 4.8.12 returns Timeout (Qed:86ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 11', 'Error line content: ensures (pIp->mModulator[1].Yp != 0) ==> (pIp->mThrDistribute.wPulse & 0x10) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 12) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[1].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_6) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 5).\nProver Z3 4.8.12 returns Timeout (Qed:81ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 12', 'Error line content: ensures (pIp->mModulator[1].Yn != 0) ==> (pIp->mThrDistribute.wPulse & 0x20) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 13) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[2].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[1].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x_6) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 6).\nProver Z3 4.8.12 returns Timeout (Qed:90ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 13', 'Error line content: ensures (pIp->mModulator[2].Yp != 0) ==> (pIp->mThrDistribute.wPulse & 0x40) != 0;')

Postcond Results:
- False
- False
- False
- False
- False
- True

------------------------------------------------
File Name: SAMSubModeCruise.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/GyroProceed.c, line 13) in 'GyroProceedFun' (2/9):\nEffect at line 26\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.78ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 13', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 13) in 'GyroProceedFun' (3/9):\nEffect at line 33\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 13', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 13) in 'GyroProceedFun' (4/9):\nEffect at line 40\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 13', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 13) in 'GyroProceedFun' (5/9):\nEffect at line 47\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 13', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 13) in 'GyroProceedFun' (8/9):\nEffect at line 58\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 13', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 13) in 'GyroProceedFun' (9/9):\nEffect at line 68\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 13', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')

Assertion Results:
- True
- False
- False
- False
- False
- True
- True
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/GyroProceed.c, line 14) in 'GyroProceedFun':\nLet a = shiftfield_F15___GyroProceed_mGyroData(global(G_pIp_56)).\nLet a_1 = shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Gi(a), 0).\nProve: (of_f32(Mf32_0[a_1])\n        + ((5368709.0/33554432) *\n           of_f32(Mf32_1\n                    [shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a),\n                       0)]))) = of_f32(Mf32_1[a_1]).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 14', 'Error line content: ensures \\old(pIp->mGyroData.Gi[0]) + pIp->mGyroData.W[0] * 0.160f == pIp->mGyroData.Gi[0];')
- ("Goal Post-condition (file Output/GyroProceed.c, line 15) in 'GyroProceedFun':\nLet a = shiftfield_F15___GyroProceed_mGyroData(global(G_pIp_56)).\nProve: (of_f32(Mf32_0\n                 [shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Gi(a), 1)])\n        + ((5368709.0/33554432) *\n           of_f32(Mf32_1\n                    [shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a),\n                       1)]))) = of_f32(Mf32_1[global(L_ModPNHP_ret_1_72)]).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.6s)", 'Error found in file: Output/GyroProceed.c at line: 15', 'Error line content: ensures \\old(pIp->mGyroData.Gi[1]) + pIp->mGyroData.W[1] * 0.160f == pIp->mGyroData.Gi[1];')

Postcond Results:
- False
- False

------------------------------------------------
File Name: Inputproceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (2/4):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1];')
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (4/4):\nEffect at line 24\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.79ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1];')

Assertion Results:
- True
- False
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultJudgeSP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 7) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_2) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x_3) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\ is_uint32(x) /\\\n      is_uint32((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: ((pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP) = 0.\n  If x_1 = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1 + x_3) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_2).\n  }\n  Else {\n    If x_3 != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1\n                                                       + (a_1.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                   } }) = pIp_3).\n    }\n    Else { Have: pIp_3 = pIp_1. }\n    If 3\n         <= ((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_3 = pIp_4.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_4 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_4.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_3 = pIp_2. }\n  }\n  If 33751 <= x\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_5).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_5 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_5.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_2 = (1 + x_3).\nProver Z3 4.8.12 returns Timeout (Qed:63ms) (3s)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 7', 'Error line content: ensures pIp->mDSSData.flgSP == 0 ==> pIp->mFWarning.countSPLost == \\old(pIp->mFWarning.countSPLost) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 9) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet x_2 = (pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_4 = a_1.F4_TAG_FAULT_WARNING_countSPSeen.\nLet x_5 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_4) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x_3) /\\\n      is_uint32(x_5) /\\ is_uint32(x) /\\ is_uint64(x_2) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: (x_2 != 0) /\\ (x_3 != 0).\n  Core: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                     Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                     } }) = Init_pIp_0.\n  If x_1 = 0\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                       Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPLost = \n                                                    to_uint32(1 + x_3) ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                  } }) = pIp_2.\n  }\n  Else {\n    If 3 <= to_uint32(1 + x_5)\n    Then {\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                         Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                    } }) = pIp_2.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = \n                                                      to_uint32(1 + x_5) } }) =\n          pIp_2.\n    }\n  }\n  If 33751 <= x\n  Then {\n    Let a_2 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_3 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_3.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_4 = (1 + x_5).\nProver Z3 4.8.12 returns Unknown (Qed:51ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 9', 'Error line content: ensures pIp->mDSSData.flgSP != 0 && \\old(pIp->mFWarning.countSPLost) != 0 ==> pIp->mFWarning.countSPSeen == \\old(pIp->mFWarning.countSPSeen) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 10) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet x_1 = (pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_3) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_2) /\\\n      is_uint32((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Residual *)\n  When: x_3 <= 33750.\n  (* Goal *)\n  When: (x_1 != 0) /\\ (3 <= x_2).\n  If x = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1\n                                                     + (a.F4_TAG_FAULT_WARNING_countSPLost)) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_0).\n  }\n  Else {\n    If (a.F4_TAG_FAULT_WARNING_countSPLost) != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1 + x_2) } }) =\n           pIp_2).\n    }\n    Else { Have: pIp_2 = pIp_1. }\n    If 3\n         <= ((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_2 = pIp_3.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_3 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_3.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_0).\n    }\n    Else { Have: pIp_2 = pIp_0. }\n  }\n}\nProve: x_3 = 0.\nProver Z3 4.8.12 returns Unknown (Qed:57ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 10', 'Error line content: ensures pIp->mDSSData.flgSP != 0 && \\old(pIp->mFWarning.countSPSeen) > 2 ==> pIp->mFWarning.countSPLost == 0;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 11) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet x_2 = (pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_4 = a_1.F4_TAG_FAULT_WARNING_countSPSeen.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_4) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_3) /\\\n      is_uint32(x) /\\\n      is_uint32((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_2) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: (x_2 != 0) /\\ (3 <= x_3).\n  If x_1 = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1\n                                                     + (a.F4_TAG_FAULT_WARNING_countSPLost)) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_2).\n  }\n  Else {\n    If (a.F4_TAG_FAULT_WARNING_countSPLost) != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1 + x_3) } }) =\n           pIp_3).\n    }\n    Else { Have: pIp_3 = pIp_1. }\n    If 3\n         <= ((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_3 = pIp_4.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_4 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_4.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_3 = pIp_2. }\n  }\n  If 33751 <= x\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_5).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_5 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_5.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_4 = 0.\nProver Z3 4.8.12 returns Unknown (Qed:64ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 11', 'Error line content: ensures pIp->mDSSData.flgSP != 0 && \\old(pIp->mFWarning.countSPSeen) > 2 ==> pIp->mFWarning.countSPSeen == 0;')

Postcond Results:
- False
- True
- False
- False
- False
- True
- True
- True

------------------------------------------------
File Name: Delay.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: LimitControllerInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'LimitControllerInputFun' (1/2):\nEffect at line 25\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", None, None)
- ("Goal Assigns nothing in 'LimitControllerInputFun' (2/2):\nEffect at line 38\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.73ms) (3s)", None, None)

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GyroPick.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroPick.c, line 19):\nLet x = to_uint8(1 + iy_0).\nLet a = pIp_0.F10___GyroPick_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wal(a).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_4 = shift_float32(a_3, 0).\nLet a_5 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_1, a_2, 9), a_4, 9).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_countPick(a).\nLet a_7 = shift_uint8(a_6, 0).\nAssume {\n  Type: is_uint8(iy_0) /\\ is_uint8(Mint_1[shift_uint8(a_6, iy_0)]).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroPick_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, 9).\n  (* Invariant *)\n  Have: (0 <= iy_0) /\\ (iy_0 <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < iy_0) ->\n      ((RAbs.abs(of_f32(a_5[shift_float32(a_3, i_1)])\n          - of_f32(a_5[shift_float32(a_1, i_1)])) <= (6442451.0/134217728)) \\/\n       (havoc(Mint_undef_0, Mint_2, a_7, 9)[shift_uint8(a_6, i_1)] <= 5)))).\n  (* Then *)\n  Have: iy_0 <= 8.\n  If lt_f32(to_f32(.0),\n       sub_f32(a_5[shift_float32(a_3, iy_0)], a_5[shift_float32(a_1, iy_0)]))\n  Then {\n    Have: sub_f32(a_5[shift_float32(a_3, iy_0)],\n            a_5[shift_float32(a_1, iy_0)]) = tmpgi_0.\n  }\n  Else {\n    Have: neg_f32(sub_f32(a_5[shift_float32(a_3, iy_0)],\n                    a_5[shift_float32(a_1, iy_0)])) = tmpgi_0.\n  }\n  If lt_f32(to_f32((6442451.0/134217728)), tmpgi_0)\n  Then {\n    Have: havoc(Mint_undef_0, Mint_2, a_7, 9) = Mint_1.\n    If to_uint8(1 + Mint_1[shift_uint8(a_6, iy_0)]) <= 5\n    Then {\n      Let a_8 = shift_uint8(a_6, iy_0).\n      Have: (Mint_1[a_8 <- to_uint8(1 + Mint_1[a_8])] = Mint_0) /\\\n          (a_5 = Mf32_2).\n      Have: Mf32_2[shift_float32(a_3, iy_0)\n              <- Mf32_2[shift_float32(a_1, iy_0)]] = Mf32_0.\n    }\n    Else {\n      Have: a_5 = Mf32_3.\n      Have: Mf32_3[shift_float32(a_1, iy_0)\n              <- Mf32_3[shift_float32(a_3, iy_0)]] = Mf32_0.\n      Have: Mint_1[a_8 <- 0] = Mint_0.\n    }\n  }\n  Else {\n    Have: (havoc(Mint_undef_0, Mint_2, a_7, 9) = Mint_3) /\\ (a_5 = Mf32_4).\n    Have: Mf32_4[shift_float32(a_1, iy_0)\n            <- Mf32_4[shift_float32(a_3, iy_0)]] = Mf32_0.\n    Have: Mint_3[a_8 <- 0] = Mint_0.\n  }\n  (* Invariant *)\n  Have: x <= 9.\n}\nProve: (RAbs.abs(of_f32(Mf32_0[shift_float32(a_3, i)])\n          - of_f32(Mf32_0[shift_float32(a_1, i)])) <= (6442451.0/134217728)) \\/\n    (Mint_0[shift_uint8(a_6, i)] <= 5).\nProver Z3 4.8.12 returns Timeout (Qed:80ms) (3s)', 'Error found in file: Output/GyroPick.c at line: 19', 'Error line content: loop invariant \\forall integer k; 0 <= k < iy ==>')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'TcProcessFun' (1/2):\nEffect at line 23\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.59ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TcProcessFun' (2/2):\nEffect at line 36\nAssume { (* Then *) Have: Mint_0[global(L_GetUartData_ret_44)] = 1. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixInv33F.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 36):\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a_2, 6).\nLet a_11 = shift_float32(a_2, 3).\nLet a_12 = sub_f32(mul_f32(m_2[a_5], m_2[a_10]),\n             mul_f32(m_2[a_11], m_2[a_4])).\nLet m_3 = m_2[shift_float32(a, 3) <- a_12].\nLet a_13 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_13], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_10]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_11]),\n                 mul_f32(m_4[a_13], m_4[a_5]))].\nLet a_14 = sub_f32(mul_f32(m_5[a_11], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_10])).\nLet m_6 = m_5[shift_float32(a, 6) <- a_14].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_10]),\n                 mul_f32(m_6[a_13], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_13], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_11]))].\nLet a_15 = pIp_0.F10___MatrixInv33F_ret.\nLet x = to_sint8(1 + i).\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_15.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_13, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_15, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)),\n       to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_13], a_7),\n                               mul_f32(m_8[a_9], a_12)),\n                       mul_f32(m_8[a_8], a_14)))))\n  Else {\n    (* Then *)\n    Have: lt_f64(to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_13], a_7),\n                                         mul_f32(m_8[a_9], a_12)),\n                                 mul_f32(m_8[a_8], a_14)))),\n            to_f64((-4722366482869645.0/4722366482869645213696))).\n  }\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Then *)\n  Have: i <= 8.\n}\nProve: (0 <= x) /\\ (x <= 9).\nProver Z3 4.8.12 returns Timeout (Qed:68ms) (3s)', 'Error found in file: Output/MatrixInv33F.c at line: 36', 'Error line content: /*@ loop invariant 0 <= i <= 9;')
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 47):\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a_2, 6).\nLet a_11 = shift_float32(a_2, 3).\nLet a_12 = sub_f32(mul_f32(m_2[a_5], m_2[a_10]),\n             mul_f32(m_2[a_11], m_2[a_4])).\nLet m_3 = m_2[shift_float32(a, 3) <- a_12].\nLet a_13 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_13], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_10]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_11]),\n                 mul_f32(m_4[a_13], m_4[a_5]))].\nLet a_14 = sub_f32(mul_f32(m_5[a_11], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_10])).\nLet m_6 = m_5[shift_float32(a, 6) <- a_14].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_10]),\n                 mul_f32(m_6[a_13], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_13], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_11]))].\nLet a_15 = to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_13], a_7),\n                                   mul_f32(m_8[a_9], a_12)),\n                           mul_f32(m_8[a_8], a_14)))).\nLet a_16 = pIp_0.F10___MatrixInv33F_ret.\nLet x = to_sint8(1 + i).\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_16.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_13, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_16, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  (* Else *)\n  Have: !lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), a_15).\n  (* Else *)\n  Have: !lt_f64(a_15, to_f64((-4722366482869645.0/4722366482869645213696))).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Then *)\n  Have: i <= 8.\n}\nProve: (0 <= x) /\\ (x <= 9).\nProver Z3 4.8.12 returns Timeout (Qed:30ms) (3s)', 'Error found in file: Output/MatrixInv33F.c at line: 47', 'Error line content: /*@ loop invariant 0 <= i <= 9;')

Loop Invariant Results:
- False
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Input.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Input.c, line 12) in 'InputFun' (1/3):\nEffect at line 25\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.54ms) (3s)", 'Error found in file: Output/Input.c at line: 12', 'Error line content: assigns pIp->mGyroData.stateFlag[0..8];')
- ("Goal Assigns (file Output/Input.c, line 12) in 'InputFun' (2/3):\nEffect at line 32\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.58ms) (3s)", 'Error found in file: Output/Input.c at line: 12', 'Error line content: assigns pIp->mGyroData.stateFlag[0..8];')
- ("Goal Assigns (file Output/Input.c, line 12) in 'InputFun' (3/3):\nEffect at line 35\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.95ms) (3s)", 'Error found in file: Output/Input.c at line: 12', 'Error line content: assigns pIp->mGyroData.stateFlag[0..8];')

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: PeriodControl.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Establishment of Invariant (file Output/PeriodControl.c, line 56):\nLet x = pIp_0.F18___PeriodControl_flg160INT.\nAssume {\n  Type: is_uint32(x).\n  (* Loop assigns ... *)\n  Have: (({ Init_pIp_0 with Init_F18___PeriodControl_countSate = v }) =\n         Init_pIp_0) /\\\n      (({ Init_pIp_0 with Init_F18___PeriodControl_flgGryoCalc = v_1 }) =\n       Init_pIp_0) /\\\n      (({ Init_pIp_0 with Init_F18___PeriodControl_flg160INT = v_2 }) =\n       Init_pIp_0).\n}\nProve: x != 52428.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)', 'Error found in file: Output/PeriodControl.c at line: 56', 'Error line content: /*@ loop invariant pIp->flg160INT != 0xCCCC;')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GetUartData.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GetUartData.c, line 22):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___GetUartData_len.\nLet a = pIp_0.F10___GetUartData_data.\nLet a_1 = shift_uint8(a, 0).\nLet a_2 = havoc(Mint_undef_0, Mint_0, a_1, x_1).\nLet a_3 = pIp_0.F10___GetUartData_ret.\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GetUartData_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 1).\n  Have: ({ Init_pIp_0 with Init_F10___GetUartData_bSucc = true }) =\n      Init_pIp_0.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->\n      (a_2[shift_uint8(a, i_2)] = w_2))).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: a_2[shift_uint8(a, i) <- to_uint8(w)][shift_uint8(a, i_1)] = w_1.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)', 'Error found in file: Output/GetUartData.c at line: 22', 'Error line content: loop invariant \\forall integer k; 0 <= k < i ==> pIp->data[k] == ADDR_READ(pIp->addr);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroStateGet.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 37):\nLet x = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = pIp_2.F14___GyroStateGet_stateFlag.\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet a_2 = pIp_2.F14___GyroStateGet_wa.\nLet a_3 = pIp_1.F14___GyroStateGet_wa.\nLet a_4 = global(L_gyroRecvData_65).\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet x_2 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_3 = to_uint64(2 + to_uint64(2 * i_1)).\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(x) /\\ is_uint8(Mint_0[shift_uint8(a_4, x_3)]) /\\\n      is_uint8(Mint_0[shift_uint8(a_4, to_uint64(1 + x_3))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a_4, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a_4, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= x).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n      (of_f32(havoc(Mf32_undef_0, Mf32_0, shift_float32(a_2, 0), x)\n                [shift_float32(a_2, i_2)])\n         = of_f32(Mf32_1[shift_float32(a_3, i_2)])))).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n      (havoc(Mint_undef_0, Mint_1, shift_uint64(a, 0), x)\n         [shift_uint64(a, i_2)] = Mint_2[shift_uint64(a_1, i_2)]))).\n  (* Then *)\n  Have: i_1 < x.\n}\nProve: to_uint64(1 + i) <= x_2.\nProver Z3 4.8.12 returns Unknown (Qed:10ms)', 'Error found in file: Output/GyroStateGet.c at line: 37', 'Error line content: /*@ loop invariant 0 <= i <= pIp->NumGyro;')
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 38):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_2 = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = pIp_2.F14___GyroStateGet_stateFlag.\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet a_2 = pIp_2.F14___GyroStateGet_wa.\nLet a_3 = pIp_1.F14___GyroStateGet_wa.\nLet a_4 = global(L_gyroRecvData_65).\nLet x_3 = pIp_1.F14___GyroStateGet_NumGyro.\nLet x_4 = to_uint64(2 + to_uint64(2 * i_2)).\nLet a_5 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(i_2) /\\ is_uint64(i) /\\ is_uint64(x_3) /\\ is_uint64(x_1) /\\\n      is_uint64(x_2) /\\ is_uint8(Mint_0[shift_uint8(a_4, x_4)]) /\\\n      is_uint8(Mint_0[shift_uint8(a_4, to_uint64(1 + x_4))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_3).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a_4, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a_4, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (of_f32(havoc(Mf32_undef_0, Mf32_2, shift_float32(a_2, 0), x_2)\n                [shift_float32(a_2, i_3)])\n         = of_f32(Mf32_1[shift_float32(a_3, i_3)])))).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (havoc(Mint_undef_0, Mint_1, shift_uint64(a, 0), x_2)\n         [shift_uint64(a, i_3)] = Mint_2[shift_uint64(a_1, i_3)]))).\n  (* Then *)\n  Have: i_2 < x_2.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(Mf32_0[shift_float32(a_5, i)\n                <- Mf32_0[global(L_DiviationToFloat_ret_77)]]\n                [shift_float32(a_5, i_1)])\n         = of_f32(Mf32_1[shift_float32(a_3, i_1)]).\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 38', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> pIp->wa[j] == \\at(pIp->wa[j], Pre);')
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 39):\nLet x = to_uint64(1 + i).\nLet a = pIp_0.F14___GyroStateGet_wa.\nLet a_1 = pIp_1.F14___GyroStateGet_wa.\nLet x_1 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_2 = pIp_2.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_2.F14___GyroStateGet_stateFlag.\nLet a_3 = pIp_1.F14___GyroStateGet_stateFlag.\nLet a_4 = pIp_2.F14___GyroStateGet_wa.\nLet a_5 = global(L_gyroRecvData_65).\nLet x_3 = pIp_1.F14___GyroStateGet_NumGyro.\nLet x_4 = Mint_1[shift_uint8(a_5, to_uint64(19 + i))].\nLet x_5 = to_uint64(2 + to_uint64(2 * i_2)).\nLet a_6 = pIp_0.F14___GyroStateGet_stateFlag.\nAssume {\n  Type: is_uint64(i_2) /\\ is_uint64(i) /\\ is_uint64(x_3) /\\ is_uint64(x_1) /\\\n      is_uint64(x_2) /\\ is_uint8(x_4) /\\\n      is_uint8(Mint_3[shift_uint8(a_5, x_5)]) /\\\n      is_uint8(Mint_3[shift_uint8(a_5, to_uint64(1 + x_5))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_3, 0), x_3).\n  (* Then *)\n  Have: Mint_3[shift_uint8(a_5, 0)] = 235.\n  (* Then *)\n  Have: Mint_3[shift_uint8(a_5, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (of_f32(havoc(Mf32_undef_0, Mf32_0, shift_float32(a_4, 0), x_2)\n                [shift_float32(a_4, i_3)])\n         = of_f32(Mf32_1[shift_float32(a_1, i_3)])))).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (havoc(Mint_undef_0, Mint_4, shift_uint64(a_2, 0), x_2)\n         [shift_uint64(a_2, i_3)] = Mint_2[shift_uint64(a_3, i_3)]))).\n  (* Then *)\n  Have: i_2 < x_2.\n  (* Invariant *)\n  Have: x <= x_1.\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x) ->\n      (of_f32(Mf32_2[shift_float32(a, i)\n                <- Mf32_2[global(L_DiviationToFloat_ret_77)]]\n                [shift_float32(a, i_3)])\n         = of_f32(Mf32_1[shift_float32(a_1, i_3)])))).\n}\nProve: Mint_0[shift_uint64(a_6, i) <- x_4][shift_uint64(a_6, i_1)]\n         = Mint_2[shift_uint64(a_3, i_1)].\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 39', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> pIp->stateFlag[j] == \\at(pIp->stateFlag[j], Pre);')

Loop Invariant Results:
- False
- False
- False

Assertion Errors:
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (3/7):\nEffect at line 26\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns ((char*)pIp->wa)[0..sizeof(float32)*(pIp->NumGyro)-1], ((char*)pIp->stateFlag)[0..sizeof(unint08)*(pIp->NumGyro)-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (4/7):\nEffect at line 29\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns ((char*)pIp->wa)[0..sizeof(float32)*(pIp->NumGyro)-1], ((char*)pIp->stateFlag)[0..sizeof(unint08)*(pIp->NumGyro)-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (5/7):\nEffect at line 33\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns ((char*)pIp->wa)[0..sizeof(float32)*(pIp->NumGyro)-1], ((char*)pIp->stateFlag)[0..sizeof(unint08)*(pIp->NumGyro)-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (7/7):\nEffect at line 43\nOutput/GyroStateGet.c:12: warning from Typed Model:\n - Warning: Hide sub-term definition\n   Reason: Cast with incompatible pointers types (source: float32*) (target: sint8*)\nOutput/GyroStateGet.c:12: warning from Typed Model:\n - Warning: Hide sub-term definition\n   Reason: Cast with incompatible pointers types (source: uint64*) (target: sint8*)\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_65).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet a_3 = shift_float32(pIp_0.F14___GyroStateGet_wa, 0).\nLet a_4 = shift_sint8(w, 0).\nLet x_2 = 4 * x_1.\nLet a_5 = shift_sint8(w_1, 0).\nLet a_6 = shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, 0).\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: (((!invalid(Malloc_0, a_3, x)) ->\n        (included(a_3, x, a_4, x_2) \\/ included(a_3, x, a_5, x_1)))) /\\\n    (((!invalid(Malloc_0, a_6, x)) ->\n     (included(a_6, x, a_4, x_2) \\/ included(a_6, x, a_5, x_1)))).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns ((char*)pIp->wa)[0..sizeof(float32)*(pIp->NumGyro)-1], ((char*)pIp->stateFlag)[0..sizeof(unint08)*(pIp->NumGyro)-1];')

Assertion Results:
- True
- True
- False
- False
- False
- True
- False

Postcond Errors:
- ("Goal Post-condition (file Output/GyroStateGet.c, line 13) in 'GyroStateGetFun':\nLet a = global(L_gyroRecvData_65).\nLet x = Mint_0[shift_uint8(a, 0)].\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(x_1) /\\ is_uint8(x) /\\\n      is_uint8(Mint_0[shift_uint8(a, 1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < (pIp_0.F14___GyroStateGet_NumGyro)) /\\ is_sint32(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  If x = 235\n  Then {\n    If Mint_0[shift_uint8(a, 1)] = 145\n    Then {\n      Let x_2 = pIp_0.F14___GyroStateGet_NumGyro.\n      Let a_3 = pIp_0.F14___GyroStateGet_stateFlag.\n      Let a_4 = pIp_0.F14___GyroStateGet_wa.\n      (* Invariant *)\n      Have: 0 <= x_2.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_0, Mf32_2, shift_float32(a_4, 0), x_2) = Mf32_0.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= x_2).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          (of_f32(Mf32_0[shift_float32(a_4, i_2)])\n             = of_f32(Mf32_1[shift_float32(a_2, i_2)])))).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          (havoc(Mint_undef_0, Mint_1, shift_uint64(a_3, 0), x_2)\n             [shift_uint64(a_3, i_2)] = Mint_2[shift_uint64(a_1, i_2)]))).\n      (* Else *)\n      Have: x_2 <= i_1.\n    }\n  }\n}\nProve: of_f32(Mf32_0[shift_float32(a_4, i)])\n         = of_f32(Mf32_1[shift_float32(a_2, i)]).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/GyroStateGet.c at line: 13', 'Error line content: ensures \\forall int i; 0 <= i < pIp->NumGyro ==> pIp->wa[i] == \\old(pIp->wa[i]);')
- ("Goal Post-condition (file Output/GyroStateGet.c, line 14) in 'GyroStateGetFun':\nLet a = global(L_gyroRecvData_65).\nLet x = Mint_2[shift_uint8(a, 0)].\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(x_1) /\\ is_uint8(x) /\\\n      is_uint8(Mint_2[shift_uint8(a, 1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < (pIp_0.F14___GyroStateGet_NumGyro)) /\\ is_sint32(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  If x = 235\n  Then {\n    If Mint_2[shift_uint8(a, 1)] = 145\n    Then {\n      Let x_2 = pIp_0.F14___GyroStateGet_NumGyro.\n      Let a_3 = pIp_0.F14___GyroStateGet_stateFlag.\n      Let a_4 = pIp_0.F14___GyroStateGet_wa.\n      (* Invariant *)\n      Have: 0 <= x_2.\n      (* Loop assigns ... *)\n      Have: havoc(Mint_undef_0, Mint_3, shift_uint64(a_3, 0), x_2) = Mint_0.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= x_2).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          (of_f32(havoc(Mf32_undef_0, Mf32_0, shift_float32(a_4, 0), x_2)\n                    [shift_float32(a_4, i_2)])\n             = of_f32(Mf32_1[shift_float32(a_2, i_2)])))).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          (Mint_0[shift_uint64(a_3, i_2)] = Mint_1[shift_uint64(a_1, i_2)]))).\n      (* Else *)\n      Have: x_2 <= i_1.\n    }\n  }\n}\nProve: Mint_0[shift_uint64(a_3, i)] = Mint_1[shift_uint64(a_1, i)].\nProver Z3 4.8.12 returns Unknown (Qed:25ms)", 'Error found in file: Output/GyroStateGet.c at line: 14', 'Error line content: ensures \\forall int i; 0 <= i < pIp->NumGyro ==> pIp->stateFlag[i] == \\old(pIp->stateFlag[i]);')

Postcond Results:
- False
- False

------------------------------------------------
File Name: JetDataGet.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/JetDataGet.c, line 7) in 'JetDataGetFun' (2/2):\nEffect at line 40\nProve: false.\nProver Z3 4.8.12 returns Timeout (3s)", 'Error found in file: Output/JetDataGet.c at line: 7', 'Error line content: assigns pIp->mThrDistribute.stateFlag[0], pIp->mThrDistribute.stateFlag[1];')

Assertion Results:
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SwitchSS.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SAMSubModePitch.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (4/21):\nEffect at line 33\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (5/21):\nEffect at line 33\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (6/21):\nEffect at line 33\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (7/21):\nEffect at line 36\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (8/21):\nEffect at line 36\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (9/21):\nEffect at line 36\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (13/21):\nEffect at line 56\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:53ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (14/21):\nEffect at line 56\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:44ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (15/21):\nEffect at line 56\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:49ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (16/21):\nEffect at line 57\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:48ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (17/21):\nEffect at line 57\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:60ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (18/21):\nEffect at line 57\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:59ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (19/21):\nEffect at line 58\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:61ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (20/21):\nEffect at line 58\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:58ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (21/21):\nEffect at line 58\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:56ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')

Assertion Results:
- True
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModePitch.c, line 9) in 'SAMSubModePitchFun':\nLet a = pIp_1.F10___SAMSubModePitch_pSDS.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F10___SAMSubModePitch_pCtrl.\nLet x_1 = pIp_0.F10___SAMSubModePitch_countMode.\nLet x_2 = pIp_0.F10___SAMSubModePitch_countPublic.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x_2) /\\ is_uint64(x_1) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 5625.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x = 1\n  Then {\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_1.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: ({ pIp_1 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_1.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_0.\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_0).\n  }\n}\nProve: (x_2 = 0) \\/ (x_2 <= 17).\nProver Z3 4.8.12 returns Timeout (Qed:87ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 9', 'Error line content: ensures pIp->countPublic == 0 || pIp->countPublic <= 17;')

Postcond Results:
- False
- True

------------------------------------------------
File Name: SoftFaultProceedSP.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SoftFaultProceedSP.c (with preprocessing)
[kernel] Output/SoftFaultProceedSP.c:25: 
  syntax error:
  Location: line 25, between columns 20 and 21, before or at token: ipSwitchSS
  23        {
  24            case 5:
  25                IPCREATE(SwitchSS, ipSwitchSS);
                            ^
  26                IPCALL(ipSwitchSS);
  27                break;
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrABAutoChoose.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: LimitFloat32.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/LimitFloat32.c, line 8) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_fin.\nLet a_1 = pIp_1.F10___LimitFloat32_fbound.\nLet a_2 = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Residual *)\n  When: !lt_f32(a_1, a).\n  (* Goal *)\n  When: r < of_f32(pIp_0.F10___LimitFloat32_fin).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n      Init_pIp_0.\n  If lt_f32(a, neg_f32(a_1))\n  Then {\n    Have: ({ pIp_1 with F10___LimitFloat32_fvalue = neg_f32(a_1) }) = pIp_0.\n  }\n  Else { Have: ({ pIp_1 with F10___LimitFloat32_fvalue = a }) = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___LimitFloat32_fvalue) = r.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/LimitFloat32.c at line: 8', 'Error line content: ensures (pIp->fin > pIp->fbound) ==> (pIp->fvalue == pIp->fbound);')
- ("Goal Post-condition (file Output/LimitFloat32.c, line 9) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(pIp_0.F10___LimitFloat32_fin) + r) < .0.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: (r + of_f32(pIp_0.F10___LimitFloat32_fvalue)) = .0.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (2.5s)", 'Error found in file: Output/LimitFloat32.c at line: 9', 'Error line content: ensures (pIp->fin < -pIp->fbound) ==> (pIp->fvalue == -pIp->fbound);')
- ("Goal Post-condition (file Output/LimitFloat32.c, line 10) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fin).\nLet r_1 = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: (r <= r_1) /\\ (.0 <= (r + r_1)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: of_f32(pIp_0.F10___LimitFloat32_fvalue) = r.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/LimitFloat32.c at line: 10', 'Error line content: ensures (-pIp->fbound <= pIp->fin <= pIp->fbound) ==> (pIp->fvalue == pIp->fin);')

Postcond Results:
- False
- False
- False
- True

------------------------------------------------
File Name: DevControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ('Goal Assertion (file Output/DevControl.c, line 10):\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: valid_rw(Malloc_0, addr_of_int(34842), 1).\nProver Z3 4.8.12 returns Timeout (3s)', 'Error found in file: Output/DevControl.c at line: 10', 'Error line content: /*@ assert \\valid((volatile unsigned int*)0x881A); */')
- ('Goal Assertion (file Output/DevControl.c, line 13):\nAssume {\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0, addr_of_int(34842), 1).\n}\nProve: valid_rw(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Timeout (Qed:0.72ms) (3s)', 'Error found in file: Output/DevControl.c at line: 13', 'Error line content: /*@ assert \\valid((volatile unsigned int*)0x8000); */')
- ('Goal Assertion (file Output/DevControl.c, line 16):\nAssume {\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0, addr_of_int(34842), 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0, addr_of_int(32768), 1).\n}\nProve: valid_rw(Malloc_0, addr_of_int(32776), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)', 'Error found in file: Output/DevControl.c at line: 16', 'Error line content: /*@ assert \\valid((volatile unsigned int*)0x8008); */')

Assertion Results:
- False
- False
- False
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Uint08.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: LimitCtrlAngleInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 10) in 'LimitCtrlAngleInputFun' (4/7):\nEffect at line 31\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 10) in 'LimitCtrlAngleInputFun' (5/7):\nEffect at line 36\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 10) in 'LimitCtrlAngleInputFun' (6/7):\nEffect at line 44\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 10) in 'LimitCtrlAngleInputFun' (7/7):\nEffect at line 49\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 10', 'Error line content: assigns pIp->pSCtrl[0].Up;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SAMSubModeRoll.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (4/22):\nEffect at line 30\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (5/22):\nEffect at line 30\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (6/22):\nEffect at line 30\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:12ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (7/22):\nEffect at line 31\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:12ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (8/22):\nEffect at line 31\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:12ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (9/22):\nEffect at line 31\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:18ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (13/22):\nEffect at line 54\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:80ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (14/22):\nEffect at line 54\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:84ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (15/22):\nEffect at line 54\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:78ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (16/22):\nEffect at line 55\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:79ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (17/22):\nEffect at line 55\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:94ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (18/22):\nEffect at line 55\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:97ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (19/22):\nEffect at line 56\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:88ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (20/22):\nEffect at line 56\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:92ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (21/22):\nEffect at line 56\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:103ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (22/22):\nEffect at line 64\nLet x = pIp_0.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      If 17 <= to_uint64(1 + (pIp_1.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_1.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_0).\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else { Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_0.\n  }\n  (* Then *)\n  Have: 6251 <= x.\n  Have: ((pIp_0.F11___SAMSubModeRoll_flgPRSAM) = 13107) /\\\n      (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n       Init_pIp_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n      Init_pIp_0.\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:131ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CalculateGyroDg.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CalculateGyroDg.c, line 26):\nLet x = to_uint8(1 + j).\nLet a = global(L_tmpwa_46).\nLet a_1 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a, 0), 5).\nLet a_2 = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a_2).\nLet a_4 = shift_A5_float32(a_3, 0).\nLet x_1 = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a_2)].\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a_2), 0),\n          x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a_2), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_3, 1), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_3, 2), 0), 5).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (of_f32(a_1[shift_float32(a, i_1)]) = .0))).\n  (* Then *)\n  Have: j <= 4.\n  (* Invariant *)\n  Have: x <= 5.\n}\nProve: of_f32(a_1[shift_float32(a, j) <- to_f32(.0)][shift_float32(a, i)])\n         = .0.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)', 'Error found in file: Output/CalculateGyroDg.c at line: 26', 'Error line content: loop invariant \\forall integer i; 0 <= i < j ==> tmpwa[i] == 0;')
- ('Goal Preservation of Invariant (file Output/CalculateGyroDg.c, line 37):\nLet x = to_uint8(1 + j).\nLet a = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x_1 = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_tmpwa_46).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = havoc(Mf32_undef_0, Mf32_0, a_2, 5).\nLet a_4 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nLet a_7 = shift_A5_float32(a_6, 0).\nLet x_2 = Mint_0[shift_uint8(a_5, j)].\nLet a_8 = a_3[shift_float32(a_1, j) <- a_3[shift_float32(a_4, x_2)]].\nAssume {\n  Type: is_uint8(j_1) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_5, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_7, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_6, 1), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_6, 2), 0), 5).\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->\n      (of_f32(havoc(Mf32_undef_1, Mf32_0, a_2, 5)[shift_float32(a_1, i_1)])\n         = .0))).\n  (* Else *)\n  Have: 5 <= j_1.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (of_f32(a_3[shift_float32(a_4, Mint_0[shift_uint8(a_5, i_1)])])\n         = of_f32(a_3[shift_float32(a_1, i_1)])))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_8[shift_float32(a_4, Mint_0[shift_uint8(a_5, i)])])\n         = of_f32(a_8[shift_float32(a_1, i)]).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)', 'Error found in file: Output/CalculateGyroDg.c at line: 37', 'Error line content: loop invariant \\forall integer i; 0 <= i < j ==> tmpwa[i] == pIp->pGyroData->wa[pIp->pGyroData->SignFlag[i]];')

Loop Invariant Results:
- True
- False
- True
- False

Assertion Errors:
- ("Goal Assigns (file Output/CalculateGyroDg.c, line 16) in 'CalculateGyroDgFun' (5/8):\nEffect at line 50\nLet a = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_tmpwa_46).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = havoc(Mf32_undef_1, Mf32_0, a_2, 5).\nLet a_4 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nLet a_7 = shift_A5_float32(a_6, 0).\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(j_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_5, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, 15).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_7, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_6, 1), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_6, 2), 0), 5).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Invariant *)\n  Have: forall i : Z. ((0 <= i) -> ((i < j) ->\n      (of_f32(havoc(Mf32_undef_0, Mf32_0, a_2, 5)[shift_float32(a_1, i)])\n         = .0))).\n  (* Else *)\n  Have: 5 <= j.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= x).\n  (* Invariant *)\n  Have: forall i : Z. ((0 <= i) -> ((i < j_1) ->\n      (of_f32(a_3[shift_float32(a_4, Mint_0[shift_uint8(a_5, i)])])\n         = of_f32(a_3[shift_float32(a_1, i)])))).\n  (* Else *)\n  Have: x <= j_1.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", 'Error found in file: Output/CalculateGyroDg.c at line: 16', 'Error line content: assigns pIp->pGyroData->W[0 .. 2];')

Assertion Results:
- True
- True
- True
- True
- False
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: DSSDataGet.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (6/17):\nEffect at line 47\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nLet a_1 = addr_of_int(41216).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_flgSP(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_piyaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (7/17):\nEffect at line 50\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (10/17):\nEffect at line 55\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (14/17):\nEffect at line 68\nTags: Case 0.\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (15/17):\nEffect at line 70\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(pIp_0.F12___DSSDataGet_pDSSData).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (a_1 = shiftfield_F5_TAG_DSS_DATA_flgSP(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a)) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:16ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (16/17):\nEffect at line 77\nTags: Case 1.\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (17/17):\nEffect at line 79\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(pIp_0.F12___DSSDataGet_pDSSData).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (a_1 = shiftfield_F5_TAG_DSS_DATA_flgSP(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(a)) \\/\n    (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:17ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')

Assertion Results:
- True
- True
- True
- True
- True
- False
- False
- True
- True
- False
- True
- True
- True
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (1/4):\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(v).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Else *)\n  Have: stateFlag_0 <= 0.\n}\nProve: (v = 0) \\/ (v = 1).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (2/4):\nTags: Default.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(si_1) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n  (* Default *)\n  Have: (si_1 != 0) /\\ (si_1 != 1).\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (3/4):\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (4/4):\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:17ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (1/4):\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(v).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Else *)\n  Have: stateFlag_0 <= 0.\n}\nProve: (v = 0) \\/ (v = 1).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (2/4):\nTags: Default.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(si_1) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n  (* Default *)\n  Have: (si_1 != 0) /\\ (si_1 != 1).\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (3/4):\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (4/4):\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')

Postcond Results:
- False
- False
- False
- False
- False
- False
- False
- False

------------------------------------------------
File Name: common.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: ModeControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (2/10):\nEffect at line 26\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (4/10):\nEffect at line 41\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 0. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (5/10):\nEffect at line 53\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 17. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (6/10):\nEffect at line 65\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 34. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (7/10):\nEffect at line 76\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 51. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (8/10):\nEffect at line 80\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32000).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_56)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (9/10):\nEffect at line 80\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32340).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_56)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 18) in 'ModeControlFun' (10/10):\nEffect at line 80\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32680).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_56)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 18', 'Error line content: assigns pIp->countMode;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True

------------------------------------------------
File Name: ModPNHP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ('Goal Assertion (file Output/ModPNHP.c, line 16):\nLet a = pIp_0.F10___ModPNHP_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___ModPNHP_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: of_f32(mul_f32(to_f32(2.0), pIp_0.F10___ModPNHP_halfperiod)) != .0.\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/ModPNHP.c at line: 16', 'Error line content: /*@ assert period != 0; */')

Assertion Results:
- False
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ModPNHP.c, line 7) in 'ModPNHPFun':\nLet a = pIp_0.F10___ModPNHP_halfperiod.\nLet a_1 = mul_f32(to_f32(2.0), a).\nLet a_2 = pIp_0.F10___ModPNHP_ret.\nLet a_3 = pIp_0.F10___ModPNHP_x.\nLet r = of_f32(a).\nLet r_1 = of_f32(a_3).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___ModPNHP_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Assertion *)\n  Have: of_f32(a_1) != .0.\n}\nProve: ((2.0 * r * ((r_1 + r) / (2.0 * r)))\n        + of_f32(sub_f32(a_3, mul_f32(div_f32(add_f32(a_3, a), a_1), a_1))))\n         = r_1.\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/ModPNHP.c at line: 7', 'Error line content: ensures *(pIp->ret) == pIp->x - (pIp->x + pIp->halfperiod) / (2.0f * pIp->halfperiod) * (2.0f * pIp->halfperiod);')

Postcond Results:
- False

------------------------------------------------
File Name: SAMSubModeDamp.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun' (2/9):\nEffect at line 18\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun' (4/9):\nEffect at line 30\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun' (5/9):\nEffect at line 30\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun' (6/9):\nEffect at line 30\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:17ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun' (7/9):\nEffect at line 31\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:19ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun' (8/9):\nEffect at line 31\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:18ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 10) in 'SAMSubModeDampFun' (9/9):\nEffect at line 31\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:20ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun':\nLet x = pIp_3.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet x_1 = pIp_1.F11___SAMSubModeDamp_countPublic.\nLet x_2 = pIp_0.F11___SAMSubModeDamp_countPublic.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\ is_uint64(x_1) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_2.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_4.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: x_1 <= 350.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_5.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_5 = pIp_4.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_4.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_3).\n  }\n  Else { Have: pIp_5 = pIp_3. }\n  If 351 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_3 = pIp_6).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ pIp_6 with F11___SAMSubModeDamp_countPublic = 0 ;\n             F11___SAMSubModeDamp_countMode = 0 ;\n             F11___SAMSubModeDamp_flgMode = 17 }) = pIp_0.\n  }\n  Else {\n    Have: (Init_pIp_0 = Init_pIp_2) /\\ (pIp_3 = pIp_2).\n    If 1001 <= (pIp_2.F11___SAMSubModeDamp_countMode)\n    Then {\n      Have: (Init_pIp_2 = Init_pIp_1) /\\ (pIp_2 = pIp_6).\n      Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_flgMode = true }) =\n          Init_pIp_1.\n      Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_countMode = true }) =\n          Init_pIp_1.\n      Have: ({ pIp_6 with F11___SAMSubModeDamp_countPublic = 0 ;\n               F11___SAMSubModeDamp_countMode = 0 ;\n               F11___SAMSubModeDamp_flgMode = 17 }) = pIp_0.\n    }\n    Else { Have: pIp_2 = pIp_0. }\n  }\n}\nProve: x_2 = (1 + x_1).\nProver Z3 4.8.12 returns Timeout (Qed:59ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: ensures \\old(pIp->countPublic) <= 350 ==> pIp->countPublic == \\old(pIp->countPublic) + 1;')
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun':\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet x = pIp_1.F11___SAMSubModeDamp_countPublic.\nLet x_1 = pIp_1.F11___SAMSubModeDamp_countMode.\nLet x_2 = pIp_0.F11___SAMSubModeDamp_countPublic.\nLet x_3 = pIp_0.F11___SAMSubModeDamp_countMode.\nLet x_4 = pIp_0.F11___SAMSubModeDamp_flgMode.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(x_3) /\\ is_uint64(x_4) /\\ is_uint64(x) /\\\n      is_uint64(x_1) /\\ is_uint64(pIp_2.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_3 <= 1000.\n  (* Residual *)\n  When: x_2 <= 350.\n  (* Goal *)\n  When: (351 <= x) \\/ (1001 <= x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_3.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_3 = pIp_2.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_2.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_0).\n  }\n  Else { Have: pIp_3 = pIp_0. }\n}\nProve: (x_2 = 0) /\\ (x_3 = 0) /\\ (x_4 = 17).\nProver Z3 4.8.12 returns Unknown (Qed:35ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: ensures \\old(pIp->countPublic) > 350 || \\old(pIp->countMode) > 1000 ==> pIp->countPublic == 0 && pIp->countMode == 0 && pIp->flgMode == SAM_PITCH;')

Postcond Results:
- False
- False

------------------------------------------------
File Name: LimitCtrlRateInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (1/10):\nEffect at line 24\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (2/10):\nEffect at line 26\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (3/10):\nEffect at line 27\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (4/10):\nEffect at line 28\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (5/10):\nEffect at line 32\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (6/10):\nEffect at line 34\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (7/10):\nEffect at line 38\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (8/10):\nEffect at line 40\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (9/10):\nEffect at line 44\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (10/10):\nEffect at line 46\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/LimitCtrlRateInput.c, line 18) in 'LimitCtrlRateInputFun':\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i <= 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_3,\n                                                     2))\n                <- Mf32_0[global(L_LimitFloat32_ret_2_52)]]\n                [shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_3,\n                                                     i))])\n         <= of_f32(pIp_0.F12___LimitCtrlRateInput_max).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 18', 'Error line content: ensures \\forall integer i; 0 <= i < 3 ==> pIp->pSCtrl[i].Ud <= pIp->max;')

Postcond Results:
- False

------------------------------------------------
File Name: PseudoRateModulator.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 7) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1).\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(Mf32_1[a_3]).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(a) + r) < of_f32(Mf32_1[a_2]).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(Mf32_0[a_2], a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(Mf32_0[a_2], a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 15) /\\ (x_1 = 0) /\\\n    (((10318659.0/134217728) + ((1935881.0/2097152) * of_f32(a_4))) = r).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/PseudoRateModulator.c at line: 7', 'Error line content: ensures ((pIp->pModulator->u - pIp->pModulator->r) > pIp->h1) ==>')
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 10) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1).\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(Mf32_1[a_3]).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(a) + of_f32(Mf32_1[a_2])) < r.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(Mf32_0[a_2], a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(Mf32_0[a_2], a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 0) /\\ (x_1 = 15) /\\\n    (((1935881.0/2097152) * of_f32(a_4)) = ((10318659.0/134217728) + r)).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (2.6s)", 'Error found in file: Output/PseudoRateModulator.c at line: 10', 'Error line content: ensures ((pIp->pModulator->u - pIp->pModulator->r) < -pIp->h1) ==>')
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 13) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1).\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(Mf32_1[a_2]).\nLet r_1 = of_f32(a).\nLet r_2 = of_f32(Mf32_1[a_3]).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (r <= (r_1 + r_2)) /\\ (r_2 <= (r_1 + r)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(Mf32_0[a_2], a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(Mf32_0[a_2], a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 0) /\\ (x_1 = 0) /\\ (((1935881.0/2097152) * of_f32(a_4)) = r_2).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (2.5s)", 'Error found in file: Output/PseudoRateModulator.c at line: 13', 'Error line content: ensures (-pIp->h1 <= (pIp->pModulator->u - pIp->pModulator->r) <= pIp->h1) ==>')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: DiviationToFloat.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: FaultJudgeProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (1/3):\nEffect at line 18\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nAssume {\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (2/3):\nEffect at line 24\nLet a = pIp_1.F13___FaultJudgeProceed_mFWarning.\nLet a_1 = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a_1.F4_TAG_FAULT_WARNING_Wsp.\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Residual *)\n  When: (a_1.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  If x = 0\n  Else { Have: pIp_0 = pIp_1. }\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 235.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (3/3):\nEffect at line 28\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_CWsp.\nLet x_1 = (pIp_2.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_CWsp.\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_2.F13___FaultJudgeProceed_fun.base) <= 0) /\\\n      linked(Malloc_0).\n  If x_1 = 235\n  Then {\n    Have: pIp_2 = pIp_1.\n    If ((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp)\n         = 0\n    Then {\n      (* Block Out *)\n      Have: Malloc_1[L_ipSoftFaultJudgeSP_48 <- 0] = Malloc_2.\n    }\n    Else {\n      Have: (pIp_1 = pIp_0) /\\\n          (Malloc_0[L_ipNoctrlJudge_50 <- 20] = Malloc_2).\n    }\n  }\n  Else {\n    Have: (pIp_2 = pIp_0) /\\ (Malloc_0[L_ipNoctrlJudge_50 <- 20] = Malloc_2).\n  }\n  If x = 235\n  Then { Have: Malloc_2 = Malloc_3. }\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:27ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: MatrixTran.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 20):\nLet x = to_uint8(1 + i_2).\nLet x_1 = pIp_0.F10___MatrixTran_nrow.\nLet x_2 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_3 = x_1 * x_2.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = pIp_0.F10___MatrixTran_mat.\nLet a_4 = havoc(Mf32_undef_1, Mf32_0, a_1, x_3).\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (0 <= i_1) /\\ (i_1 < x_2) /\\ (i < x) /\\ is_uint8(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: (0 < x_1) /\\ (0 < x_2).\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x_1).\n  (* Invariant *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i_2) -> ((0 <= i_3) ->\n      ((i_3 < x_2) ->\n      (of_f32(a_4[shift_float32(a, i_4 + (i_3 * x_1))])\n         = of_f32(a_4[shift_float32(a_3, i_3 + (i_4 * x_2))])))))).\n  (* Then *)\n  Have: i_2 < x_1.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->\n      (of_f32(a_2[shift_float32(a, i_2 + (i_3 * x_1))])\n         = of_f32(a_2[shift_float32(a_3, i_3 + (i_2 * x_2))])))).\n  (* Else *)\n  Have: x_2 <= j.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_2[shift_float32(a, i + (i_1 * x_1))])\n         = of_f32(a_2[shift_float32(a_3, i_1 + (i * x_2))]).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (2.5s)', 'Error found in file: Output/MatrixTran.c at line: 20', 'Error line content: loop invariant \\forall unint08 k, l; 0 <= k < i && 0 <= l < pIp->ncol ==>')
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 29):\nLet x = to_uint8(1 + j).\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = pIp_0.F10___MatrixTran_nrow.\nLet x_3 = x_2 * x_1.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = pIp_0.F10___MatrixTran_mat.\nLet x_4 = i * x_1.\nLet a_4 = havoc(Mf32_undef_1, Mf32_0, a_1, x_3).\nLet a_5 = a_2[shift_float32(a, i + (j * x_2))\n            <- a_2[shift_float32(a_3, j + x_4)]].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_2) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x) /\\ is_uint8(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: (0 < x_2) /\\ (0 < x_1).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_2).\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((0 <= i_2) ->\n      ((i_2 < x_1) ->\n      (of_f32(a_4[shift_float32(a, i_3 + (i_2 * x_2))])\n         = of_f32(a_4[shift_float32(a_3, i_2 + (i_3 * x_1))])))))).\n  (* Then *)\n  Have: i < x_2.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->\n      (of_f32(a_2[shift_float32(a, i + (i_2 * x_2))])\n         = of_f32(a_2[shift_float32(a_3, i_2 + x_4)])))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_5[shift_float32(a, i + (i_1 * x_2))])\n         = of_f32(a_5[shift_float32(a_3, i_1 + x_4)]).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (2.6s)', 'Error found in file: Output/MatrixTran.c at line: 29', 'Error line content: loop invariant \\forall unint08 l; 0 <= l < j ==>')

Loop Invariant Results:
- True
- False
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CheckCal16.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CheckCal16.c, line 26):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___CheckCal16_len.\nLet a = pIp_0.F10___CheckCal16_pkv.\nLet x_2 = Mint_0[shift_uint8(a, i)].\nLet x_3 = L_sum(Mint_0, a, 0, i).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint8(x_2) /\\ is_uint32(x_3).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal16_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: to_uint32(x_2 + x_3) = L_sum(Mint_0, a, 0, x).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)', 'Error found in file: Output/CheckCal16.c at line: 26', 'Error line content: loop invariant chksum == sum(pIp->pkv, 0, i);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: B_TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (3/12):\nEffect at line 28\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet a_1 = shift_uint8(a, 0).\nAssume {\n  Type: is_uint8(i).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_0[a_1] = 225.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (4/12):\nEffect at line 34\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (5/12):\nEffect at line 34\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (6/12):\nEffect at line 34\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (7/12):\nEffect at line 38\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (8/12):\nEffect at line 38\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (9/12):\nEffect at line 38\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (10/12):\nEffect at line 42\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (11/12):\nEffect at line 42\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 9) in 'B_TcProcessFun' (12/12):\nEffect at line 42\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 4).\n  (* Else *)\n  Have: 4 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: (shift_uint8(a_1, 2) = a_3) \\/ (shift_uint8(a_1, 3) = a_3).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 9', 'Error line content: assigns pIp->tcaData[2], pIp->tcaData[3];')

Assertion Results:
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
