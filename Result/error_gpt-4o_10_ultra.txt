File Name: ThreeAxisController.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (2/8):\nEffect at line 40\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (3/8):\nEffect at line 50\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (4/8):\nEffect at line 60\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (5/8):\nEffect at line 69\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (6/8):\nEffect at line 72\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (7/8):\nEffect at line 75\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (8/8):\nEffect at line 78\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy, pIp->mController[1].fy, pIp->mController[2].fy;')

Assertion Results:
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TripleFabsMax.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 8) in 'TripleFabsMaxFun':\nLet a = to_f32(.0).\nLet a_1 = pIp_1.F10___TripleFabsMax_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n  If lt_f32(pIp_1.F10___TripleFabsMax_fx1, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  If lt_f32(pIp_1.F10___TripleFabsMax_fy2, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  If lt_f32(pIp_1.F10___TripleFabsMax_fz3, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___TripleFabsMax_tmax)\n         = Rg.max(RAbs.abs(of_f32(pIp_0.F10___TripleFabsMax_fx1)),\n         Rg.max(RAbs.abs(of_f32(pIp_0.F10___TripleFabsMax_fy2)),\n         RAbs.abs(of_f32(pIp_0.F10___TripleFabsMax_fz3)))).\nProver Z3 4.8.12 returns Timeout (Qed:62ms) (3s)", 'Error found in file: Output/TripleFabsMax.c at line: 8', 'Error line content: ensures *(pIp->ret) == \\max(\\max(\\abs(pIp->fx1), \\abs(pIp->fy2)), \\abs(pIp->fz3));')

Postcond Results:
- False

------------------------------------------------
File Name: MatrixMulti.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/MatrixMulti.c, line 11) in 'MatrixMultiFun':\nOutput/MatrixMulti.c:12: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:12: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nLet x = pIp_0.F10___MatrixMulti_nrow.\nLet x_1 = pIp_0.F10___MatrixMulti_nrc.\nLet x_2 = pIp_0.F10___MatrixMulti_ncol.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_3 = x * x_2.\nLet a_2 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_3 = pIp_0.F10___MatrixMulti_faciend.\nAssume {\n  Type: is_uint8(ir_0) /\\ is_uint8(x) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x * x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1 * x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: (0 < x) /\\ (0 < x_1) /\\ (0 < x_2).\n  (* Invariant *)\n  Have: (0 <= ir_0) /\\ (ir_0 <= x).\n  (* Else *)\n  Have: x <= ir_0.\n}\nProve: of_f32(havoc(Mf32_undef_0, Mf32_0, a_1, x_3)[shift_float32(a, i)]) = w.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/MatrixMulti.c at line: 11', 'Error line content: ensures \\forall integer i; 0 <= i < pIp->nrow * pIp->ncol ==> pIp->product[i] ==')

Postcond Results:
- False

------------------------------------------------
File Name: InitVar.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (2/10):\nEffect at line 48\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:0.97ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (3/10):\nEffect at line 48\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (4/10):\nEffect at line 48\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (5/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32024), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (6/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32364), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (7/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32704), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (8/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (9/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (10/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')

Assertion Results:
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

------------------------------------------------
File Name: AppInit.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'AppInitFun' (1/3):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (2/3):\nEffect at line 30\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (3/3):\nEffect at line 36\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32899), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: main.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (1/3):\nEffect at line 14\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (2/3):\nEffect at line 17\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (3/3):\nEffect at line 19\nLet a = pIp_1.F12___main_ret.\nLet a_1 = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: a_1 = a.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CalculateGyroRs.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CalculateGyroRs.c (with preprocessing)
[kernel:annot-error] Output/CalculateGyroRs.c:19: Warning: 
  unbound logic variable Rgtrans. Ignoring logic specification of function CalculateGyroRsFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CheckCal.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CheckCal.c (with preprocessing)
[kernel:annot-error] Output/CheckCal.c:16: Warning: 
  no such predicate or logic function \sum(unint08 const *, ℤ, unint32). Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SendUartData.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SendUartData.c (with preprocessing)
[kernel:annot-error] Output/SendUartData.c:16: Warning: 
  Assignment operators not allowed in annotations.
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TMProcess.c

Syntax Error:
syntax Error
[kernel] Parsing Output/TMProcess.c (with preprocessing)
[kernel:annot-error] Output/TMProcess.c:11: Warning: 
  unbound logic variable pkv. Ignoring logic specification of function TMProcessFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Float.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Tr32Float.c, line 10) in 'Tr32FloatFun' (7/11):\nEffect at line 53\nLet a = pIp_0.F10___Tr32Float_ret.\nLet a_1 = pIp_0.F10___Tr32Float_pC.\nLet a_2 = pIp_0.F10___Tr32Float_pB.\nLet a_3 = pIp_0.F10___Tr32Float_pA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___Tr32Float_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a_2.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/Tr32Float.c at line: 10', 'Error line content: assigns *(pIp->pA), *(pIp->pB), *(pIp->pC), *(pIp->ret);')

Assertion Results:
- True
- True
- True
- True
- True
- True
- False
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True

------------------------------------------------
File Name: NoctrlJudge.c

Syntax Error:
syntax Error
[kernel] Parsing Output/NoctrlJudge.c (with preprocessing)
[kernel:annot-error] Output/NoctrlJudge.c:10: Warning: 
  \result meaningless. Ignoring logic specification of function NoctrlJudgeFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GyroChoose.c

Syntax Error:
syntax Error
[kernel] Parsing Output/GyroChoose.c (with preprocessing)
[kernel:annot-error] Output/GyroChoose.c:9: Warning: 
  no such predicate or logic function \sum(unint32 [9], ℤ, ℤ). Ignoring logic specification of function GyroChooseFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrusterCtrlLogic.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 7) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_6.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_1.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_4 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_6 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_6) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_5) /\\ is_uint8(x_4) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3).\n  (* Heap *)\n  Type: region(pIp_1.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_5 != 0.\n  Have: ({ Init_pIp_0 with\n           Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                           Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                           Init_F3_TAG_UPS_2MS_wPulse = true\n                                                           } }) = Init_pIp_0.\n  If x_4 != 0\n  Then {\n    Let a_4 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(12,\n                                                          a_4.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_9.\n  }\n  Else {\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                          a_4.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_9.\n  }\n  If x_3 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_5.\n    Have: ({ pIp_5 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                          a_5.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_8.\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_2 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_4.\n    Have: ({ pIp_4 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                          a_6.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_7.\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x_1 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_3.\n    Have: ({ pIp_3 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                          a_7.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_6.\n  }\n  Else { Have: pIp_7 = pIp_6. }\n  If x != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_6 = pIp_2.\n    Have: ({ pIp_2 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_8.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_6 = pIp_0. }\n}\nProve: bit_test(x_6, 2).\nProver Z3 4.8.12 returns Timeout (Qed:65ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 7', 'Error line content: ensures (\\old(pIp->mModulator[0].Yp) != 0 ==> (pIp->mThrDistribute.wPulse & 0x04) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 8) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet a = pIp_6.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_5 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_5) /\\ is_uint8(x_6) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4).\n  (* Heap *)\n  Type: region(pIp_6.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_11 = pIp_6. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 3).\nProver Z3 4.8.12 returns Timeout (Qed:91ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 8', 'Error line content: ensures (\\old(pIp->mModulator[0].Yn) != 0 ==> (pIp->mThrDistribute.wPulse & 0x08) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 9) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet a = pIp_6.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_5 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a_2 = a[1].\nLet x_6 = a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_5) /\\ is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(x_6) /\\ is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4).\n  (* Heap *)\n  Type: region(pIp_6.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_11 = pIp_6. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 4).\nProver Z3 4.8.12 returns Timeout (Qed:82ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 9', 'Error line content: ensures (\\old(pIp->mModulator[1].Yp) != 0 ==> (pIp->mThrDistribute.wPulse & 0x10) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 10) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet a = pIp_6.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_5 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a_2 = a[1].\nLet x_6 = a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_5) /\\ is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_6) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4).\n  (* Heap *)\n  Type: region(pIp_6.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_11 = pIp_6. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 5).\nProver Z3 4.8.12 returns Timeout (Qed:77ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 10', 'Error line content: ensures (\\old(pIp->mModulator[1].Yn) != 0 ==> (pIp->mThrDistribute.wPulse & 0x20) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 11) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet a = pIp_6.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_5 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a_2 = a[2].\nLet x_6 = a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_3 = a[1].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_5) /\\ is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x_6) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4).\n  (* Heap *)\n  Type: region(pIp_6.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_11 = pIp_6. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 6).\nProver Z3 4.8.12 returns Timeout (Qed:85ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 11', 'Error line content: ensures (\\old(pIp->mModulator[2].Yp) != 0 ==> (pIp->mThrDistribute.wPulse & 0x40) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 12) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_6.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_1 = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_2 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_3 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet a = pIp_5.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_4 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a_2 = a[2].\nLet x_5 = a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_6 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_3 = a[1].\nAssume {\n  Type: is_uint8(x_6) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_4) /\\ is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_5) /\\\n      is_uint8(x) /\\ is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3).\n  (* Heap *)\n  Type: region(pIp_5.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Residual *)\n  When: ((pIp_0.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn)\n          = 0.\n  (* Goal *)\n  When: x_5 != 0.\n  If x_4 != 0\n  Then {\n    Let a_4 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_9 = pIp_5. }\n  If x_3 != 0\n  Then {\n    Let a_5 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_2 != 0\n  Then {\n    Let a_6 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x_1 != 0\n  Then {\n    Let a_7 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_6).\n  }\n  Else { Have: pIp_7 = pIp_6. }\n  If x != 0\n  Then {\n    Let a_8 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_6 = pIp_1.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_0).\n  }\n  Else { Have: pIp_6 = pIp_0. }\n}\nProve: bit_test(x_6, 7).\nProver Z3 4.8.12 returns Timeout (Qed:75ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 12', 'Error line content: ensures (\\old(pIp->mModulator[2].Yn) != 0 ==> (pIp->mThrDistribute.wPulse & 0x80) != 0);')

Postcond Results:
- False
- False
- False
- False
- False
- False

------------------------------------------------
File Name: SAMSubModeCruise.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/GyroProceed.c, line 15) in 'GyroProceedFun' (2/9):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 15', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 15) in 'GyroProceedFun' (3/9):\nEffect at line 25\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.88ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 15', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 15) in 'GyroProceedFun' (4/9):\nEffect at line 28\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 15', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 15) in 'GyroProceedFun' (5/9):\nEffect at line 31\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 15', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 15) in 'GyroProceedFun' (8/9):\nEffect at line 38\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 15', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 15) in 'GyroProceedFun' (9/9):\nEffect at line 44\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 15', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')

Assertion Results:
- True
- False
- False
- False
- False
- True
- True
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: Inputproceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (2/6):\nEffect at line 18\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1], pIp->mAttitude.rate[0], pIp->mAttitude.rate[1], pIp->mAttitude.rate[2];')
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (4/6):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.86ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1], pIp->mAttitude.rate[0], pIp->mAttitude.rate[1], pIp->mAttitude.rate[2];')
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (5/6):\nEffect at line 31\nAssume {\n  (* Then *)\n  Have: ((pIp_0.F12___Inputproceed_mDSSData).F5_TAG_DSS_DATA_flgSP) = 1.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1], pIp->mAttitude.rate[0], pIp->mAttitude.rate[1], pIp->mAttitude.rate[2];')
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (6/6):\nEffect at line 32\nAssume {\n  (* Then *)\n  Have: ((pIp_0.F12___Inputproceed_mDSSData).F5_TAG_DSS_DATA_flgSP) = 1.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1], pIp->mAttitude.rate[0], pIp->mAttitude.rate[1], pIp->mAttitude.rate[2];')

Assertion Results:
- True
- False
- True
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultJudgeSP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Delay.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: LimitControllerInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitControllerInput.c, line 9) in 'LimitControllerInputFun' (1/2):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 9', 'Error line content: assigns *(pIp->mController), pIp->mAttitude;')
- ("Goal Assigns (file Output/LimitControllerInput.c, line 9) in 'LimitControllerInputFun' (2/2):\nEffect at line 28\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.65ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 9', 'Error line content: assigns *(pIp->mController), pIp->mAttitude;')

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroPick.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TcProcess.c

Syntax Error:
syntax Error
[kernel] Parsing Output/TcProcess.c (with preprocessing)
[kernel:annot-error] Output/TcProcess.c:8: Warning: 
  unbound logic variable tcaData. Ignoring logic specification of function TcProcessFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixInv33F.c

Syntax Error:
syntax Error
[kernel] Parsing Output/MatrixInv33F.c (with preprocessing)
[kernel:annot-error] Output/MatrixInv33F.c:10: Warning: 
  unbound logic variable rank. Ignoring logic specification of function MatrixInv33FFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Input.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Input.c, line 11) in 'InputFun' (1/3):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.58ms) (3s)", 'Error found in file: Output/Input.c at line: 11', 'Error line content: assigns *(&(pIp->mGyroData.stateFlag[0])), *(&(pIp->mGyroData.wa[0])), *(&(pIp->mDSSData));')
- ("Goal Assigns (file Output/Input.c, line 11) in 'InputFun' (2/3):\nEffect at line 30\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.60ms) (3s)", 'Error found in file: Output/Input.c at line: 11', 'Error line content: assigns *(&(pIp->mGyroData.stateFlag[0])), *(&(pIp->mGyroData.wa[0])), *(&(pIp->mDSSData));')
- ("Goal Assigns (file Output/Input.c, line 11) in 'InputFun' (3/3):\nEffect at line 36\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.84ms) (3s)", 'Error found in file: Output/Input.c at line: 11', 'Error line content: assigns *(&(pIp->mGyroData.stateFlag[0])), *(&(pIp->mGyroData.wa[0])), *(&(pIp->mDSSData));')

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: PeriodControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GetUartData.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GetUartData.c, line 24):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___GetUartData_len.\nLet a = pIp_0.F10___GetUartData_data.\nLet a_1 = shift_uint8(a, 0).\nLet a_2 = havoc(Mint_undef_0, Mint_0, a_1, x_1).\nLet a_3 = pIp_0.F10___GetUartData_ret.\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GetUartData_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: 0 <= x_1.\n  Have: ({ Init_pIp_0 with Init_F10___GetUartData_bSucc = true }) =\n      Init_pIp_0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->\n      (a_2[shift_uint8(a, i_2)] = w_2))).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: a_2[shift_uint8(a, i) <- to_uint8(w)][shift_uint8(a, i_1)] = w_1.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)', 'Error found in file: Output/GetUartData.c at line: 24', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> pIp->data[j] == ADDR_READ(pIp->addr);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/GetUartData.c, line 11) in 'GetUartDataFun':\nLet x = pIp_1.F10___GetUartData_len.\nLet a = pIp_1.F10___GetUartData_ret.\nLet a_1 = pIp_1.F10___GetUartData_data.\nAssume {\n  Type: is_uint64(fifoCnt_0) /\\ is_uint64(i_1) /\\ is_uint64(x) /\\\n      is_uint64(pIp_2.F10___GetUartData_len) /\\\n      is_uint64(pIp_3.F10___GetUartData_len).\n  (* Heap *)\n  Type: (region(pIp_1.F10___GetUartData_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: ((pIp_0.F10___GetUartData_bSucc) = 1) /\\ (0 <= i) /\\\n      (i < (pIp_0.F10___GetUartData_len)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Pre-condition *)\n  Have: 0 <= x.\n  Have: ({ Init_pIp_0 with Init_F10___GetUartData_bSucc = true }) =\n      Init_pIp_0.\n  If x = fifoCnt_0\n  Then {\n    Let a_2 = { pIp_1 with F10___GetUartData_bSucc = 0 }.\n    Have: a_2 = pIp_2.\n    (* Loop assigns ... *)\n    Have: havoc(Mint_undef_0, Mint_1, shift_uint8(a_1, 0), x) = Mint_0.\n    Have: (pIp_3 = pIp_2) /\\ (a_2 = pIp_3).\n    (* Invariant *)\n    Have: (0 <= i_1) /\\ (i_1 <= x).\n    (* Invariant *)\n    Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n        (Mint_0[shift_uint8(a_1, i_2)] = w_1))).\n    (* Else *)\n    Have: x <= i_1.\n    Have: ({ pIp_1 with F10___GetUartData_bSucc = 1 }) = pIp_0.\n  }\n  Else { Have: a_2 = pIp_0. }\n}\nProve: Mint_0[shift_uint8(pIp_0.F10___GetUartData_data, i)] = w.\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/GetUartData.c at line: 11', 'Error line content: ensures pIp->bSucc == 1 ==> \\forall integer i; 0 <= i < pIp->len ==> pIp->data[i] == ADDR_READ(pIp->addr);')

Postcond Results:
- True
- False

------------------------------------------------
File Name: GyroStateGet.c

Syntax Error:
syntax Error
[kernel] Parsing Output/GyroStateGet.c (with preprocessing)
[kernel:annot-error] Output/GyroStateGet.c:12: Warning: 
  unbound logic variable gyroRecvData. Ignoring logic specification of function GyroStateGetFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: JetDataGet.c

Syntax Error:
syntax Error
[kernel] Parsing Output/JetDataGet.c (with preprocessing)
[kernel] Output/JetDataGet.c:14: 
  syntax error:
  Location: between lines 14 and 15, before or at token: if
  12        loop invariant \valid(pIp);
  13        loop assigns pIp->mThrDistribute.stateFlag[0];
  
  14        */
  15        if((ADDR_READ(0xE000) & 0x4) == 0x4)
  
  16        {
  17            pIp -> mThrDistribute.stateFlag[0] = 1;
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SwitchSS.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
- ("Goal Post-condition (file Output/SwitchSS.c, line 8) in 'SwitchSSFun':\nAssume {\n  (* Heap *)\n  Type: region(pIp_0.F10___SwitchSS_fun.base) <= 0.\n  (* Goal *)\n  When: ((pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A) = 1.\n}\nProve: w = 2.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/SwitchSS.c at line: 8', 'Error line content: ensures (pIp->mDSSData.stateFlag_A == 1) ==> (*(volatile unsigned int*)0x8000 == 0x2);')
- ("Goal Post-condition (file Output/SwitchSS.c, line 9) in 'SwitchSSFun':\nLet x = (pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_0.F10___SwitchSS_fun.base) <= 0.\n  (* Goal *)\n  When: x != 1.\n}\nProve: w = 1.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/SwitchSS.c at line: 9', 'Error line content: ensures (pIp->mDSSData.stateFlag_A != 1) ==> (*(volatile unsigned int*)0x8000 == 0x1);')

Postcond Results:
- False
- False

------------------------------------------------
File Name: SAMSubModePitch.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SAMSubModePitch.c (with preprocessing)
[kernel:annot-error] Output/SAMSubModePitch.c:10: Warning: 
  unbound logic function fabs. Ignoring logic specification of function SAMSubModePitchFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultProceedSP.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SoftFaultProceedSP.c (with preprocessing)
[kernel] Output/SoftFaultProceedSP.c:20: 
  syntax error:
  Location: line 20, between columns 20 and 21, before or at token: ipSwitchSS
  18        {
  19            case 5:
  20                IPCREATE(SwitchSS, ipSwitchSS);
                            ^
  21                IPCALL(ipSwitchSS);
  22                break;
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrABAutoChoose.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: LimitFloat32.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/LimitFloat32.c, line 7) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_fin.\nLet a_1 = pIp_1.F10___LimitFloat32_fbound.\nLet a_2 = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Residual *)\n  When: !lt_f32(a_1, a).\n  (* Goal *)\n  When: r < of_f32(pIp_0.F10___LimitFloat32_fin).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n      Init_pIp_0.\n  If lt_f32(a, neg_f32(a_1))\n  Then {\n    Have: ({ pIp_1 with F10___LimitFloat32_fvalue = neg_f32(a_1) }) = pIp_0.\n  }\n  Else { Have: ({ pIp_1 with F10___LimitFloat32_fvalue = a }) = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___LimitFloat32_fvalue) = r.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (2.6s)", 'Error found in file: Output/LimitFloat32.c at line: 7', 'Error line content: ensures pIp->fin > pIp->fbound ==> pIp->fvalue == pIp->fbound;')
- ("Goal Post-condition (file Output/LimitFloat32.c, line 8) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(pIp_0.F10___LimitFloat32_fin) + r) < .0.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: (r + of_f32(pIp_0.F10___LimitFloat32_fvalue)) = .0.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/LimitFloat32.c at line: 8', 'Error line content: ensures pIp->fin < -pIp->fbound ==> pIp->fvalue == -pIp->fbound;')
- ("Goal Post-condition (file Output/LimitFloat32.c, line 9) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fin).\nLet r_1 = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: (r <= r_1) /\\ (.0 <= (r + r_1)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: of_f32(pIp_0.F10___LimitFloat32_fvalue) = r.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (2.6s)", 'Error found in file: Output/LimitFloat32.c at line: 9', 'Error line content: ensures -pIp->fbound <= pIp->fin <= pIp->fbound ==> pIp->fvalue == pIp->fin;')

Postcond Results:
- False
- False
- False
- True

------------------------------------------------
File Name: DevControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'DevControlFun' (1/3):\nEffect at line 10\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(34842), 1).\nProver Z3 4.8.12 returns Timeout (3s)", None, None)
- ("Goal Assigns nothing in 'DevControlFun' (2/3):\nEffect at line 12\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Timeout (Qed:0.86ms) (3s)", None, None)
- ("Goal Assigns nothing in 'DevControlFun' (3/3):\nEffect at line 14\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32776), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Uint08.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: LimitCtrlAngleInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 15) in 'LimitCtrlAngleInputFun' (4/7):\nEffect at line 40\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 15) in 'LimitCtrlAngleInputFun' (5/7):\nEffect at line 46\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_3).\nLet a_5 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_5), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 15) in 'LimitCtrlAngleInputFun' (6/7):\nEffect at line 57\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 15) in 'LimitCtrlAngleInputFun' (7/7):\nEffect at line 63\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_3).\nLet a_5 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_5), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/LimitCtrlAngleInput.c, line 14) in 'LimitCtrlAngleInputFun':\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_3 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i <= 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_3,\n                                                     1))\n                <- Mf32_0[global(L_LimitFloat32_ret_1_46)]]\n                [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_3,\n                                                     i))])\n         <= of_f32(pIp_0.F11___LimitCtrlAngleInput_max).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (2.5s)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 14', 'Error line content: ensures \\forall int i; 0 <= i <= 1 ==> pIp->pSCtrl[i].Up <= pIp->max;')

Postcond Results:
- False

------------------------------------------------
File Name: SAMSubModeRoll.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (4/22):\nEffect at line 34\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:9ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (5/22):\nEffect at line 34\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:9ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (6/22):\nEffect at line 34\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (7/22):\nEffect at line 35\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:13ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (8/22):\nEffect at line 35\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:14ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (9/22):\nEffect at line 35\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:16ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (13/22):\nEffect at line 62\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:83ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (14/22):\nEffect at line 62\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:76ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (15/22):\nEffect at line 62\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:75ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (16/22):\nEffect at line 63\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:94ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (17/22):\nEffect at line 63\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:96ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (18/22):\nEffect at line 63\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:86ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (19/22):\nEffect at line 64\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:104ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (20/22):\nEffect at line 64\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:112ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (21/22):\nEffect at line 64\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:98ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun' (22/22):\nEffect at line 72\nLet x = pIp_0.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      If 17 <= to_uint64(1 + (pIp_1.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_1.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_0).\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else { Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_0.\n  }\n  (* Then *)\n  Have: 6251 <= x.\n  Have: ((pIp_0.F11___SAMSubModeRoll_flgPRSAM) = 13107) /\\\n      (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n       Init_pIp_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n      Init_pIp_0.\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:132ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun':\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_2.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_2.F11___SAMSubModeRoll_pCtrl.\nLet x_2 = pIp_0.F11___SAMSubModeRoll_countPublic.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\\n      is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_2.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_2.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_2 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_2 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_2.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_2. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  If 6251 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Malloc_0 = Malloc_1) /\\\n        (pIp_1 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n        Init_pIp_1.\n    If (pIp_3.F11___SAMSubModeRoll_flgPRSAM) = 13107\n    Then {\n      Have: Malloc_1 = Malloc_2.\n      Have: ({ pIp_4 with F11___SAMSubModeRoll_flgPRSAM = 52428 }) = pIp_0.\n    }\n    Else {\n      Let a_2 = Init_pIp_2.Init_F11___SAMSubModeRoll_mFWarning.\n      Have: Init_pIp_1 = Init_pIp_2.\n      Have: ({ Init_pIp_2 with Init_F11___SAMSubModeRoll_flgPRSAM = true }) =\n          Init_pIp_2.\n      Have: ({ Init_pIp_2 with\n               Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_flgups = true\n                                                       } }) = Init_pIp_2.\n      Have: (({ Init_pIp_2 with\n                Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countUPSpc = true\n                                                        } }) = Init_pIp_2) /\\\n          (({ pIp_3 with F11___SAMSubModeRoll_countPublic = 0 ;\n              F11___SAMSubModeRoll_countMode = 0 ;\n              F11___SAMSubModeRoll_flgMode = 17 ;\n              F11___SAMSubModeRoll_flgPRSAM = 13107 ;\n              F11___SAMSubModeRoll_mFWarning = {\n                                                 pIp_3.F11___SAMSubModeRoll_mFWarning with\n                                                 F4_TAG_FAULT_WARNING_flgups = 235 ;\n                                                 F4_TAG_FAULT_WARNING_countUPSpc = 0\n                                                 } }) = pIp_0).\n    }\n  }\n  Else { Have: pIp_1 = pIp_0. }\n}\nProve: (x_2 = 0) \\/ (x_2 <= 17).\nProver Z3 4.8.12 returns Timeout (Qed:245ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: ensures pIp->countPublic == 0 || pIp->countPublic <= 17;')
- ("Goal Post-condition (file Output/SAMSubModeRoll.c, line 11) in 'SAMSubModeRollFun':\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_2.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_2.F11___SAMSubModeRoll_pCtrl.\nLet x_2 = pIp_0.F11___SAMSubModeRoll_countMode.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(x_2) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_2.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_2.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_2 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_2 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_2.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_2. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  If 6251 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Malloc_0 = Malloc_1) /\\\n        (pIp_1 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n        Init_pIp_1.\n    If (pIp_3.F11___SAMSubModeRoll_flgPRSAM) = 13107\n    Then {\n      Have: Malloc_1 = Malloc_2.\n      Have: ({ pIp_4 with F11___SAMSubModeRoll_flgPRSAM = 52428 }) = pIp_0.\n    }\n    Else {\n      Let a_2 = Init_pIp_2.Init_F11___SAMSubModeRoll_mFWarning.\n      Have: Init_pIp_1 = Init_pIp_2.\n      Have: ({ Init_pIp_2 with Init_F11___SAMSubModeRoll_flgPRSAM = true }) =\n          Init_pIp_2.\n      Have: ({ Init_pIp_2 with\n               Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_flgups = true\n                                                       } }) = Init_pIp_2.\n      Have: (({ Init_pIp_2 with\n                Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countUPSpc = true\n                                                        } }) = Init_pIp_2) /\\\n          (({ pIp_3 with F11___SAMSubModeRoll_countPublic = 0 ;\n              F11___SAMSubModeRoll_countMode = 0 ;\n              F11___SAMSubModeRoll_flgMode = 17 ;\n              F11___SAMSubModeRoll_flgPRSAM = 13107 ;\n              F11___SAMSubModeRoll_mFWarning = {\n                                                 pIp_3.F11___SAMSubModeRoll_mFWarning with\n                                                 F4_TAG_FAULT_WARNING_flgups = 235 ;\n                                                 F4_TAG_FAULT_WARNING_countUPSpc = 0\n                                                 } }) = pIp_0).\n    }\n  }\n  Else { Have: pIp_1 = pIp_0. }\n}\nProve: (x_2 = 0) \\/ (x_2 <= 6251).\nProver Z3 4.8.12 returns Timeout (Qed:239ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 11', 'Error line content: ensures pIp->countMode == 0 || pIp->countMode <= 6251;')

Postcond Results:
- False
- False

------------------------------------------------
File Name: CalculateGyroDg.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CalculateGyroDg.c (with preprocessing)
[kernel:annot-error] Output/CalculateGyroDg.c:16: Warning: 
  unbound logic variable tmpwa. Ignoring logic specification of function CalculateGyroDgFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: DSSDataGet.c

Syntax Error:
syntax Error
[kernel] Parsing Output/DSSDataGet.c (with preprocessing)
[kernel:annot-error] Output/DSSDataGet.c:9: Warning: 
  (pIp->pDSSData)->stateFlag_A is not a pointer.. Ignoring logic specification of function DSSDataGetFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: common.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: ModeControl.c

Syntax Error:
syntax Error
[kernel] Parsing Output/ModeControl.c (with preprocessing)
[kernel] Output/ModeControl.c:30: 
  syntax error:
  Location: between lines 30 and 31, before or at token: pIp
  28            loop assigns pIp->countMode;
  29            loop variant 1;
  
  30        */
  31        pIp->countMode++;
  
  32    
  33        if (flgModetmp1 == SAM_DAMP)
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ModPNHP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: SAMSubModeDamp.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SAMSubModeDamp.c (with preprocessing)
[kernel:annot-error] Output/SAMSubModeDamp.c:8: Warning: 
  \result meaningless. Ignoring logic specification of function SAMSubModeDampFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: LimitCtrlRateInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (1/10):\nEffect at line 23\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (2/10):\nEffect at line 25\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (3/10):\nEffect at line 26\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (4/10):\nEffect at line 27\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (5/10):\nEffect at line 31\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (6/10):\nEffect at line 33\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (7/10):\nEffect at line 37\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (8/10):\nEffect at line 39\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (9/10):\nEffect at line 43\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun' (10/10):\nEffect at line 45\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_3).\nLet a_5 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_5), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: assigns pIp->pSCtrl[0].Ud;')

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: PseudoRateModulator.c

Syntax Error:
syntax Error
[kernel] Parsing Output/PseudoRateModulator.c (with preprocessing)
[kernel] Output/PseudoRateModulator.c:26: 
  syntax error:
  Location: between lines 26 and 27, before or at token: else
  24        requires \valid(pIp->pModulator);
  25        assigns pIp->pModulator->Yp, pIp->pModulator->Yn, pIp->pModulator->r;
  
  26        */
  27        else if ((pIp->pModulator->u - pIp->pModulator->r) < -pIp->h1)
  
  28        {
  29            pIp->pModulator->Yp = 0xF;
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: DiviationToFloat.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/DiviationToFloat.c, line 7) in 'DiviationToFloatFun':\nLet a = pIp_0.F10___DiviationToFloat_ret.\nLet x = pIp_0.F10___DiviationToFloat_input.\nLet x_1 = pIp_0.F10___DiviationToFloat_mask.\nLet x_2 = pIp_0.F10___DiviationToFloat_offset.\nLet r = real_of_int(to_sint32(land(x, x_1) - x_2)).\nLet a_1 = pIp_0.F10___DiviationToFloat_LSB.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___DiviationToFloat_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (r * of_f32(a_1)) = of_f32(mul_f32(to_f32(r), a_1)).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (2.5s)", 'Error found in file: Output/DiviationToFloat.c at line: 7', 'Error line content: ensures *(pIp->ret) == ((siint16)((pIp->input & pIp->mask) - pIp->offset)) * pIp->LSB;')

Postcond Results:
- False

------------------------------------------------
File Name: FaultJudgeProceed.c

Syntax Error:
syntax Error
[kernel] Parsing Output/FaultJudgeProceed.c (with preprocessing)
[kernel] Output/FaultJudgeProceed.c:18: 
  syntax error:
  Location: between lines 18 and 19, before or at token: if
  16          loop invariant \valid(&(pIp->mFWarning));
  17          loop assigns *pIp;
  
  18        */
  19        if ((pIp->mFWarning.CWsp == TRUE) && (pIp->mFWarning.Wsp == FALSE))
  
  20        {
  21            IPCREATE(SoftFaultJudgeSP, ipSoftFaultJudgeSP);
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixTran.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 19):\nLet x = to_uint8(1 + i).\nLet x_1 = pIp_0.F10___MatrixTran_nrow.\nLet x_2 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_3 = x_1 * x_2.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = a_2[shift_float32(a, i + (j * x_1)) <- v].\nLet a_4 = pIp_0.F10___MatrixTran_mat.\nLet a_5 = a_2[shift_float32(a, i + x_3) <- v].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (0 <= i_2) /\\ (i_2 < x_2) /\\ (i_1 < x) /\\\n      is_uint8(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_4, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: (0 < x_1) /\\ (0 < x_2).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Invariant *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((0 <= i_3) ->\n      ((i_3 < x_2) ->\n      (of_f32(a_2[shift_float32(a, i_4 + (i_3 * x_1))])\n         = of_f32(a_2[shift_float32(a_4, i_3 + (i_4 * x_2))])))))).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->\n      (of_f32(a_3[shift_float32(a, i + (i_3 * x_1))])\n         = of_f32(a_3[shift_float32(a_4, i_3 + (i * x_2))])))).\n  (* Else *)\n  Have: x_2 <= j.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_5[shift_float32(a, i_1 + (i_2 * x_1))])\n         = of_f32(a_5[shift_float32(a_4, i_2 + (i_1 * x_2))]).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (2.6s)', 'Error found in file: Output/MatrixTran.c at line: 19', 'Error line content: loop invariant \\forall unint08 ii, jj; 0 <= ii < i && 0 <= jj < pIp->ncol ==>')
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 27):\nLet x = to_uint8(1 + j).\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = pIp_0.F10___MatrixTran_nrow.\nLet x_3 = x_2 * x_1.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = shift_float32(a, i + (j * x_2)).\nLet a_4 = a_2[a_3 <- v].\nLet a_5 = pIp_0.F10___MatrixTran_mat.\nLet x_4 = i * x_1.\nLet a_6 = a_2[a_3 <- a_4[shift_float32(a_5, j + x_4)]].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_2) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x) /\\ is_uint8(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: (0 < x_2) /\\ (0 < x_1).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_2).\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((0 <= i_2) ->\n      ((i_2 < x_1) ->\n      (of_f32(a_2[shift_float32(a, i_3 + (i_2 * x_2))])\n         = of_f32(a_2[shift_float32(a_5, i_2 + (i_3 * x_1))])))))).\n  (* Then *)\n  Have: i < x_2.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->\n      (of_f32(a_4[shift_float32(a, i + (i_2 * x_2))])\n         = of_f32(a_4[shift_float32(a_5, i_2 + x_4)])))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_6[shift_float32(a, i + (i_1 * x_2))])\n         = of_f32(a_6[shift_float32(a_5, i_1 + x_4)]).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (2.6s)', 'Error found in file: Output/MatrixTran.c at line: 27', 'Error line content: loop invariant \\forall unint08 jj; 0 <= jj < j ==>')

Loop Invariant Results:
- True
- False
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CheckCal16.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CheckCal16.c (with preprocessing)
[kernel:annot-error] Output/CheckCal16.c:16: Warning: 
  no such predicate or logic function \sum(unint08 const *, ℤ, unint32). Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: B_TcProcess.c

Syntax Error:
syntax Error
[kernel] Parsing Output/B_TcProcess.c (with preprocessing)
[kernel:annot-error] Output/B_TcProcess.c:8: Warning: 
  unbound logic variable chksum. Ignoring logic specification of function B_TcProcessFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------

