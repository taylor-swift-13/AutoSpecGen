File Name: ThreeAxisController.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun':\nLet r = of_f32(Mf32_0\n                 [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(shift_S2_TAG_FALSE_RATE_MODULATOR(\n                                                             shiftfield_F13___ThreeAxisController_mModulator(\n                                                               global(G_pIp_46)),\n                                                             0))]).\nProve: (r <= (5452595.0/4194304)) /\\ ((-5452595.0/4194304) <= r).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: ensures -1.3f <= pIp->mModulator[0].u && pIp->mModulator[0].u <= 1.3f;')
- ("Goal Post-condition (file Output/ThreeAxisController.c, line 13) in 'ThreeAxisControllerFun':\nLet r = of_f32(Mf32_0\n                 [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(shift_S2_TAG_FALSE_RATE_MODULATOR(\n                                                             shiftfield_F13___ThreeAxisController_mModulator(\n                                                               global(G_pIp_46)),\n                                                             1))]).\nProve: (r <= (5452595.0/4194304)) /\\ ((-5452595.0/4194304) <= r).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 13', 'Error line content: ensures -1.3f <= pIp->mModulator[1].u && pIp->mModulator[1].u <= 1.3f;')
- ("Goal Post-condition (file Output/ThreeAxisController.c, line 14) in 'ThreeAxisControllerFun':\nLet r = of_f32(Mf32_0\n                 [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(shift_S2_TAG_FALSE_RATE_MODULATOR(\n                                                             shiftfield_F13___ThreeAxisController_mModulator(\n                                                               global(G_pIp_46)),\n                                                             2))]).\nProve: (r <= (5452595.0/4194304)) /\\ ((-5452595.0/4194304) <= r).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/ThreeAxisController.c at line: 14', 'Error line content: ensures -1.3f <= pIp->mModulator[2].u && pIp->mModulator[2].u <= 1.3f;')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: TripleFabsMax.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 7) in 'TripleFabsMaxFun':\nLet a = pIp_1.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet a_2 = pIp_1.F10___TripleFabsMax_fy2.\nLet a_3 = pIp_1.F10___TripleFabsMax_fx1.\nLet a_4 = pIp_1.F10___TripleFabsMax_ret.\nLet r = of_f32(pIp_0.F10___TripleFabsMax_tmax).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  If lt_f32(a_3, a_1)\n  Then { Have: neg_f32(a_3) = fabsfx1_0. }\n  Else { Have: a_3 = fabsfx1_0. }\n  If lt_f32(a_2, a_1)\n  Then { Have: neg_f32(a_2) = fabsfy2_0. }\n  Else { Have: a_2 = fabsfy2_0. }\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: (r = of_f32(a_3)) \\/ (r = of_f32(a_2)) \\/ (r = of_f32(a)).\nProver Z3 4.8.12 returns Timeout (Qed:76ms) (3s)", 'Error found in file: Output/TripleFabsMax.c at line: 7', 'Error line content: ensures *(pIp->ret) == \\old(pIp->fx1) || *(pIp->ret) == \\old(pIp->fy2) || *(pIp->ret) == \\old(pIp->fz3);')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 8) in 'TripleFabsMaxFun':\nLet a = pIp_0.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet a_2 = pIp_0.F10___TripleFabsMax_fy2.\nLet a_3 = pIp_0.F10___TripleFabsMax_fx1.\nLet a_4 = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(pIp_1.F10___TripleFabsMax_tmax).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  If lt_f32(a_3, a_1)\n  Then { Have: neg_f32(a_3) = fabsfx1_0. }\n  Else { Have: a_3 = fabsfx1_0. }\n  If lt_f32(a_2, a_1)\n  Then { Have: neg_f32(a_2) = fabsfy2_0. }\n  Else { Have: a_2 = fabsfy2_0. }\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: (RAbs.abs(of_f32(a_3)) = r) \\/ (RAbs.abs(of_f32(a_2)) = r) \\/\n    (RAbs.abs(of_f32(a)) = r).\nProver Z3 4.8.12 returns Timeout (Qed:82ms) (3s)", 'Error found in file: Output/TripleFabsMax.c at line: 8', 'Error line content: ensures *(pIp->ret) == \\abs(\\old(pIp->fx1)) || *(pIp->ret) == \\abs(\\old(pIp->fy2)) || *(pIp->ret) == \\abs(\\old(pIp->fz3));')

Postcond Results:
- False
- False

------------------------------------------------
File Name: MatrixMulti.c

Syntax Error:
syntax Error
[kernel] Parsing Output/MatrixMulti.c (with preprocessing)
[kernel:annot-error] Output/MatrixMulti.c:41: Warning: unexpected token 'k'
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: InitVar.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

------------------------------------------------
File Name: AppInit.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: main.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/main.c, line 10) in 'mainFun' (1/3):\nEffect at line 15\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 10', 'Error line content: assigns *(pIp->ret) \\from \\nothing;')
- ("Goal Assigns (file Output/main.c, line 10) in 'mainFun' (2/3):\nEffect at line 18\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 10', 'Error line content: assigns *(pIp->ret) \\from \\nothing;')
- ("Goal Assigns (file Output/main.c, line 10) in 'mainFun' (3/3):\nEffect at line 20\nLet a = pIp_1.F12___main_ret.\nLet a_1 = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: a_1 = a.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 10', 'Error line content: assigns *(pIp->ret) \\from \\nothing;')

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CalculateGyroRs.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True
- True
- True

Assertion Errors:
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 15) in 'CalculateGyroRsFun' (8/12):\nEffect at line 77\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_Rgtemp_60).\nLet x_1 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint32(x_2) /\\\n      is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0),\n          15).\n  (* Pre-condition *)\n  Have: (0 <= x) /\\ (x <= 5).\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 < x) ->\n        ((i_1 <= 2) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_0[a_2] = Mf32_1[a_2])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_1[a_2] = Mf32_2[a_2])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:16ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 15', 'Error line content: assigns pIp->pGyroData->gyroStatus1;')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 15) in 'CalculateGyroRsFun' (9/12):\nEffect at line 80\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_Rgtemp_60).\nLet x_1 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint32(x_2) /\\\n      is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0),\n          15).\n  (* Pre-condition *)\n  Have: (0 <= x) /\\ (x <= 5).\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 < x) ->\n        ((i_1 <= 2) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_0[a_2] = Mf32_1[a_2])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_1[a_2] = Mf32_2[a_2])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:16ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 15', 'Error line content: assigns pIp->pGyroData->gyroStatus1;')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 15) in 'CalculateGyroRsFun' (10/12):\nEffect at line 84\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_Rgtemp_60).\nLet x_1 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint32(x_2) /\\\n      is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0),\n          15).\n  (* Pre-condition *)\n  Have: (0 <= x) /\\ (x <= 5).\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 < x) ->\n        ((i_1 <= 2) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_0[a_2] = Mf32_1[a_2])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_1[a_2] = Mf32_2[a_2])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:16ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 15', 'Error line content: assigns pIp->pGyroData->gyroStatus1;')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 15) in 'CalculateGyroRsFun' (11/12):\nEffect at line 87\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_Rgtemp_60).\nLet x_1 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint32(x_2) /\\\n      is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), 0),\n          15).\n  (* Pre-condition *)\n  Have: (0 <= x) /\\ (x <= 5).\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 < x) ->\n        ((i_1 <= 2) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_0[a_2] = Mf32_1[a_2])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Loop assigns ... *)\n  Have: forall a_2 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_1, i_2), i_1) != a_2)))))) ->\n      (Mf32_1[a_2] = Mf32_2[a_2])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:17ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 15', 'Error line content: assigns pIp->pGyroData->gyroStatus1;')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 15) in 'CalculateGyroRsFun' (12/12):\nEffect at line 90\nLet a = pIp_1.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a).\nLet x_1 = Mint_1[a_3].\nLet x_2 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet a_4 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(pIp_0.F13___CalculateGyroRs_pGyroData).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint32(x_2) /\\\n      is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: 3 <= x.\n  (* Goal *)\n  When: !invalid(Malloc_0, a_5, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_A5_float32(a_4, 0), 15).\n  (* Pre-condition *)\n  Have: (0 <= x) /\\ (x <= 5).\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Loop assigns ... *)\n  Have: forall a_6 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 < x) ->\n        ((i_1 <= 2) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_6)))))) ->\n      (Mf32_0[a_6] = Mf32_1[a_6])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Else *)\n  Have: x <= j.\n  (* Loop assigns ... *)\n  Have: forall a_6 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_6)))))) ->\n      (Mf32_1[a_6] = Mf32_2[a_6])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Else *)\n  Have: 5 <= i.\n}\nProve: (a_5 = a_1) \\/ (a_3 = a_5) \\/\n    (exists i_2,i_1 : Z.\n     (shift_float32(shift_A5_float32(a_4, i_2), i_1) = a_5) /\\ (0 <= i_2) /\\\n     (0 <= i_1) /\\ (i_2 <= 2) /\\ (i_1 <= 4)).\nProver Z3 4.8.12 returns Unknown (Qed:36ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 15', 'Error line content: assigns pIp->pGyroData->gyroStatus1;')

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CheckCal.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CheckCal.c (with preprocessing)
[kernel:annot-error] Output/CheckCal.c:18: Warning: 
  no such predicate or logic function \sum(ℤ, unint32, unint08 const *). Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SendUartData.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/SendUartData.c, line 17):\nLet x = to_uint64(1 + i_2).\nLet x_1 = pIp_0.F10___SendUartData_len.\nLet x_2 = pIp_0.F10___SendUartData_addr.\nLet m = Init_0[addr_of_int(x_2) <- i].\nLet a = pIp_0.F10___SendUartData_data.\nAssume {\n  Type: is_uint64(i_2) /\\ is_uint64(x_2) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SendUartData_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0) /\\ cinits(Init_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x_1).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (Init_0[shift_uint8(a, i_3)]=true))).\n  (* Then *)\n  Have: i_2 < x_1.\n  Have: cinits(m).\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: (m[shift_uint8(a, i_1)]=true).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)', 'Error found in file: Output/SendUartData.c at line: 17', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> \\initialized(&pIp->data[j]);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: TMProcess.c

Syntax Error:
syntax Error
[kernel] Parsing Output/TMProcess.c (with preprocessing)
[kernel:annot-error] Output/TMProcess.c:11: Warning: 
  unbound logic variable pkv. Ignoring logic specification of function TMProcessFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Float.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True

------------------------------------------------
File Name: NoctrlJudge.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/NoctrlJudge.c, line 14) in 'NoctrlJudgeFun' (2/3):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.88ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 14', 'Error line content: assigns pIp->mFWarning.countAV, pIp->mFWarning.Wav, pIp->nouse;')

Assertion Results:
- True
- False
- True

Postcond Errors:
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 10) in 'NoctrlJudgeFun':\nLet a = pIp_1.F11___NoctrlJudge_mFWarning.\nLet a_1 = pIp_0.F11___NoctrlJudge_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_countAV.\nLet x_1 = a_1.F4_TAG_FAULT_WARNING_countAV.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wav) /\\\n      is_uint8(a_1.F4_TAG_FAULT_WARNING_Wav) /\\ is_uint32(x) /\\\n      is_uint32(x_1) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_0.F11___NoctrlJudge_fun.base) <= 0.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_41)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_2 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_1.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_1.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_3 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_3 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_3.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_1).\n    }\n    Else {\n      Have: pIp_4 = pIp_1.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x_1 <= (1 + x).\nProver Z3 4.8.12 returns Timeout (Qed:31ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 10', 'Error line content: ensures pIp->mFWarning.countAV >= \\old(pIp->mFWarning.countAV) - 1;')
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 11) in 'NoctrlJudgeFun':\nLet a = pIp_0.F11___NoctrlJudge_mFWarning.\nLet a_1 = pIp_1.F11___NoctrlJudge_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_countAV.\nLet x_1 = a_1.F4_TAG_FAULT_WARNING_countAV.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wav) /\\\n      is_uint8(a_1.F4_TAG_FAULT_WARNING_Wav) /\\ is_uint32(x) /\\\n      is_uint32(x_1) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_1.F11___NoctrlJudge_fun.base) <= 0.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_41)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_2 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_3 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_3 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_3.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_4 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x <= (1 + x_1).\nProver Z3 4.8.12 returns Timeout (Qed:40ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 11', 'Error line content: ensures pIp->mFWarning.countAV <= \\old(pIp->mFWarning.countAV) + 1;')
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 12) in 'NoctrlJudgeFun':\nLet a = pIp_0.F11___NoctrlJudge_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_Wav.\nLet a_1 = pIp_1.F11___NoctrlJudge_mFWarning.\nLet x_1 = a_1.F4_TAG_FAULT_WARNING_Wav.\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_1.F11___NoctrlJudge_fun.base) <= 0.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_41)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_2 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a_2 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_2.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_3 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_3 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_3.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_4 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: (x = 235) \\/ (x_1 = x).\nProver Z3 4.8.12 returns Unknown (Qed:33ms)", 'Error found in file: Output/NoctrlJudge.c at line: 12', 'Error line content: ensures pIp->mFWarning.Wav == \\old(pIp->mFWarning.Wav) || pIp->mFWarning.Wav == TRUE;')
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 13) in 'NoctrlJudgeFun':\nLet a = pIp_0.F11___NoctrlJudge_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_countAV.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wav) /\\ is_uint32(x) /\\\n      is_uint32((pIp_1.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_41)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_1.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a_1 = pIp_1.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_1 with\n               F11___NoctrlJudge_mFWarning = { a_1 with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_1.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F11___NoctrlJudge_mFWarning = { a_1 with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a_1.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_0.\n    }\n  }\n  Else {\n    If 0 < ((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_2 = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: pIp_3 = pIp_2.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_2 with\n              F11___NoctrlJudge_mFWarning = { a_2 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_2.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_0).\n    }\n    Else {\n      Have: pIp_3 = pIp_0.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x <= 301.\nProver Z3 4.8.12 returns Unknown (Qed:30ms)", 'Error found in file: Output/NoctrlJudge.c at line: 13', 'Error line content: ensures pIp->mFWarning.countAV <= 301;')

Postcond Results:
- False
- False
- False
- False

------------------------------------------------
File Name: GyroChoose.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroChoose.c, line 26):\nLet a = pIp_0.F10___GyroChoose_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet x_1 = to_uint8(1 + i_1).\nLet a_2 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_stateFlag(a).\nLet x_2 = Mint_1[shift_uint64(a_2, i_1)].\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_4 = shift_uint8(a_3, 0).\nAssume {\n  Type: is_uint8(i_1) /\\ is_uint8(v) /\\ is_uint8(x) /\\ is_uint64(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroChoose_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (Mint_1[shift_uint64(a_2, i)] = 235) /\\ (0 <= i) /\\ (i < x_1) /\\\n      is_sint32(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_2, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= 9).\n  (* Invariant *)\n  Have: (v <= i_1) /\\ (0 <= v).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_1[shift_uint64(a_2, i_2)] = 235) ->\n      ((0 <= i_2) -> ((i_2 < i_1) ->\n      (havoc(Mint_undef_0, Mint_2[a_1 <- 0], a_4, 9)[a_1 <- v]\n         [shift_uint8(a_3, v - 1)] = i_2)))).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_1[shift_uint64(a_2, i_2)] = 235) ->\n      ((0 <= i_2) -> ((i_2 < i_1) -> (land(v_1, lsl(1, i_2)) != 0)))).\n  (* Then *)\n  Have: i_1 <= 8.\n  If x_2 = 235\n  Then {\n    Let a_5 = havoc(Mint_undef_0, Mint_2[a_1 <- 0], a_4, 9)[a_1 <- v]\n                [shift_uint8(a_3, v) <- i_1].\n    Have: a_5[a_1 <- to_uint8(1 + a_5[a_1])] = Mint_0.\n  }\n  Else {\n    Have: havoc(Mint_undef_0, Mint_2[a_1 <- 0], a_4, 9)[a_1 <- v] = Mint_0.\n  }\n  (* Invariant *)\n  Have: x_1 <= 9.\n  (* Invariant *)\n  Have: (0 <= x) /\\ (x <= x_1).\n}\nProve: Mint_0[shift_uint8(a_3, x - 1)] = i.\nProver Z3 4.8.12 returns Timeout (Qed:28ms) (3s)', 'Error found in file: Output/GyroChoose.c at line: 26', 'Error line content: loop invariant \\forall int j; 0 <= j < i ==> (pIp->pGyroData->stateFlag[j] == TRUE ==> pIp->pGyroData->SignFlag[pIp->pGyroData->JoinTotal - 1] == j);')

Loop Invariant Results:
- True
- True
- False
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: ThrusterCtrlLogic.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 8) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_6) /\\ is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 2).\nProver Z3 4.8.12 returns Timeout (Qed:86ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 8', 'Error line content: ensures (pIp->mModulator[0].Yp != 0) ==> (pIp->mThrDistribute.wPulse & 0x04) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 9) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_6) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 3).\nProver Z3 4.8.12 returns Timeout (Qed:85ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 9', 'Error line content: ensures (pIp->mModulator[0].Yn != 0) ==> (pIp->mThrDistribute.wPulse & 0x08) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 10) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[1].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x_6) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 4).\nProver Z3 4.8.12 returns Timeout (Qed:82ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 10', 'Error line content: ensures (pIp->mModulator[1].Yp != 0) ==> (pIp->mThrDistribute.wPulse & 0x10) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 11) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[1].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_6) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 5).\nProver Z3 4.8.12 returns Timeout (Qed:78ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 11', 'Error line content: ensures (pIp->mModulator[1].Yn != 0) ==> (pIp->mThrDistribute.wPulse & 0x20) != 0;')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 12) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[2].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[1].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x_6) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 6).\nProver Z3 4.8.12 returns Timeout (Qed:92ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 12', 'Error line content: ensures (pIp->mModulator[2].Yp != 0) ==> (pIp->mThrDistribute.wPulse & 0x40) != 0;')

Postcond Results:
- False
- False
- False
- False
- False
- True

------------------------------------------------
File Name: SAMSubModeCruise.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: GyroProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: Inputproceed.c

Syntax Error:
syntax Error
[kernel] Parsing Output/Inputproceed.c (with preprocessing)
[kernel:annot-error] Output/Inputproceed.c:12: Warning: 
  unbound logic variable Tr32Uint08_ret. Ignoring logic specification of function InputproceedFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultJudgeSP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 9) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_2) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x_3) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\ is_uint32(x) /\\\n      is_uint32((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: ((pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP) = 0.\n  If x_1 = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1 + x_3) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_2).\n  }\n  Else {\n    If x_3 != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1\n                                                       + (a_1.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                   } }) = pIp_3).\n    }\n    Else { Have: pIp_3 = pIp_1. }\n    If 3\n         <= ((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_3 = pIp_4.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_4 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_4.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_3 = pIp_2. }\n  }\n  If 33751 <= x\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_5).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_5 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_5.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_2 = (1 + x_3).\nProver Z3 4.8.12 returns Timeout (Qed:62ms) (3s)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 9', 'Error line content: ensures pIp->mDSSData.flgSP == 0 ==> pIp->mFWarning.countSPLost == \\old(pIp->mFWarning.countSPLost) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 10) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet x_2 = (pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_4 = a_1.F4_TAG_FAULT_WARNING_countSPSeen.\nLet x_5 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_4) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x_3) /\\\n      is_uint32(x_5) /\\ is_uint32(x) /\\ is_uint64(x_2) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: (x_2 != 0) /\\ (x_3 != 0).\n  Core: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                     Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                     } }) = Init_pIp_0.\n  If x_1 = 0\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                       Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPLost = \n                                                    to_uint32(1 + x_3) ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                  } }) = pIp_2.\n  }\n  Else {\n    If 3 <= to_uint32(1 + x_5)\n    Then {\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                         Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                    } }) = pIp_2.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = \n                                                      to_uint32(1 + x_5) } }) =\n          pIp_2.\n    }\n  }\n  If 33751 <= x\n  Then {\n    Let a_2 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_3 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_3.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_4 = (1 + x_5).\nProver Z3 4.8.12 returns Unknown (Qed:49ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 10', 'Error line content: ensures pIp->mDSSData.flgSP != 0 && \\old(pIp->mFWarning.countSPLost) != 0 ==> pIp->mFWarning.countSPSeen == \\old(pIp->mFWarning.countSPSeen) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 11) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet x_1 = (pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_3) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_2) /\\\n      is_uint32((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Residual *)\n  When: x_3 <= 33750.\n  (* Goal *)\n  When: (x_1 != 0) /\\ (3 <= x_2).\n  If x = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1\n                                                     + (a.F4_TAG_FAULT_WARNING_countSPLost)) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_0).\n  }\n  Else {\n    If (a.F4_TAG_FAULT_WARNING_countSPLost) != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1 + x_2) } }) =\n           pIp_2).\n    }\n    Else { Have: pIp_2 = pIp_1. }\n    If 3\n         <= ((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_2 = pIp_3.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_3 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_3.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_0).\n    }\n    Else { Have: pIp_2 = pIp_0. }\n  }\n}\nProve: x_3 = 0.\nProver Z3 4.8.12 returns Unknown (Qed:57ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 11', 'Error line content: ensures pIp->mDSSData.flgSP != 0 && \\old(pIp->mFWarning.countSPSeen) > 2 ==> pIp->mFWarning.countSPLost == 0;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 12) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet x_2 = (pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_3 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_4 = a_1.F4_TAG_FAULT_WARNING_countSPSeen.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_4) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_3) /\\\n      is_uint32(x) /\\\n      is_uint32((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_2) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: (x_2 != 0) /\\ (3 <= x_3).\n  If x_1 = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1\n                                                     + (a.F4_TAG_FAULT_WARNING_countSPLost)) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_2).\n  }\n  Else {\n    If (a.F4_TAG_FAULT_WARNING_countSPLost) != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1 + x_3) } }) =\n           pIp_3).\n    }\n    Else { Have: pIp_3 = pIp_1. }\n    If 3\n         <= ((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_3 = pIp_4.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_4 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_4.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_3 = pIp_2. }\n  }\n  If 33751 <= x\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_5).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_5 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_5.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_4 = 0.\nProver Z3 4.8.12 returns Unknown (Qed:64ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 12', 'Error line content: ensures pIp->mDSSData.flgSP != 0 && \\old(pIp->mFWarning.countSPSeen) > 2 ==> pIp->mFWarning.countSPSeen == 0;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 13) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_Wsp.\nAssume {\n  Type: is_uint8(x_3) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x_1) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64((pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Residual *)\n  When: x_2 <= 33750.\n  (* Residual *)\n  When: x_1 != 0.\n  (* Goal *)\n  When: 33751 <= x_1.\n  Core: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                     Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                     } }) = Init_pIp_0.\n  If x = 0\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                       Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPLost = \n                                                    to_uint32(1 + x_1) ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                  } }) = pIp_0.\n  }\n  Else {\n    If 3 <= to_uint32(1 + (a.F4_TAG_FAULT_WARNING_countSPSeen))\n    Then {\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                         Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                    } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = \n                                                      to_uint32(1\n                                                        + (a.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                    } }) = pIp_0.\n    }\n  }\n}\nProve: x_3 = 235.\nProver Z3 4.8.12 returns Unknown (Qed:42ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 13', 'Error line content: ensures \\old(pIp->mFWarning.countSPLost) > 33750 ==> pIp->mFWarning.Wsp == TRUE;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 14) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x_1) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64((pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Residual *)\n  When: x_2 <= 33750.\n  (* Residual *)\n  When: x_1 != 0.\n  (* Goal *)\n  When: 33751 <= x_1.\n  Core: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                     Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                     } }) = Init_pIp_0.\n  If x = 0\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                       Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPLost = \n                                                    to_uint32(1 + x_1) ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                  } }) = pIp_0.\n  }\n  Else {\n    If 3 <= to_uint32(1 + (a.F4_TAG_FAULT_WARNING_countSPSeen))\n    Then {\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                         Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                    } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = \n                                                      to_uint32(1\n                                                        + (a.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                    } }) = pIp_0.\n    }\n  }\n}\nProve: x_2 = 0.\nProver Z3 4.8.12 returns Unknown (Qed:47ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 14', 'Error line content: ensures \\old(pIp->mFWarning.countSPLost) > 33750 ==> pIp->mFWarning.countSPLost == 0;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 15) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_countSPset.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\ is_uint32(x_3) /\\\n      is_uint32(x_1) /\\ is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64((pIp_0.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Residual *)\n  When: x_2 <= 33750.\n  (* Residual *)\n  When: x_1 != 0.\n  (* Goal *)\n  When: 33751 <= x_1.\n  Core: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                     Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                     } }) = Init_pIp_0.\n  If x = 0\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                       Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPLost = \n                                                    to_uint32(1 + x_1) ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                  } }) = pIp_0.\n  }\n  Else {\n    If 3 <= to_uint32(1 + (a.F4_TAG_FAULT_WARNING_countSPSeen))\n    Then {\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                         Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                    } }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                    F4_TAG_FAULT_WARNING_countSPSeen = \n                                                      to_uint32(1\n                                                        + (a.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                    } }) = pIp_0.\n    }\n  }\n}\nProve: x_3 = 0.\nProver Z3 4.8.12 returns Unknown (Qed:47ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 15', 'Error line content: ensures \\old(pIp->mFWarning.countSPLost) > 33750 ==> pIp->mFWarning.countSPset == 0;')

Postcond Results:
- True
- False
- False
- False
- False
- False
- False
- False

------------------------------------------------
File Name: Delay.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: LimitControllerInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitControllerInput.c, line 11) in 'LimitControllerInputFun' (1/2):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 11', 'Error line content: assigns pIp->mController[0]; // Assuming mController[0] is modified by IPCALL')
- ("Goal Assigns (file Output/LimitControllerInput.c, line 11) in 'LimitControllerInputFun' (2/2):\nEffect at line 31\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.72ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 11', 'Error line content: assigns pIp->mController[0]; // Assuming mController[0] is modified by IPCALL')

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroPick.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroPick.c, line 21):\nLet x = to_uint8(1 + iy_0).\nLet a = pIp_0.F10___GyroPick_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wal(a).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_4 = shift_float32(a_3, 0).\nLet a_5 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_1, a_2, 9), a_4, 9).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_countPick(a).\nLet a_7 = shift_uint8(a_6, 0).\nAssume {\n  Type: is_uint8(iy_0) /\\ is_uint8(Mint_1[shift_uint8(a_6, iy_0)]).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroPick_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, 9).\n  (* Invariant *)\n  Have: (0 <= iy_0) /\\ (iy_0 <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < iy_0) ->\n      ((of_f32(a_5[shift_float32(a_1, i_1)])\n          = of_f32(a_5[shift_float32(a_3, i_1)])) \\/\n       (havoc(Mint_undef_0, Mint_2, a_7, 9)[shift_uint8(a_6, i_1)] <= 5)))).\n  (* Then *)\n  Have: iy_0 <= 8.\n  If lt_f32(to_f32(.0),\n       sub_f32(a_5[shift_float32(a_3, iy_0)], a_5[shift_float32(a_1, iy_0)]))\n  Then {\n    Have: sub_f32(a_5[shift_float32(a_3, iy_0)],\n            a_5[shift_float32(a_1, iy_0)]) = tmpgi_0.\n  }\n  Else {\n    Have: neg_f32(sub_f32(a_5[shift_float32(a_3, iy_0)],\n                    a_5[shift_float32(a_1, iy_0)])) = tmpgi_0.\n  }\n  If lt_f32(to_f32((6442451.0/134217728)), tmpgi_0)\n  Then {\n    Have: havoc(Mint_undef_0, Mint_2, a_7, 9) = Mint_1.\n    If to_uint8(1 + Mint_1[shift_uint8(a_6, iy_0)]) <= 5\n    Then {\n      Let a_8 = shift_uint8(a_6, iy_0).\n      Have: (Mint_1[a_8 <- to_uint8(1 + Mint_1[a_8])] = Mint_0) /\\\n          (a_5 = Mf32_2).\n      Have: Mf32_2[shift_float32(a_3, iy_0)\n              <- Mf32_2[shift_float32(a_1, iy_0)]] = Mf32_0.\n    }\n    Else {\n      Have: a_5 = Mf32_3.\n      Have: Mf32_3[shift_float32(a_1, iy_0)\n              <- Mf32_3[shift_float32(a_3, iy_0)]] = Mf32_0.\n      Have: Mint_1[a_8 <- 0] = Mint_0.\n    }\n  }\n  Else {\n    Have: (havoc(Mint_undef_0, Mint_2, a_7, 9) = Mint_3) /\\ (a_5 = Mf32_4).\n    Have: Mf32_4[shift_float32(a_1, iy_0)\n            <- Mf32_4[shift_float32(a_3, iy_0)]] = Mf32_0.\n    Have: Mint_3[a_8 <- 0] = Mint_0.\n  }\n  (* Invariant *)\n  Have: x <= 9.\n}\nProve: (of_f32(Mf32_0[shift_float32(a_1, i)])\n          = of_f32(Mf32_0[shift_float32(a_3, i)])) \\/\n    (Mint_0[shift_uint8(a_6, i)] <= 5).\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/GyroPick.c at line: 21', 'Error line content: loop invariant \\forall integer k; 0 <= k < iy ==>')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: MatrixInv33F.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 44):\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a_2, 6).\nLet a_11 = shift_float32(a_2, 3).\nLet a_12 = sub_f32(mul_f32(m_2[a_5], m_2[a_10]),\n             mul_f32(m_2[a_11], m_2[a_4])).\nLet m_3 = m_2[shift_float32(a, 3) <- a_12].\nLet a_13 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_13], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_10]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_11]),\n                 mul_f32(m_4[a_13], m_4[a_5]))].\nLet a_14 = sub_f32(mul_f32(m_5[a_11], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_10])).\nLet m_6 = m_5[shift_float32(a, 6) <- a_14].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_10]),\n                 mul_f32(m_6[a_13], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_13], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_11]))].\nLet r = of_f32(add_f32(add_f32(mul_f32(m_8[a_13], a_7),\n                         mul_f32(m_8[a_9], a_12)), mul_f32(m_8[a_8], a_14))).\nLet a_15 = pIp_0.F10___MatrixInv33F_ret.\nLet x = to_sint8(1 + i).\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_15.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_13, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_15, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), to_f64(r))\n  Else {\n    (* Then *)\n    Have: lt_f64(to_f64(r),\n            to_f64((-4722366482869645.0/4722366482869645213696))).\n  }\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. let a_16 = shift_float32(a, i_1) in ((0 <= i_1) ->\n      ((i_1 < i) ->\n      ((of_f32(Mf32_0[a_16]) / r)\n         = of_f32(havoc(Mf32_undef_0, m_8, a_1, 9)[a_16])))).\n  (* Then *)\n  Have: i <= 8.\n}\nProve: (0 <= x) /\\ (x <= 9).\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/MatrixInv33F.c at line: 44', 'Error line content: loop invariant 0 <= i <= 9;')
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 45):\nLet x = to_sint8(1 + i_1).\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a_2, 6).\nLet a_11 = shift_float32(a_2, 3).\nLet a_12 = sub_f32(mul_f32(m_2[a_5], m_2[a_10]),\n             mul_f32(m_2[a_11], m_2[a_4])).\nLet m_3 = m_2[shift_float32(a, 3) <- a_12].\nLet a_13 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_13], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_10]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_11]),\n                 mul_f32(m_4[a_13], m_4[a_5]))].\nLet a_14 = sub_f32(mul_f32(m_5[a_11], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_10])).\nLet m_6 = m_5[shift_float32(a, 6) <- a_14].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_10]),\n                 mul_f32(m_6[a_13], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_13], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_11]))].\nLet a_15 = add_f32(add_f32(mul_f32(m_8[a_13], a_7), mul_f32(m_8[a_9], a_12)),\n             mul_f32(m_8[a_8], a_14)).\nLet r = of_f32(a_15).\nLet a_16 = havoc(Mf32_undef_0, m_8, a_1, 9).\nLet a_17 = pIp_0.F10___MatrixInv33F_ret.\nLet a_18 = shift_float32(a, i).\nLet a_19 = shift_float32(a, i_1).\nAssume {\n  Type: is_sint8(i_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_17.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x) /\\ is_sint8(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_13, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_17, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), to_f64(r))\n  Else {\n    (* Then *)\n    Have: lt_f64(to_f64(r),\n            to_f64((-4722366482869645.0/4722366482869645213696))).\n  }\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= 9).\n  (* Invariant *)\n  Have: forall i_2 : Z. let a_20 = shift_float32(a, i_2) in ((0 <= i_2) ->\n      ((i_2 < i_1) -> ((of_f32(Mf32_0[a_20]) / r) = of_f32(a_16[a_20])))).\n  (* Then *)\n  Have: i_1 <= 8.\n  (* Invariant *)\n  Have: (0 <= x) /\\ (x <= 9).\n}\nProve: (of_f32(Mf32_0[a_18]) / r)\n         = of_f32(a_16[a_19 <- div_f32(a_16[a_19], a_15)][a_18]).\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/MatrixInv33F.c at line: 45', 'Error line content: loop invariant \\forall siint08 j; 0 <= j < i ==> pIp->inv[j] == \\at(pIp->inv[j], Pre) / rank;')
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 57):\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a_2, 6).\nLet a_11 = shift_float32(a_2, 3).\nLet a_12 = sub_f32(mul_f32(m_2[a_5], m_2[a_10]),\n             mul_f32(m_2[a_11], m_2[a_4])).\nLet m_3 = m_2[shift_float32(a, 3) <- a_12].\nLet a_13 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_13], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_10]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_11]),\n                 mul_f32(m_4[a_13], m_4[a_5]))].\nLet a_14 = sub_f32(mul_f32(m_5[a_11], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_10])).\nLet m_6 = m_5[shift_float32(a, 6) <- a_14].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_10]),\n                 mul_f32(m_6[a_13], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_13], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_11]))].\nLet a_15 = to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_13], a_7),\n                                   mul_f32(m_8[a_9], a_12)),\n                           mul_f32(m_8[a_8], a_14)))).\nLet a_16 = pIp_0.F10___MatrixInv33F_ret.\nLet x = to_sint8(1 + i).\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_16.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_13, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_16, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  (* Else *)\n  Have: !lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), a_15).\n  (* Else *)\n  Have: !lt_f64(a_15, to_f64((-4722366482869645.0/4722366482869645213696))).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (of_f32(havoc(Mf32_undef_0, m_8, a_1, 9)[shift_float32(a, i_1)])\n         = of_f32(Mf32_0[shift_float32(a_2, i_1)])))).\n  (* Then *)\n  Have: i <= 8.\n}\nProve: (0 <= x) /\\ (x <= 9).\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/MatrixInv33F.c at line: 57', 'Error line content: loop invariant 0 <= i <= 9;')
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 58):\nLet x = to_sint8(1 + i).\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a_2, 6).\nLet a_11 = shift_float32(a_2, 3).\nLet a_12 = sub_f32(mul_f32(m_2[a_5], m_2[a_10]),\n             mul_f32(m_2[a_11], m_2[a_4])).\nLet m_3 = m_2[shift_float32(a, 3) <- a_12].\nLet a_13 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_13], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_10]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_11]),\n                 mul_f32(m_4[a_13], m_4[a_5]))].\nLet a_14 = sub_f32(mul_f32(m_5[a_11], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_10])).\nLet m_6 = m_5[shift_float32(a, 6) <- a_14].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_10]),\n                 mul_f32(m_6[a_13], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_13], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_11]))].\nLet a_15 = havoc(Mf32_undef_0, m_8, a_1, 9).\nLet a_16 = to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_13], a_7),\n                                   mul_f32(m_8[a_9], a_12)),\n                           mul_f32(m_8[a_8], a_14)))).\nLet a_17 = pIp_0.F10___MatrixInv33F_ret.\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_17.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x) /\\ is_sint8(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_13, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_17, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  (* Else *)\n  Have: !lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), a_16).\n  (* Else *)\n  Have: !lt_f64(a_16, to_f64((-4722366482869645.0/4722366482869645213696))).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->\n      (of_f32(a_15[shift_float32(a, i_2)])\n         = of_f32(Mf32_0[shift_float32(a_2, i_2)])))).\n  (* Then *)\n  Have: i <= 8.\n  (* Invariant *)\n  Have: (0 <= x) /\\ (x <= 9).\n}\nProve: of_f32(a_15[shift_float32(a, i) <- a_15[shift_float32(a_2, i)]]\n                [shift_float32(a, i_1)])\n         = of_f32(Mf32_0[shift_float32(a_2, i_1)]).\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/MatrixInv33F.c at line: 58', 'Error line content: loop invariant \\forall siint08 j; 0 <= j < i ==> pIp->inv[j] == \\at(pIp->src[j], Pre);')

Loop Invariant Results:
- False
- False
- False
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/MatrixInv33F.c, line 15) in 'MatrixInv33FFun':\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a, 3).\nLet a_11 = shift_float32(a_2, 6).\nLet a_12 = shift_float32(a_2, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_5], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_4])).\nLet m_3 = m_2[a_10 <- a_13].\nLet a_14 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_5]))].\nLet a_15 = shift_float32(a, 6).\nLet a_16 = sub_f32(mul_f32(m_5[a_12], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_11])).\nLet m_6 = m_5[a_15 <- a_16].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_12]))].\nLet a_17 = pIp_0.F10___MatrixInv33F_ret.\nLet a_18 = pIp_1.F10___MatrixInv33F_src.\nAssume {\n  Type: is_sint8(i_1) /\\ is_sint8(i_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_17.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: ((pIp_1.F10___MatrixInv33F_bAbleInv) = 144) /\\ (0 <= i) /\\ (i <= 8).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_17, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)),\n       to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_7),\n                               mul_f32(m_8[a_9], a_13)),\n                       mul_f32(m_8[a_8], a_16)))))\n  Then {\n    Have: ({ pIp_0 with F10___MatrixInv33F_bAbleInv = 144 }) = pIp_1.\n    (* Loop assigns ... *)\n    Have: havoc(Mf32_undef_0, m_8, a_1, 9) = Mf32_1.\n    (* Invariant *)\n    Have: (0 <= i_1) /\\ (i_1 <= 9).\n    (* Invariant *)\n    Have: forall i_3 : Z. let a_19 = shift_float32(a, i_3) in ((0 <= i_3) ->\n        ((i_3 < i_1) -> (is_sint8(i_3) ->\n        ((of_f32(Mf32_0[a_19])\n          / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_7),\n                             mul_f32(m_8[a_9], a_13)),\n                     mul_f32(m_8[a_8], a_16)))) = of_f32(Mf32_1[a_19]))))).\n    (* Else *)\n    Have: 9 <= i_1.\n  }\n  Else {\n    If lt_f64(to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_7),\n                                      mul_f32(m_8[a_9], a_13)),\n                              mul_f32(m_8[a_8], a_16)))),\n         to_f64((-4722366482869645.0/4722366482869645213696)))\n    Then {\n      Have: ({ pIp_0 with F10___MatrixInv33F_bAbleInv = 144 }) = pIp_1.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_0, m_8, a_1, 9) = Mf32_1.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= 9).\n      (* Invariant *)\n      Have: forall i_3 : Z. let a_19 = shift_float32(a, i_3) in\n          ((0 <= i_3) -> ((i_3 < i_1) -> (is_sint8(i_3) ->\n          ((of_f32(Mf32_0[a_19])\n            / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_7),\n                               mul_f32(m_8[a_9], a_13)),\n                       mul_f32(m_8[a_8], a_16)))) = of_f32(Mf32_1[a_19]))))).\n      (* Else *)\n      Have: 9 <= i_1.\n    }\n    Else {\n      Have: ({ pIp_0 with F10___MatrixInv33F_bAbleInv = 0 }) = pIp_1.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_1, m_8, a_1, 9) = Mf32_1.\n      (* Invariant *)\n      Have: (0 <= i_2) /\\ (i_2 <= 9).\n      (* Invariant *)\n      Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) -> (is_sint8(i_3) ->\n          (of_f32(Mf32_1[shift_float32(a, i_3)])\n             = of_f32(Mf32_0[shift_float32(a_2, i_3)]))))).\n      (* Else *)\n      Have: 9 <= i_2.\n    }\n  }\n}\nProve: (of_f32(Mf32_0[shift_float32(a, i)])\n        / ((of_f32(Mf32_0[a_1]) * of_f32(Mf32_1[shift_float32(a_18, 0)]))\n           + (of_f32(Mf32_0[a_10]) * of_f32(Mf32_1[shift_float32(a_18, 1)]))\n           + (of_f32(Mf32_0[a_15]) * of_f32(Mf32_1[shift_float32(a_18, 2)]))))\n         = of_f32(Mf32_1[shift_float32(pIp_1.F10___MatrixInv33F_inv, i)]).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/MatrixInv33F.c at line: 15', 'Error line content: ensures pIp->bAbleInv == TRUE32 ==>')
- ("Goal Post-condition (file Output/MatrixInv33F.c, line 17) in 'MatrixInv33FFun':\nLet a = pIp_0.F10___MatrixInv33F_inv.\nLet a_1 = shift_float32(a, 0).\nLet a_2 = pIp_0.F10___MatrixInv33F_src.\nLet a_3 = shift_float32(a_2, 4).\nLet a_4 = shift_float32(a_2, 8).\nLet a_5 = shift_float32(a_2, 5).\nLet a_6 = shift_float32(a_2, 7).\nLet a_7 = sub_f32(mul_f32(Mf32_0[a_3], Mf32_0[a_4]),\n            mul_f32(Mf32_0[a_5], Mf32_0[a_6])).\nLet m = Mf32_0[a_1 <- a_7].\nLet a_8 = shift_float32(a_2, 2).\nLet a_9 = shift_float32(a_2, 1).\nLet m_1 = m[shift_float32(a, 1)\n            <- sub_f32(mul_f32(m[a_8], m[a_6]), mul_f32(m[a_9], m[a_4]))].\nLet m_2 = m_1[shift_float32(a, 2)\n            <- sub_f32(mul_f32(m_1[a_9], m_1[a_5]),\n                 mul_f32(m_1[a_8], m_1[a_3]))].\nLet a_10 = shift_float32(a_2, 6).\nLet a_11 = shift_float32(a_2, 3).\nLet a_12 = sub_f32(mul_f32(m_2[a_5], m_2[a_10]),\n             mul_f32(m_2[a_11], m_2[a_4])).\nLet m_3 = m_2[shift_float32(a, 3) <- a_12].\nLet a_13 = shift_float32(a_2, 0).\nLet m_4 = m_3[shift_float32(a, 4)\n            <- sub_f32(mul_f32(m_3[a_13], m_3[a_4]),\n                 mul_f32(m_3[a_8], m_3[a_10]))].\nLet m_5 = m_4[shift_float32(a, 5)\n            <- sub_f32(mul_f32(m_4[a_8], m_4[a_11]),\n                 mul_f32(m_4[a_13], m_4[a_5]))].\nLet a_14 = sub_f32(mul_f32(m_5[a_11], m_5[a_6]),\n             mul_f32(m_5[a_3], m_5[a_10])).\nLet m_6 = m_5[shift_float32(a, 6) <- a_14].\nLet m_7 = m_6[shift_float32(a, 7)\n            <- sub_f32(mul_f32(m_6[a_9], m_6[a_10]),\n                 mul_f32(m_6[a_13], m_6[a_6]))].\nLet m_8 = m_7[shift_float32(a, 8)\n            <- sub_f32(mul_f32(m_7[a_13], m_7[a_3]),\n                 mul_f32(m_7[a_9], m_7[a_11]))].\nLet a_15 = havoc(Mf32_undef_0, m_8, a_1, 9).\nLet a_16 = pIp_0.F10___MatrixInv33F_ret.\nLet a_17 = to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_13], a_7),\n                                   mul_f32(m_8[a_9], a_12)),\n                           mul_f32(m_8[a_8], a_14)))).\nAssume {\n  Type: is_sint8(i_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixInv33F_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_16.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: !lt_f64(a_17, to_f64((-4722366482869645.0/4722366482869645213696))).\n  (* Residual *)\n  When: !lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), a_17).\n  (* Goal *)\n  When: (0 <= i) /\\ (i <= 8).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_13, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_16, 1).\n  Have: ({ Init_pIp_0 with Init_F10___MatrixInv33F_bAbleInv = true }) =\n      Init_pIp_0.\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= 9).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) -> (is_sint8(i_2) ->\n      (of_f32(a_15[shift_float32(a, i_2)])\n         = of_f32(Mf32_0[shift_float32(a_2, i_2)]))))).\n  (* Else *)\n  Have: 9 <= i_1.\n}\nProve: of_f32(a_15[shift_float32(a, i)])\n         = of_f32(Mf32_0[shift_float32(a_2, i)]).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/MatrixInv33F.c at line: 17', 'Error line content: ensures pIp->bAbleInv == FALSE32 ==>')

Postcond Results:
- True
- False
- False

------------------------------------------------
File Name: Input.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: PeriodControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GetUartData.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: GyroStateGet.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 40):\nLet x = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_65).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_2 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_3 = to_uint64(2 + to_uint64(2 * i_1)).\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(x) /\\ is_uint8(Mint_0[shift_uint8(a, x_3)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, to_uint64(1 + x_3))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= x).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n      valid_rw(Malloc_1, shift_float32(pIp_2.F14___GyroStateGet_wa, i_2), 1))).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n      valid_rw(Malloc_1,\n        shift_uint64(pIp_2.F14___GyroStateGet_stateFlag, i_2), 1))).\n  (* Then *)\n  Have: i_1 < x.\n}\nProve: to_uint64(1 + i) <= x_2.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 40', 'Error line content: loop invariant 0 <= i <= pIp->NumGyro;')
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 41):\nLet x = to_uint64(1 + i_2).\nLet x_1 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_2 = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_65).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_3 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_4 = to_uint64(2 + to_uint64(2 * i_1)).\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(i_2) /\\ is_uint64(x_3) /\\\n      is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint8(Mint_0[shift_uint8(a, x_4)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, to_uint64(1 + x_4))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_3).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->\n      valid_rw(Malloc_2, shift_float32(pIp_2.F14___GyroStateGet_wa, i_3), 1))).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->\n      valid_rw(Malloc_2,\n        shift_uint64(pIp_2.F14___GyroStateGet_stateFlag, i_3), 1))).\n  (* Then *)\n  Have: i_1 < x_2.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: valid_rw(Malloc_0[L_DiviationToFloat_ret_77 <- 0]\n                  [L_ipDiviationToFloat_78 <- 0],\n         shift_float32(pIp_0.F14___GyroStateGet_wa, i), 1).\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 41', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> \\valid(pIp->wa + j);')
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 42):\nLet x = to_uint64(1 + i_2).\nLet m = Malloc_0[L_DiviationToFloat_ret_77 <- 0][L_ipDiviationToFloat_78\n          <- 0].\nLet x_1 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_2 = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_65).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_3 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_4 = to_uint64(2 + to_uint64(2 * i_1)).\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(i_2) /\\ is_uint64(x_3) /\\\n      is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint8(Mint_0[shift_uint8(a, x_4)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, to_uint64(1 + x_4))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_3).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->\n      valid_rw(Malloc_2, shift_float32(pIp_2.F14___GyroStateGet_wa, i_3), 1))).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_1) ->\n      valid_rw(Malloc_2,\n        shift_uint64(pIp_2.F14___GyroStateGet_stateFlag, i_3), 1))).\n  (* Then *)\n  Have: i_1 < x_2.\n  (* Invariant *)\n  Have: x <= x_1.\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < x) ->\n      valid_rw(m, shift_float32(pIp_0.F14___GyroStateGet_wa, i_3), 1))).\n}\nProve: valid_rw(m, shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, i), 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 42', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> \\valid(pIp->stateFlag + j);')

Loop Invariant Results:
- False
- False
- False

Assertion Errors:
- ("Goal Assigns (file Output/GyroStateGet.c, line 14) in 'GyroStateGetFun' (3/7):\nEffect at line 27\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 14', 'Error line content: assigns pIp->wa[0 .. pIp->NumGyro - 1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 14) in 'GyroStateGetFun' (4/7):\nEffect at line 30\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 14', 'Error line content: assigns pIp->wa[0 .. pIp->NumGyro - 1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 14) in 'GyroStateGetFun' (5/7):\nEffect at line 34\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 14', 'Error line content: assigns pIp->wa[0 .. pIp->NumGyro - 1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 14) in 'GyroStateGetFun' (7/7):\nEffect at line 46\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_65).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet a_2 = shift_uint64(a_1, 0).\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_3 = pIp_1.F14___GyroStateGet_wa.\nLet a_4 = shift_float32(a_3, 0).\nLet a_5 = shift_float32(pIp_0.F14___GyroStateGet_wa, 0).\nLet a_6 = shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, 0).\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: (((!invalid(Malloc_0, a_5, x)) ->\n        (included(a_5, x, a_4, x_1) \\/ included(a_5, x, a_2, x_1)))) /\\\n    (((!invalid(Malloc_0, a_6, x)) ->\n     (included(a_6, x, a_4, x_1) \\/ included(a_6, x, a_2, x_1)))).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 14', 'Error line content: assigns pIp->wa[0 .. pIp->NumGyro - 1];')

Assertion Results:
- True
- True
- True
- False
- False
- False
- True
- False

Postcond Errors:
- ("Goal Post-condition (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun':\nLet a = global(L_gyroRecvData_65).\nLet x = Mint_0[shift_uint8(a, 0)].\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(x_1) /\\ is_uint8(x) /\\\n      is_uint8(Mint_0[shift_uint8(a, 1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < (pIp_0.F14___GyroStateGet_NumGyro)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_1).\n  If x = 235\n  Then {\n    If Mint_0[shift_uint8(a, 1)] = 145\n    Then {\n      Let x_2 = pIp_0.F14___GyroStateGet_NumGyro.\n      (* Invariant *)\n      Have: 0 <= x_2.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= x_2).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          valid_rw(Malloc_0, shift_float32(pIp_0.F14___GyroStateGet_wa, i_2),\n            1))).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          valid_rw(Malloc_0,\n            shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, i_2), 1))).\n      (* Else *)\n      Have: x_2 <= i_1.\n    }\n  }\n}\nProve: valid_rw(Malloc_0[L_gyroRecvData_65 <- 0][L_gyroSendData_66 <- 0]\n                  [L_ipSendUartData_67 <- 0][L_ipDelay_68 <- 0]\n                  [L_GetUartData_ret_69 <- 0][L_ipGetUartData_70 <- 0],\n         shift_float32(pIp_0.F14___GyroStateGet_wa, i), 1).\nProver Z3 4.8.12 returns Timeout (Qed:26ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: ensures \\forall integer i; 0 <= i < pIp->NumGyro ==> \\valid(pIp->wa + i);')
- ("Goal Post-condition (file Output/GyroStateGet.c, line 13) in 'GyroStateGetFun':\nLet a = global(L_gyroRecvData_65).\nLet x = Mint_0[shift_uint8(a, 0)].\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(x_1) /\\ is_uint8(x) /\\\n      is_uint8(Mint_0[shift_uint8(a, 1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < (pIp_0.F14___GyroStateGet_NumGyro)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_1).\n  If x = 235\n  Then {\n    If Mint_0[shift_uint8(a, 1)] = 145\n    Then {\n      Let x_2 = pIp_0.F14___GyroStateGet_NumGyro.\n      (* Invariant *)\n      Have: 0 <= x_2.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= x_2).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          valid_rw(Malloc_0, shift_float32(pIp_0.F14___GyroStateGet_wa, i_2),\n            1))).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          valid_rw(Malloc_0,\n            shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, i_2), 1))).\n      (* Else *)\n      Have: x_2 <= i_1.\n    }\n  }\n}\nProve: valid_rw(Malloc_0[L_gyroRecvData_65 <- 0][L_gyroSendData_66 <- 0]\n                  [L_ipSendUartData_67 <- 0][L_ipDelay_68 <- 0]\n                  [L_GetUartData_ret_69 <- 0][L_ipGetUartData_70 <- 0],\n         shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, i), 1).\nProver Z3 4.8.12 returns Timeout (Qed:23ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 13', 'Error line content: ensures \\forall integer i; 0 <= i < pIp->NumGyro ==> \\valid(pIp->stateFlag + i);')

Postcond Results:
- False
- False

------------------------------------------------
File Name: JetDataGet.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/JetDataGet.c, line 12) in 'JetDataGetFun' (2/2):\nEffect at line 35\nProve: false.\nProver Z3 4.8.12 returns Timeout (3s)", 'Error found in file: Output/JetDataGet.c at line: 12', 'Error line content: assigns pIp->mThrDistribute.stateFlag[0 .. 1];')

Assertion Results:
- True
- False

Postcond Errors:
- ("Goal Post-condition (file Output/JetDataGet.c, line 8) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[0].\nAssume {\n  Type: is_uint8(a_1) /\\ is_uint8(a[1]).\n  (* Goal *)\n  When: bit_test(w, 2).\n}\nProve: a_1 = 1.\nProver Z3 4.8.12 returns Timeout (Qed:0.96ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 8', 'Error line content: ensures (ADDR_READ(0xE000) & 0x4) == 0x4 ==> pIp->mThrDistribute.stateFlag[0] == 1;')
- ("Goal Post-condition (file Output/JetDataGet.c, line 9) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[0].\nAssume {\n  Type: is_uint8(a_1) /\\ is_uint8(a[1]).\n  (* Goal *)\n  When: !bit_test(w, 2).\n}\nProve: a_1 = 0.\nProver Z3 4.8.12 returns Timeout (Qed:0.90ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 9', 'Error line content: ensures (ADDR_READ(0xE000) & 0x4) != 0x4 ==> pIp->mThrDistribute.stateFlag[0] == 0;')
- ("Goal Post-condition (file Output/JetDataGet.c, line 10) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[1].\nAssume {\n  Type: is_uint8(a[0]) /\\ is_uint8(a_1).\n  (* Goal *)\n  When: bit_test(w, 3).\n}\nProve: a_1 = 1.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 10', 'Error line content: ensures (ADDR_READ(0xE000) & 0x8) == 0x8 ==> pIp->mThrDistribute.stateFlag[1] == 1;')
- ("Goal Post-condition (file Output/JetDataGet.c, line 11) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[1].\nAssume {\n  Type: is_uint8(a[0]) /\\ is_uint8(a_1).\n  (* Goal *)\n  When: !bit_test(w, 3).\n}\nProve: a_1 = 0.\nProver Z3 4.8.12 returns Timeout (Qed:0.87ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 11', 'Error line content: ensures (ADDR_READ(0xE000) & 0x8) != 0x8 ==> pIp->mThrDistribute.stateFlag[1] == 0;')

Postcond Results:
- False
- False
- False
- False

------------------------------------------------
File Name: SwitchSS.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
- ("Goal Post-condition (file Output/SwitchSS.c, line 7) in 'SwitchSSFun':\nLet x = (pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_0.F10___SwitchSS_fun.base) <= 0.\n}\nProve: (if (x = 1) then 2 else 1) = w.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/SwitchSS.c at line: 7', 'Error line content: ensures *(volatile unsigned int *)0x8000 == (pIp->mDSSData.stateFlag_A == 1 ? 0x2 : 0x1);')

Postcond Results:
- False

------------------------------------------------
File Name: SAMSubModePitch.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (4/21):\nEffect at line 27\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (5/21):\nEffect at line 27\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (6/21):\nEffect at line 27\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (7/21):\nEffect at line 30\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (8/21):\nEffect at line 30\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (9/21):\nEffect at line 30\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (13/21):\nEffect at line 50\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:42ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (14/21):\nEffect at line 50\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:51ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (15/21):\nEffect at line 50\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:51ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (16/21):\nEffect at line 51\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:60ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (17/21):\nEffect at line 51\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:55ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (18/21):\nEffect at line 51\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:52ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (19/21):\nEffect at line 52\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:73ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (20/21):\nEffect at line 52\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:65ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 11) in 'SAMSubModePitchFun' (21/21):\nEffect at line 52\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:78ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 11', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up;')

Assertion Results:
- True
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun':\nLet a = pIp_1.F10___SAMSubModePitch_pSDS.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F10___SAMSubModePitch_pCtrl.\nLet x_1 = pIp_0.F10___SAMSubModePitch_countMode.\nLet x_2 = pIp_1.F10___SAMSubModePitch_countPublic.\nLet x_3 = pIp_0.F10___SAMSubModePitch_countPublic.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x_2) /\\\n      is_uint64(pIp_1.F10___SAMSubModePitch_countMode) /\\\n      is_uint64(pIp_1.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x_3) /\\\n      is_uint64(x_1) /\\ is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 5625.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x = 1\n  Then {\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + x_2)\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: ({ pIp_1 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1 + x_2) }) =\n            pIp_0.\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_0).\n  }\n}\nProve: (x_3 = 0) \\/ (x_3 = (1 + x_2)).\nProver Z3 4.8.12 returns Timeout (Qed:85ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: ensures pIp->countPublic == 0 || pIp->countPublic == \\old(pIp->countPublic) + 1;')
- ("Goal Post-condition (file Output/SAMSubModePitch.c, line 9) in 'SAMSubModePitchFun':\nLet a = pIp_1.F10___SAMSubModePitch_pSDS.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F10___SAMSubModePitch_pCtrl.\nLet x_1 = pIp_0.F10___SAMSubModePitch_countMode.\nLet x_2 = pIp_1.F10___SAMSubModePitch_countMode.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_1.F10___SAMSubModePitch_countPublic) /\\ is_uint64(x_2) /\\\n      is_uint64(pIp_1.F10___SAMSubModePitch_flgMode) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\ is_uint64(x_1) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_flgMode) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 5625.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x = 1\n  Then {\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_1.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: ({ pIp_1 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_1.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_0.\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_0).\n  }\n}\nProve: (x_1 = 0) \\/ (x_1 = x_2) \\/ (x_1 = (1 + x_2)).\nProver Z3 4.8.12 returns Timeout (Qed:73ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 9', 'Error line content: ensures pIp->countMode == 0 || pIp->countMode == \\old(pIp->countMode) || pIp->countMode == \\old(pIp->countMode) + 1;')
- ("Goal Post-condition (file Output/SAMSubModePitch.c, line 10) in 'SAMSubModePitchFun':\nLet a = pIp_1.F10___SAMSubModePitch_pSDS.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F10___SAMSubModePitch_pCtrl.\nLet x_1 = pIp_0.F10___SAMSubModePitch_countMode.\nLet x_2 = pIp_1.F10___SAMSubModePitch_flgMode.\nLet x_3 = pIp_0.F10___SAMSubModePitch_flgMode.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_1.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_1.F10___SAMSubModePitch_countMode) /\\ is_uint64(x_2) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\ is_uint64(x_1) /\\\n      is_uint64(x_3) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 5625.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x = 1\n  Then {\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_1.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: ({ pIp_1 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_1.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_0.\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_0).\n  }\n}\nProve: (x_3 = 34) \\/ (x_3 = 51) \\/ (x_3 = x_2).\nProver Z3 4.8.12 returns Timeout (Qed:77ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 10', 'Error line content: ensures pIp->flgMode == SAM_CRUISE || pIp->flgMode == SAM_ROLL || pIp->flgMode == \\old(pIp->flgMode);')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: SoftFaultProceedSP.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SoftFaultProceedSP.c (with preprocessing)
[kernel] Output/SoftFaultProceedSP.c:22: 
  syntax error:
  Location: line 22, between columns 20 and 21, before or at token: ipSwitchSS
  20        {
  21            case 5:
  22                IPCREATE(SwitchSS, ipSwitchSS);
                            ^
  23                IPCALL(ipSwitchSS);
  24                break;
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrABAutoChoose.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: LimitFloat32.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/LimitFloat32.c, line 7) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_fin.\nLet a_1 = pIp_1.F10___LimitFloat32_fbound.\nLet a_2 = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Residual *)\n  When: !lt_f32(a_1, a).\n  (* Goal *)\n  When: r < of_f32(pIp_0.F10___LimitFloat32_fin).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n      Init_pIp_0.\n  If lt_f32(a, neg_f32(a_1))\n  Then {\n    Have: ({ pIp_1 with F10___LimitFloat32_fvalue = neg_f32(a_1) }) = pIp_0.\n  }\n  Else { Have: ({ pIp_1 with F10___LimitFloat32_fvalue = a }) = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___LimitFloat32_fvalue) = r.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/LimitFloat32.c at line: 7', 'Error line content: ensures (pIp->fin > pIp->fbound) ==> (pIp->fvalue == pIp->fbound);')
- ("Goal Post-condition (file Output/LimitFloat32.c, line 8) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(pIp_0.F10___LimitFloat32_fin) + r) < .0.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: (r + of_f32(pIp_0.F10___LimitFloat32_fvalue)) = .0.\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/LimitFloat32.c at line: 8', 'Error line content: ensures (pIp->fin < -pIp->fbound) ==> (pIp->fvalue == -pIp->fbound);')
- ("Goal Post-condition (file Output/LimitFloat32.c, line 9) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fin).\nLet r_1 = of_f32(pIp_0.F10___LimitFloat32_fbound).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: (r <= r_1) /\\ (.0 <= (r + r_1)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: of_f32(pIp_0.F10___LimitFloat32_fvalue) = r.\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/LimitFloat32.c at line: 9', 'Error line content: ensures (-pIp->fbound <= pIp->fin && pIp->fin <= pIp->fbound) ==> (pIp->fvalue == pIp->fin);')

Postcond Results:
- False
- False
- False
- True

------------------------------------------------
File Name: DevControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'DevControlFun' (1/3):\nEffect at line 12\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(34842), 1).\nProver Z3 4.8.12 returns Timeout (3s)", None, None)
- ("Goal Assigns nothing in 'DevControlFun' (2/3):\nEffect at line 15\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)
- ("Goal Assigns nothing in 'DevControlFun' (3/3):\nEffect at line 18\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32776), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: Tr32Uint08.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True

------------------------------------------------
File Name: LimitCtrlAngleInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 13) in 'LimitCtrlAngleInputFun' (4/7):\nEffect at line 23\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 13', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 13) in 'LimitCtrlAngleInputFun' (5/7):\nEffect at line 25\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 13', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 13) in 'LimitCtrlAngleInputFun' (6/7):\nEffect at line 29\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 13', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 13) in 'LimitCtrlAngleInputFun' (7/7):\nEffect at line 31\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 13', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/LimitCtrlAngleInput.c, line 10) in 'LimitCtrlAngleInputFun':\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                                     0))])\n         <= of_f32(pIp_0.F11___LimitCtrlAngleInput_max).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 10', 'Error line content: ensures pIp->pSCtrl[0].Up <= pIp->max;')
- ("Goal Post-condition (file Output/LimitCtrlAngleInput.c, line 11) in 'LimitCtrlAngleInputFun':\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: of_f32(Mf32_0[global(L_LimitFloat32_ret_1_42)])\n         <= of_f32(pIp_0.F11___LimitCtrlAngleInput_max).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 11', 'Error line content: ensures pIp->pSCtrl[1].Up <= pIp->max;')
- ("Goal Post-condition (file Output/LimitCtrlAngleInput.c, line 12) in 'LimitCtrlAngleInputFun':\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_1 = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a), 0), 2).\n}\nProve: of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                                     2))]) = .0.\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 12', 'Error line content: ensures pIp->pSCtrl[2].Up == 0.0f;')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: SAMSubModeRoll.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (4/22):\nEffect at line 30\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a).\nLet a_2 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a_2, 0).\nLet a_4 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[a_1])\n  Then { Have: Mf32_0[a_1] = tmproyaw_0. }\n  Else { Have: neg_f32(Mf32_0[a_1]) = tmproyaw_0. }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (a_1 = a_4) \\/ (shiftfield_F7_TAG_CONTROLLERIN_Up(a_3) = a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 1)) =\n     a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 2)) =\n     a_4).\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (5/22):\nEffect at line 30\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a).\nLet a_2 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a_2, 0).\nLet a_4 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[a_1])\n  Then { Have: Mf32_0[a_1] = tmproyaw_0. }\n  Else { Have: neg_f32(Mf32_0[a_1]) = tmproyaw_0. }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (a_1 = a_4) \\/ (shiftfield_F7_TAG_CONTROLLERIN_Up(a_3) = a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 1)) =\n     a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 2)) =\n     a_4).\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (6/22):\nEffect at line 30\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a).\nLet a_2 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a_2, 0).\nLet a_4 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[a_1])\n  Then { Have: Mf32_0[a_1] = tmproyaw_0. }\n  Else { Have: neg_f32(Mf32_0[a_1]) = tmproyaw_0. }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (a_1 = a_4) \\/ (shiftfield_F7_TAG_CONTROLLERIN_Up(a_3) = a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 1)) =\n     a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 2)) =\n     a_4).\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (7/22):\nEffect at line 31\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a).\nLet a_2 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a_2, 0).\nLet a_4 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[a_1])\n  Then { Have: Mf32_0[a_1] = tmproyaw_0. }\n  Else { Have: neg_f32(Mf32_0[a_1]) = tmproyaw_0. }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (a_1 = a_4) \\/ (shiftfield_F7_TAG_CONTROLLERIN_Up(a_3) = a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 1)) =\n     a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 2)) =\n     a_4).\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (8/22):\nEffect at line 31\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a).\nLet a_2 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a_2, 0).\nLet a_4 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[a_1])\n  Then { Have: Mf32_0[a_1] = tmproyaw_0. }\n  Else { Have: neg_f32(Mf32_0[a_1]) = tmproyaw_0. }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (a_1 = a_4) \\/ (shiftfield_F7_TAG_CONTROLLERIN_Up(a_3) = a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 1)) =\n     a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 2)) =\n     a_4).\nProver Z3 4.8.12 returns Unknown (Qed:13ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (9/22):\nEffect at line 31\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a).\nLet a_2 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a_2, 0).\nLet a_4 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[a_1])\n  Then { Have: Mf32_0[a_1] = tmproyaw_0. }\n  Else { Have: neg_f32(Mf32_0[a_1]) = tmproyaw_0. }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (a_1 = a_4) \\/ (shiftfield_F7_TAG_CONTROLLERIN_Up(a_3) = a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 1)) =\n     a_4) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2, 2)) =\n     a_4).\nProver Z3 4.8.12 returns Unknown (Qed:15ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (13/22):\nEffect at line 51\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:82ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (14/22):\nEffect at line 51\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:86ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (15/22):\nEffect at line 51\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:79ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (16/22):\nEffect at line 52\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:87ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (17/22):\nEffect at line 52\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:99ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (18/22):\nEffect at line 52\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:103ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (19/22):\nEffect at line 53\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:92ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (20/22):\nEffect at line 53\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:106ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (21/22):\nEffect at line 53\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Timeout (Qed:105ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 13) in 'SAMSubModeRollFun' (22/22):\nEffect at line 61\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else { Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1.\n  }\n  (* Then *)\n  Have: 6251 <= x.\n  Have: ((pIp_1.F11___SAMSubModeRoll_flgPRSAM) = 13107) /\\\n      (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n       Init_pIp_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n      Init_pIp_0.\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:124ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 13', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->flgPRSAM, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->pSDS->royaw;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun':\nLet x = pIp_2.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nLet x_2 = pIp_1.F11___SAMSubModeRoll_countPublic.\nLet x_3 = pIp_0.F11___SAMSubModeRoll_countPublic.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(pIp_1.F11___SAMSubModeRoll_countMode) /\\\n      is_uint64(x_3) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\\n      is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: x_2 <= 16.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + x_2)\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_2.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1 + x_2) }) =\n             pIp_2).\n      }\n    }\n    Else { Have: pIp_2 = pIp_1. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_2).\n  }\n  If 6251 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Malloc_0 = Malloc_1) /\\\n        (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n        Init_pIp_1.\n    If (pIp_3.F11___SAMSubModeRoll_flgPRSAM) = 13107\n    Then {\n      Have: Malloc_1 = Malloc_2.\n      Have: ({ pIp_4 with F11___SAMSubModeRoll_flgPRSAM = 52428 }) = pIp_0.\n    }\n    Else {\n      Let a_2 = Init_pIp_2.Init_F11___SAMSubModeRoll_mFWarning.\n      Have: Init_pIp_1 = Init_pIp_2.\n      Have: ({ Init_pIp_2 with Init_F11___SAMSubModeRoll_flgPRSAM = true }) =\n          Init_pIp_2.\n      Have: ({ Init_pIp_2 with\n               Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_flgups = true\n                                                       } }) = Init_pIp_2.\n      Have: (({ Init_pIp_2 with\n                Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countUPSpc = true\n                                                        } }) = Init_pIp_2) /\\\n          (({ pIp_3 with F11___SAMSubModeRoll_countPublic = 0 ;\n              F11___SAMSubModeRoll_countMode = 0 ;\n              F11___SAMSubModeRoll_flgMode = 17 ;\n              F11___SAMSubModeRoll_flgPRSAM = 13107 ;\n              F11___SAMSubModeRoll_mFWarning = {\n                                                 pIp_3.F11___SAMSubModeRoll_mFWarning with\n                                                 F4_TAG_FAULT_WARNING_flgups = 235 ;\n                                                 F4_TAG_FAULT_WARNING_countUPSpc = 0\n                                                 } }) = pIp_0).\n    }\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_3 = (1 + x_2).\nProver Z3 4.8.12 returns Timeout (Qed:217ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: ensures \\old(pIp->countPublic) <= 16 ==> pIp->countPublic == \\old(pIp->countPublic) + 1;')
- ("Goal Post-condition (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun':\nLet x = pIp_2.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nLet x_2 = pIp_1.F11___SAMSubModeRoll_countPublic.\nLet x_3 = pIp_0.F11___SAMSubModeRoll_countPublic.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(pIp_1.F11___SAMSubModeRoll_countMode) /\\\n      is_uint64(x_3) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countMode) /\\\n      is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: 17 <= x_2.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + x_2)\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_2.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1 + x_2) }) =\n             pIp_2).\n      }\n    }\n    Else { Have: pIp_2 = pIp_1. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_2).\n  }\n  If 6251 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Malloc_0 = Malloc_1) /\\\n        (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n        Init_pIp_1.\n    If (pIp_3.F11___SAMSubModeRoll_flgPRSAM) = 13107\n    Then {\n      Have: Malloc_1 = Malloc_2.\n      Have: ({ pIp_4 with F11___SAMSubModeRoll_flgPRSAM = 52428 }) = pIp_0.\n    }\n    Else {\n      Let a_2 = Init_pIp_2.Init_F11___SAMSubModeRoll_mFWarning.\n      Have: Init_pIp_1 = Init_pIp_2.\n      Have: ({ Init_pIp_2 with Init_F11___SAMSubModeRoll_flgPRSAM = true }) =\n          Init_pIp_2.\n      Have: ({ Init_pIp_2 with\n               Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_flgups = true\n                                                       } }) = Init_pIp_2.\n      Have: (({ Init_pIp_2 with\n                Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countUPSpc = true\n                                                        } }) = Init_pIp_2) /\\\n          (({ pIp_3 with F11___SAMSubModeRoll_countPublic = 0 ;\n              F11___SAMSubModeRoll_countMode = 0 ;\n              F11___SAMSubModeRoll_flgMode = 17 ;\n              F11___SAMSubModeRoll_flgPRSAM = 13107 ;\n              F11___SAMSubModeRoll_mFWarning = {\n                                                 pIp_3.F11___SAMSubModeRoll_mFWarning with\n                                                 F4_TAG_FAULT_WARNING_flgups = 235 ;\n                                                 F4_TAG_FAULT_WARNING_countUPSpc = 0\n                                                 } }) = pIp_0).\n    }\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_3 = 0.\nProver Z3 4.8.12 returns Timeout (Qed:217ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: ensures \\old(pIp->countPublic) > 16 ==> pIp->countPublic == 0;')
- ("Goal Post-condition (file Output/SAMSubModeRoll.c, line 11) in 'SAMSubModeRollFun':\nLet x = pIp_2.F11___SAMSubModeRoll_countMode.\nLet x_1 = pIp_1.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nLet x_2 = pIp_1.F11___SAMSubModeRoll_countMode.\nLet x_3 = pIp_0.F11___SAMSubModeRoll_countMode.\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\ is_uint64(x_3) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: lt_f32(to_f32(1.0), tmproyaw_0).\n  (* Residual *)\n  When: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Goal *)\n  When: x_2 <= 6250.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  If 17 <= to_uint64(1 + x_1)\n  Then {\n    Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_0.\n    Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_0.\n    Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n             F11___SAMSubModeRoll_countMode = 0 ;\n             F11___SAMSubModeRoll_flgMode = 51 }) = pIp_2.\n  }\n  Else {\n    Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = to_uint64(1 + x_1)\n             }) = pIp_2.\n  }\n  If 6251 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Malloc_0 = Malloc_1) /\\\n        (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n        Init_pIp_1.\n    If (pIp_3.F11___SAMSubModeRoll_flgPRSAM) = 13107\n    Then {\n      Have: Malloc_1 = Malloc_2.\n      Have: ({ pIp_4 with F11___SAMSubModeRoll_flgPRSAM = 52428 }) = pIp_0.\n    }\n    Else {\n      Let a_2 = Init_pIp_2.Init_F11___SAMSubModeRoll_mFWarning.\n      Have: Init_pIp_1 = Init_pIp_2.\n      Have: ({ Init_pIp_2 with Init_F11___SAMSubModeRoll_flgPRSAM = true }) =\n          Init_pIp_2.\n      Have: ({ Init_pIp_2 with\n               Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_flgups = true\n                                                       } }) = Init_pIp_2.\n      Have: (({ Init_pIp_2 with\n                Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countUPSpc = true\n                                                        } }) = Init_pIp_2) /\\\n          (({ pIp_3 with F11___SAMSubModeRoll_countPublic = 0 ;\n              F11___SAMSubModeRoll_countMode = 0 ;\n              F11___SAMSubModeRoll_flgMode = 17 ;\n              F11___SAMSubModeRoll_flgPRSAM = 13107 ;\n              F11___SAMSubModeRoll_mFWarning = {\n                                                 pIp_3.F11___SAMSubModeRoll_mFWarning with\n                                                 F4_TAG_FAULT_WARNING_flgups = 235 ;\n                                                 F4_TAG_FAULT_WARNING_countUPSpc = 0\n                                                 } }) = pIp_0).\n    }\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_3 = x_2.\nProver Z3 4.8.12 returns Timeout (Qed:199ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 11', 'Error line content: ensures \\old(pIp->countMode) <= 6250 ==> pIp->countMode == \\old(pIp->countMode);')
- ("Goal Post-condition (file Output/SAMSubModeRoll.c, line 12) in 'SAMSubModeRollFun':\nLet x = pIp_2.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nLet x_2 = pIp_1.F11___SAMSubModeRoll_countMode.\nLet x_3 = pIp_0.F11___SAMSubModeRoll_countMode.\nAssume {\n  Type: is_uint64(pIp_1.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(x_2) /\\ is_uint64(pIp_0.F11___SAMSubModeRoll_countPublic) /\\\n      is_uint64(x_3) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: 6251 <= x_2.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_1.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_2.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_1.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_2).\n      }\n    }\n    Else { Have: pIp_2 = pIp_1. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_2).\n  }\n  If 6251 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Malloc_0 = Malloc_1) /\\\n        (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n        Init_pIp_1.\n    If (pIp_3.F11___SAMSubModeRoll_flgPRSAM) = 13107\n    Then {\n      Have: Malloc_1 = Malloc_2.\n      Have: ({ pIp_4 with F11___SAMSubModeRoll_flgPRSAM = 52428 }) = pIp_0.\n    }\n    Else {\n      Let a_2 = Init_pIp_2.Init_F11___SAMSubModeRoll_mFWarning.\n      Have: Init_pIp_1 = Init_pIp_2.\n      Have: ({ Init_pIp_2 with Init_F11___SAMSubModeRoll_flgPRSAM = true }) =\n          Init_pIp_2.\n      Have: ({ Init_pIp_2 with\n               Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_flgups = true\n                                                       } }) = Init_pIp_2.\n      Have: (({ Init_pIp_2 with\n                Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countUPSpc = true\n                                                        } }) = Init_pIp_2) /\\\n          (({ pIp_3 with F11___SAMSubModeRoll_countPublic = 0 ;\n              F11___SAMSubModeRoll_countMode = 0 ;\n              F11___SAMSubModeRoll_flgMode = 17 ;\n              F11___SAMSubModeRoll_flgPRSAM = 13107 ;\n              F11___SAMSubModeRoll_mFWarning = {\n                                                 pIp_3.F11___SAMSubModeRoll_mFWarning with\n                                                 F4_TAG_FAULT_WARNING_flgups = 235 ;\n                                                 F4_TAG_FAULT_WARNING_countUPSpc = 0\n                                                 } }) = pIp_0).\n    }\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_3 = 0.\nProver Z3 4.8.12 returns Timeout (Qed:240ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 12', 'Error line content: ensures \\old(pIp->countMode) > 6250 ==> pIp->countMode == 0;')

Postcond Results:
- False
- False
- False
- False

------------------------------------------------
File Name: CalculateGyroDg.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CalculateGyroDg.c (with preprocessing)
[kernel:annot-error] Output/CalculateGyroDg.c:16: Warning: 
  unbound logic variable tmpwa. Ignoring logic specification of function CalculateGyroDgFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: DSSDataGet.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (6/16):\nEffect at line 48\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nLet a_1 = addr_of_int(41216).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_flgSP(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_piyaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (7/16):\nEffect at line 51\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (9/16):\nEffect at line 56\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (13/16):\nEffect at line 69\nTags: Case 0.\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (14/16):\nEffect at line 71\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(pIp_0.F12___DSSDataGet_pDSSData).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (a_1 = shiftfield_F5_TAG_DSS_DATA_flgSP(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a)) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (15/16):\nEffect at line 78\nTags: Case 1.\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 8) in 'DSSDataGetFun' (16/16):\nEffect at line 80\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(pIp_0.F12___DSSDataGet_pDSSData).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (a_1 = shiftfield_F5_TAG_DSS_DATA_flgSP(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(a)) \\/\n    (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 8', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP;')

Assertion Results:
- True
- True
- True
- True
- True
- False
- False
- True
- False
- True
- True
- True
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (1/4):\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(v).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Else *)\n  Have: stateFlag_0 <= 0.\n}\nProve: (v = 0) \\/ (v = 1).\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (2/4):\nTags: Default.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(si_1) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)]) /\\\n      is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n  (* Default *)\n  Have: (si_1 != 0) /\\ (si_1 != 1).\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (3/4):\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)]) /\\\n      is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 10) in 'DSSDataGetFun' (4/4):\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)]) /\\\n      is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:16ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 10', 'Error line content: ensures pIp->pDSSData->stateFlag_A == 1 || pIp->pDSSData->stateFlag_A == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (1/4):\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(v).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Else *)\n  Have: stateFlag_0 <= 0.\n}\nProve: (v = 0) \\/ (v = 1).\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (2/4):\nTags: Default.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(si_1) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)]) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n  (* Default *)\n  Have: (si_1 != 0) /\\ (si_1 != 1).\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (3/4):\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)]) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 11) in 'DSSDataGetFun' (4/4):\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)]) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (x = 0) \\/ (x = 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 11', 'Error line content: ensures pIp->pDSSData->stateFlag_B == 1 || pIp->pDSSData->stateFlag_B == 0;')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 12) in 'DSSDataGetFun' (1/4):\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(land(1, lsr(w, 5))).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Else *)\n  Have: stateFlag_0 <= 0.\n}\nProve: bit_test(w, 5) <-> bit_test(w_1, 5).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 12', 'Error line content: ensures pIp->pDSSData->flgSP == ((ADDR_READ(0xE000) >> 5) & 0x01);')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 12) in 'DSSDataGetFun' (2/4):\nTags: Default.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(si_1) /\\ is_uint8(stateFlag_0) /\\\n      is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n  (* Default *)\n  Have: (si_1 != 0) /\\ (si_1 != 1).\n}\nProve: x = land(1, lsr(w, 5)).\nProver Z3 4.8.12 returns Timeout (Qed:16ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 12', 'Error line content: ensures pIp->pDSSData->flgSP == ((ADDR_READ(0xE000) >> 5) & 0x01);')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 12) in 'DSSDataGetFun' (3/4):\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: x = land(1, lsr(w, 5)).\nProver Z3 4.8.12 returns Timeout (Qed:16ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 12', 'Error line content: ensures pIp->pDSSData->flgSP == ((ADDR_READ(0xE000) >> 5) & 0x01);')
- ("Goal Post-condition (file Output/DSSDataGet.c, line 12) in 'DSSDataGetFun' (4/4):\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = pIp_0.F12___DSSDataGet_pDSSData.\nLet x = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)].\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0) /\\ is_uint64(x) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a_1)]) /\\\n      is_uint64(Mint_0[shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a_1)]).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: x = land(1, lsr(w, 5)).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 12', 'Error line content: ensures pIp->pDSSData->flgSP == ((ADDR_READ(0xE000) >> 5) & 0x01);')

Postcond Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

------------------------------------------------
File Name: common.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ModeControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (2/10):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (4/10):\nEffect at line 33\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_65)] = 0. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (5/10):\nEffect at line 42\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_65)] = 17. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (6/10):\nEffect at line 51\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_65)] = 34. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (7/10):\nEffect at line 59\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_65)] = 51. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (8/10):\nEffect at line 63\nLet x = Mint_0[global(L_Tr32Uint08_ret_65)].\nLet a = addr_of_int(32000).\nLet a_1 = global(G_pIp_56).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: (shiftfield_F15___ModeControl_Count160ms(a_1) = a) \\/\n    (shiftfield_F15___ModeControl_countMode(a_1) = a) \\/\n    (shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(shiftfield_F15___ModeControl_mAttitude(a_1)),\n       0) = a) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mDSSData(a_1), 5) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mFWarning(a_1), 12) \\/\n    included(a, 1,\n      shift_S7_TAG_CONTROLLERIN(shiftfield_F15___ModeControl_mController(a_1),\n        0), 3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (9/10):\nEffect at line 63\nLet x = Mint_0[global(L_Tr32Uint08_ret_65)].\nLet a = addr_of_int(32340).\nLet a_1 = global(G_pIp_56).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: (shiftfield_F15___ModeControl_Count160ms(a_1) = a) \\/\n    (shiftfield_F15___ModeControl_countMode(a_1) = a) \\/\n    (shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(shiftfield_F15___ModeControl_mAttitude(a_1)),\n       0) = a) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mDSSData(a_1), 5) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mFWarning(a_1), 12) \\/\n    included(a, 1,\n      shift_S7_TAG_CONTROLLERIN(shiftfield_F15___ModeControl_mController(a_1),\n        0), 3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')
- ("Goal Assigns (file Output/ModeControl.c, line 12) in 'ModeControlFun' (10/10):\nEffect at line 63\nLet x = Mint_0[global(L_Tr32Uint08_ret_65)].\nLet a = addr_of_int(32680).\nLet a_1 = global(G_pIp_56).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: (shiftfield_F15___ModeControl_Count160ms(a_1) = a) \\/\n    (shiftfield_F15___ModeControl_countMode(a_1) = a) \\/\n    (shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(shiftfield_F15___ModeControl_mAttitude(a_1)),\n       0) = a) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mDSSData(a_1), 5) \\/\n    included(a, 1, shiftfield_F15___ModeControl_mFWarning(a_1), 12) \\/\n    included(a, 1,\n      shift_S7_TAG_CONTROLLERIN(shiftfield_F15___ModeControl_mController(a_1),\n        0), 3).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 12', 'Error line content: assigns pIp->countMode, pIp->mAttitude.rate[0..0], pIp->mDSSData, pIp->mController[0], pIp->Count160ms, pIp->mFWarning;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/ModeControl.c, line 11) in 'ModeControlFun':\nLet x = Mint_2[global(L_Tr32Uint08_ret_65)].\nLet a = shiftfield_F15___ModeControl_countMode(global(G_pIp_56)).\nLet x_1 = Mint_1[a].\nLet x_2 = Mint_0[a].\nAssume {\n  Type: is_uint8(x) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(Mint_3[a]).\n  If x = 0\n  Else {\n    If x = 17\n    Else {\n      If x = 34\n      Else {\n        Have: Mint_2 = Mint_4.\n        If Mint_4[global(L_Tr32Uint08_ret_65)] = 51\n        Else {\n          Have: (Mint_4 = Mint_5) /\\\n              (Mint_3[a <- to_uint64(1 + Mint_3[a])] = Mint_0).\n        }\n      }\n    }\n  }\n}\nProve: x_2 = (1 + x_1).\nProver Z3 4.8.12 returns Timeout (Qed:32ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 11', 'Error line content: ensures pIp->countMode == \\old(pIp->countMode) + 1;')

Postcond Results:
- False

------------------------------------------------
File Name: ModPNHP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ModPNHP.c, line 8) in 'ModPNHPFun':\nLet a = pIp_0.F10___ModPNHP_ret.\nLet a_1 = pIp_0.F10___ModPNHP_halfperiod.\nLet r = of_f32(a_1).\nLet a_2 = pIp_0.F10___ModPNHP_x.\nLet a_3 = add_f32(a_2, a_1).\nLet a_4 = mul_f32(to_f32(2.0), a_1).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___ModPNHP_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (2.0 * r * ((of_f32(a_2) + r) / (2.0 * r)))\n         = (r\n            + of_f32(sub_f32(a_2,\n                       sub_f32(a_3, mul_f32(div_f32(a_3, a_4), a_4))))).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/ModPNHP.c at line: 8', 'Error line content: ensures pIp->npp2 == pIp->x - ((pIp->x + pIp->halfperiod) - ((pIp->x + pIp->halfperiod) / (2.0f * pIp->halfperiod)) * (2.0f * pIp->halfperiod));')

Postcond Results:
- True
- False

------------------------------------------------
File Name: SAMSubModeDamp.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SAMSubModeDamp.c (with preprocessing)
[kernel:annot-error] Output/SAMSubModeDamp.c:8: Warning: 
  unbound logic variable fabsmax. Ignoring logic specification of function SAMSubModeDampFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: LimitCtrlRateInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (1/10):\nEffect at line 23\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (2/10):\nEffect at line 25\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (3/10):\nEffect at line 26\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (4/10):\nEffect at line 27\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (5/10):\nEffect at line 31\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (6/10):\nEffect at line 33\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (7/10):\nEffect at line 37\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (8/10):\nEffect at line 39\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (9/10):\nEffect at line 43\nLet a = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 17) in 'LimitCtrlRateInputFun' (10/10):\nEffect at line 45\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: exists i : Z.\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/LimitCtrlRateInput.c, line 14) in 'LimitCtrlRateInputFun':\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                                     0))])\n         <= of_f32(pIp_0.F12___LimitCtrlRateInput_max).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/LimitCtrlRateInput.c at line: 14', 'Error line content: ensures pIp->pSCtrl[0].Ud <= pIp->max;')
- ("Goal Post-condition (file Output/LimitCtrlRateInput.c, line 15) in 'LimitCtrlRateInputFun':\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                                     1))])\n         <= of_f32(pIp_0.F12___LimitCtrlRateInput_max).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.6s)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 15', 'Error line content: ensures pIp->pSCtrl[1].Ud <= pIp->max;')
- ("Goal Post-condition (file Output/LimitCtrlRateInput.c, line 16) in 'LimitCtrlRateInputFun':\nLet a = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F12___LimitCtrlRateInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Ud(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: of_f32(Mf32_0[global(L_LimitFloat32_ret_2_57)])\n         <= of_f32(pIp_0.F12___LimitCtrlRateInput_max).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.5s)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 16', 'Error line content: ensures pIp->pSCtrl[2].Ud <= pIp->max;')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: PseudoRateModulator.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: DiviationToFloat.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/DiviationToFloat.c, line 7) in 'DiviationToFloatFun':\nLet a = pIp_0.F10___DiviationToFloat_ret.\nLet x = pIp_0.F10___DiviationToFloat_input.\nLet x_1 = pIp_0.F10___DiviationToFloat_mask.\nLet x_2 = pIp_0.F10___DiviationToFloat_offset.\nLet r = real_of_int(to_sint32(land(x, x_1) - x_2)).\nLet a_1 = pIp_0.F10___DiviationToFloat_LSB.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___DiviationToFloat_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (r * of_f32(a_1)) = of_f32(mul_f32(to_f32(r), a_1)).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/DiviationToFloat.c at line: 7', 'Error line content: ensures *(pIp->ret) == ((siint16)((pIp->input & pIp->mask) - pIp->offset)) * pIp->LSB;')
- ("Goal Post-condition (file Output/DiviationToFloat.c, line 8) in 'DiviationToFloatFun':\nLet a = pIp_0.F10___DiviationToFloat_ret.\nLet x = pIp_0.F10___DiviationToFloat_input.\nLet x_1 = pIp_0.F10___DiviationToFloat_mask.\nLet x_2 = pIp_0.F10___DiviationToFloat_offset.\nLet r = real_of_int(to_sint32(land(x, x_1) - x_2)).\nLet a_1 = pIp_0.F10___DiviationToFloat_LSB.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___DiviationToFloat_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (r * of_f32(a_1)) = of_f32(mul_f32(to_f32(r), a_1)).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/DiviationToFloat.c at line: 8', 'Error line content: ensures pIp->fresult == ((siint16)((pIp->input & pIp->mask) - pIp->offset)) * pIp->LSB;')

Postcond Results:
- False
- False

------------------------------------------------
File Name: FaultJudgeProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: MatrixTran.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 28):\nLet x = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_1 = pIp_0.F10___MatrixTran_nrow.\nLet x_2 = x_1 * x.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_2).\nLet a_3 = pIp_0.F10___MatrixTran_mat.\nLet x_3 = i * x.\nLet a_4 = havoc(Mf32_undef_1, Mf32_0, a_1, x_2).\nLet a_5 = a_2[shift_float32(a, i + (j * x_1))\n            <- a_2[shift_float32(a_3, j + x_3)]].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < i) /\\ (0 <= i_2) /\\ (i_2 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_2).\n  (* Pre-condition *)\n  Have: 0 < x_1.\n  (* Pre-condition *)\n  Have: 0 < x.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((0 <= i_3) ->\n      ((i_3 < x) ->\n      (of_f32(a_4[shift_float32(a, i_4 + (i_3 * x_1))])\n         = of_f32(a_4[shift_float32(a_3, i_3 + (i_4 * x))])))))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Invariant *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((i_4 < i) -> ((0 <= i_3) ->\n      ((i_3 < x) ->\n      (of_f32(a_2[shift_float32(a, i_4 + (i_3 * x_1))])\n         = of_f32(a_2[shift_float32(a_3, i_3 + (i_4 * x))])))))).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->\n      (of_f32(a_2[shift_float32(a, i + (i_3 * x_1))])\n         = of_f32(a_2[shift_float32(a_3, i_3 + x_3)])))).\n  (* Then *)\n  Have: j < x.\n  (* Invariant *)\n  Have: to_uint8(1 + j) <= x.\n}\nProve: of_f32(a_5[shift_float32(a, i_1 + (i_2 * x_1))])\n         = of_f32(a_5[shift_float32(a_3, i_2 + (i_1 * x))]).\nProver Z3 4.8.12 returns Timeout (Qed:16ms) (2.4s)', 'Error found in file: Output/MatrixTran.c at line: 28', 'Error line content: loop invariant \\forall int k, l; 0 <= k < i && 0 <= l < pIp->ncol ==>')
- ('Goal Establishment of Invariant (file Output/MatrixTran.c, line 28):\nLet x = pIp_0.F10___MatrixTran_nrow.\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = x * x_1.\nLet a_2 = pIp_0.F10___MatrixTran_mat.\nLet a_3 = havoc(Mf32_undef_0, Mf32_0, a_1, x_2).\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < i_2) /\\ (0 <= i_1) /\\ (i_1 < x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_2).\n  (* Pre-condition *)\n  Have: 0 < x.\n  (* Pre-condition *)\n  Have: 0 < x_1.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x).\n  (* Then *)\n  Have: i_2 < x.\n}\nProve: of_f32(a_3[shift_float32(a, i + (i_1 * x))])\n         = of_f32(a_3[shift_float32(a_2, i_1 + (i * x_1))]).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (2.5s)', 'Error found in file: Output/MatrixTran.c at line: 28', 'Error line content: loop invariant \\forall int k, l; 0 <= k < i && 0 <= l < pIp->ncol ==>')
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 30):\nLet x = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_1 = pIp_0.F10___MatrixTran_nrow.\nLet x_2 = x_1 * x.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_2).\nLet a_3 = pIp_0.F10___MatrixTran_mat.\nLet x_3 = i * x.\nLet a_4 = a_2[shift_float32(a, i + (j * x_1))\n            <- a_2[shift_float32(a_3, j + x_3)]].\nLet x_4 = to_uint8(1 + j).\nLet a_5 = havoc(Mf32_undef_1, Mf32_0, a_1, x_2).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x_4) /\\ is_sint32(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_2).\n  (* Pre-condition *)\n  Have: 0 < x_1.\n  (* Pre-condition *)\n  Have: 0 < x.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((0 <= i_2) ->\n      ((i_2 < x) ->\n      (of_f32(a_5[shift_float32(a, i_3 + (i_2 * x_1))])\n         = of_f32(a_5[shift_float32(a_3, i_2 + (i_3 * x))])))))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((0 <= i_2) ->\n      ((i_2 < x) ->\n      (of_f32(a_2[shift_float32(a, i_3 + (i_2 * x_1))])\n         = of_f32(a_2[shift_float32(a_3, i_2 + (i_3 * x))])))))).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->\n      (of_f32(a_2[shift_float32(a, i + (i_2 * x_1))])\n         = of_f32(a_2[shift_float32(a_3, i_2 + x_3)])))).\n  (* Then *)\n  Have: j < x.\n  (* Invariant *)\n  Have: x_4 <= x.\n  (* Invariant *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((i_3 < i) -> ((0 <= i_2) ->\n      ((i_2 < x) ->\n      (of_f32(a_4[shift_float32(a, i_3 + (i_2 * x_1))])\n         = of_f32(a_4[shift_float32(a_3, i_2 + (i_3 * x))])))))).\n}\nProve: of_f32(a_4[shift_float32(a, i + (i_1 * x_1))])\n         = of_f32(a_4[shift_float32(a_3, i_1 + x_3)]).\nProver Z3 4.8.12 returns Timeout (Qed:19ms) (2.5s)', 'Error found in file: Output/MatrixTran.c at line: 30', 'Error line content: loop invariant \\forall int l; 0 <= l < j ==>')

Loop Invariant Results:
- True
- True
- False
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/MatrixTran.c, line 11) in 'MatrixTranFun':\nLet x = pIp_0.F10___MatrixTran_nrow.\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = x * x_1.\nLet a_2 = pIp_0.F10___MatrixTran_mat.\nLet a_3 = havoc(Mf32_undef_0, Mf32_0, a_1, x_2).\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (0 <= i_1) /\\ (i < x) /\\ (i_1 < x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_2).\n  (* Pre-condition *)\n  Have: 0 < x.\n  (* Pre-condition *)\n  Have: 0 < x_1.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x).\n  (* Else *)\n  Have: x <= i_2.\n}\nProve: of_f32(a_3[shift_float32(a, i + (i_1 * x))])\n         = of_f32(a_3[shift_float32(a_2, i_1 + (i * x_1))]).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (2.5s)", 'Error found in file: Output/MatrixTran.c at line: 11', 'Error line content: ensures \\forall int i, j; 0 <= i < pIp->nrow && 0 <= j < pIp->ncol ==>')

Postcond Results:
- False

------------------------------------------------
File Name: CheckCal16.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CheckCal16.c (with preprocessing)
[kernel:annot-error] Output/CheckCal16.c:18: Warning: 
  no such predicate or logic function \sum(set<unint08 const> ). Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: B_TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
