File Name: ThreeAxisController.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (4/13):\nEffect at line 28\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (6/13):\nEffect at line 35\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (8/13):\nEffect at line 42\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (10/13):\nEffect at line 48\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (11/13):\nEffect at line 52\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (12/13):\nEffect at line 56\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (13/13):\nEffect at line 59\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0..2].fy, pIp->mModulator[0..2].u;')

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- True
- False
- True
- False
- True
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TripleFabsMax.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 7) in 'TripleFabsMaxFun':\nLet a = to_f32(.0).\nLet a_1 = pIp_0.F10___TripleFabsMax_fx1.\nLet a_2 = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(a_1).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: r < .0.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  If lt_f32(a_1, a)\n  Then { Have: neg_f32(a_1) = fabsfx1_0. }\n  Else { Have: a_1 = fabsfx1_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fy2, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fz3, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: .0 <= (r + of_f32(pIp_1.F10___TripleFabsMax_tmax)).\nProver Z3 4.8.12 returns Timeout (Qed:50ms) (2.5s)", 'Error found in file: Output/TripleFabsMax.c at line: 7', 'Error line content: ensures \\old(pIp->fx1) < 0.0f ==> pIp->tmax >= -\\old(pIp->fx1);')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 8) in 'TripleFabsMaxFun':\nLet a = to_f32(.0).\nLet a_1 = pIp_0.F10___TripleFabsMax_fx1.\nLet a_2 = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(a_1).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: .0 <= r.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  If lt_f32(a_1, a)\n  Then { Have: neg_f32(a_1) = fabsfx1_0. }\n  Else { Have: a_1 = fabsfx1_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fy2, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fz3, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: r <= of_f32(pIp_1.F10___TripleFabsMax_tmax).\nProver Z3 4.8.12 returns Timeout (Qed:50ms) (2.5s)", 'Error found in file: Output/TripleFabsMax.c at line: 8', 'Error line content: ensures \\old(pIp->fx1) >= 0.0f ==> pIp->tmax >= \\old(pIp->fx1);')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 9) in 'TripleFabsMaxFun':\nLet a = to_f32(.0).\nLet a_1 = pIp_0.F10___TripleFabsMax_fy2.\nLet a_2 = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(a_1).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: r < .0.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  If lt_f32(pIp_0.F10___TripleFabsMax_fx1, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  If lt_f32(a_1, a)\n  Then { Have: neg_f32(a_1) = fabsfy2_0. }\n  Else { Have: a_1 = fabsfy2_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fz3, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: .0 <= (r + of_f32(pIp_1.F10___TripleFabsMax_tmax)).\nProver Z3 4.8.12 returns Timeout (Qed:53ms) (2.5s)", 'Error found in file: Output/TripleFabsMax.c at line: 9', 'Error line content: ensures \\old(pIp->fy2) < 0.0f ==> pIp->tmax >= -\\old(pIp->fy2);')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 10) in 'TripleFabsMaxFun':\nLet a = to_f32(.0).\nLet a_1 = pIp_0.F10___TripleFabsMax_fy2.\nLet a_2 = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(a_1).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: .0 <= r.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  If lt_f32(pIp_0.F10___TripleFabsMax_fx1, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  If lt_f32(a_1, a)\n  Then { Have: neg_f32(a_1) = fabsfy2_0. }\n  Else { Have: a_1 = fabsfy2_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fz3, a)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: r <= of_f32(pIp_1.F10___TripleFabsMax_tmax).\nProver Z3 4.8.12 returns Timeout (Qed:46ms) (2.5s)", 'Error found in file: Output/TripleFabsMax.c at line: 10', 'Error line content: ensures \\old(pIp->fy2) >= 0.0f ==> pIp->tmax >= \\old(pIp->fy2);')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 11) in 'TripleFabsMaxFun':\nLet a = pIp_0.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet a_2 = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(a).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: r < .0.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  If lt_f32(pIp_0.F10___TripleFabsMax_fx1, a_1)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fy2, a_1)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: .0 <= (r + of_f32(pIp_1.F10___TripleFabsMax_tmax)).\nProver Z3 4.8.12 returns Timeout (Qed:67ms) (2.6s)", 'Error found in file: Output/TripleFabsMax.c at line: 11', 'Error line content: ensures \\old(pIp->fz3) < 0.0f ==> pIp->tmax >= -\\old(pIp->fz3);')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 12) in 'TripleFabsMaxFun':\nLet a = pIp_0.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet a_2 = pIp_0.F10___TripleFabsMax_ret.\nLet r = of_f32(a).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: .0 <= r.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  If lt_f32(pIp_0.F10___TripleFabsMax_fx1, a_1)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  If lt_f32(pIp_0.F10___TripleFabsMax_fy2, a_1)\n  Then { Have: neg_f32(pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  Else { Have: (pIp_0.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_0 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_1.\n  }\n  Else { Have: pIp_2 = pIp_1. }\n}\nProve: r <= of_f32(pIp_1.F10___TripleFabsMax_tmax).\nProver Z3 4.8.12 returns Timeout (Qed:61ms) (2.6s)", 'Error found in file: Output/TripleFabsMax.c at line: 12', 'Error line content: ensures \\old(pIp->fz3) >= 0.0f ==> pIp->tmax >= \\old(pIp->fz3);')
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 13) in 'TripleFabsMaxFun':\nLet a = pIp_1.F10___TripleFabsMax_fz3.\nLet a_1 = to_f32(.0).\nLet a_2 = pIp_1.F10___TripleFabsMax_fy2.\nLet a_3 = pIp_1.F10___TripleFabsMax_fx1.\nLet a_4 = pIp_1.F10___TripleFabsMax_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  If lt_f32(a_3, a_1)\n  Then { Have: neg_f32(a_3) = fabsfx1_0. }\n  Else { Have: a_3 = fabsfx1_0. }\n  If lt_f32(a_2, a_1)\n  Then { Have: neg_f32(a_2) = fabsfy2_0. }\n  Else { Have: a_2 = fabsfy2_0. }\n  If lt_f32(a, a_1)\n  Then { Have: neg_f32(a) = fabsfz3_0. }\n  Else { Have: a = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: of_f32(pIp_0.F10___TripleFabsMax_tmax) = Rg.max(RAbs.abs(of_f32(a_3)),\n         Rg.max(RAbs.abs(of_f32(a_2)), RAbs.abs(of_f32(a)))).\nProver Z3 4.8.12 returns Timeout (Qed:73ms) (2.6s)", 'Error found in file: Output/TripleFabsMax.c at line: 13', 'Error line content: ensures pIp->tmax == \\max(\\max(\\abs(\\old(pIp->fx1)), \\abs(\\old(pIp->fy2))), \\abs(\\old(pIp->fz3)));')

Postcond Results:
- False
- False
- False
- False
- False
- False
- False
- True

------------------------------------------------
File Name: MatrixMulti.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixMulti.c, line 55):\nLet x = pIp_0.F10___MatrixMulti_nrc.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_1 = pIp_0.F10___MatrixMulti_nrow.\nLet x_2 = pIp_0.F10___MatrixMulti_ncol.\nLet x_3 = x_1 * x_2.\nLet a_2 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_0, a_1, x_3), a_1,\n            x_2).\nLet a_3 = a_2[a_1 <- v].\nLet a_4 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_5 = pIp_0.F10___MatrixMulti_faciend.\nLet a_6 = a_2[a_1 <- to_f32(.0)].\nLet a_7 = shift_float32(a_4, 0).\nLet a_8 = shift_float32(a_5, 0).\nLet a_9 = add_f32(v, mul_f32(a_3[a_8], a_3[a_7])).\nLet a_10 = a_2[a_1 <- a_9].\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_8, x_1 * x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, x * x_2).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Then *)\n  Have: 0 < x_1.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Then *)\n  Have: 0 < x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (of_f32(L_sum(a_6, a_4, 0, x_2)) * of_f32(L_sum(a_6, a_5, 0, 0)))\n          = .0.\n  (* Invariant *)\n  Have: (of_f32(L_sum(a_3, a_4, 0, x_2)) * of_f32(L_sum(a_3, a_5, 0, 0)))\n          = of_f32(v).\n  (* Then *)\n  Have: 0 < x.\n}\nProve: (of_f32(L_sum(a_10, a_4, 0, x_2)) * of_f32(L_sum(a_10, a_5, 0, 1)))\n         = of_f32(a_9).\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)', 'Error found in file: Output/MatrixMulti.c at line: 55', 'Error line content: loop invariant pIp->product[index] ==')
- ('Goal Establishment of Invariant (file Output/MatrixMulti.c, line 55):\nLet x = pIp_0.F10___MatrixMulti_nrc.\nLet x_1 = pIp_0.F10___MatrixMulti_ncol.\nLet x_2 = pIp_0.F10___MatrixMulti_nrow.\nLet a = pIp_0.F10___MatrixMulti_multiplier.\nLet a_1 = pIp_0.F10___MatrixMulti_faciend.\nLet a_2 = pIp_0.F10___MatrixMulti_product.\nLet a_3 = shift_float32(a_2, 0).\nLet x_3 = x_2 * x_1.\nLet a_4 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_0, a_3, x_3), a_3,\n            x_1)[a_3 <- to_f32(.0)].\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_2.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x_2 * x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), x * x_1).\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Then *)\n  Have: 0 < x_2.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Then *)\n  Have: 0 < x_1.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: (of_f32(L_sum(a_4, a, 0, x_1)) * of_f32(L_sum(a_4, a_1, 0, 0))) = .0.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (2.6s)', 'Error found in file: Output/MatrixMulti.c at line: 55', 'Error line content: loop invariant pIp->product[index] ==')

Loop Invariant Results:
- True
- True
- True
- True
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: InitVar.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (2/13):\nEffect at line 33\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (3/13):\nEffect at line 33\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (4/13):\nEffect at line 33\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (5/13):\nEffect at line 34\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32024), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (6/13):\nEffect at line 34\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32364), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (7/13):\nEffect at line 34\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32704), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (8/13):\nEffect at line 35\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (9/13):\nEffect at line 35\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (10/13):\nEffect at line 35\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0,')

Assertion Results:
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: AppInit.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'AppInitFun' (1/3):\nEffect at line 14\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (2/3):\nEffect at line 18\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.77ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (3/3):\nEffect at line 21\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32899), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: main.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ('Goal Assertion (file Output/main.c, line 29):\nLet a = pIp_1.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1[L_ipAppInit_59 <- 105][L_ipPeriodControl_60 <- 162],\n          a, 1).\n}\nProve: valid_rw(Malloc_0, pIp_0.F12___main_ret, 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)', 'Error found in file: Output/main.c at line: 29', 'Error line content: /*@ assert \\valid(pIp->ret); */')
- ("Goal Assigns (file Output/main.c, line 16) in 'mainFun' (1/3):\nEffect at line 24\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_ipAppInit_59 <- 105][L_ipPeriodControl_60 <- 162],\n          a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 16', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 16) in 'mainFun' (2/3):\nEffect at line 27\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_ipAppInit_59 <- 105][L_ipPeriodControl_60 <- 162],\n          a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 16', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 16) in 'mainFun' (3/3):\nEffect at line 30\nLet a = pIp_0.F12___main_ret.\nLet a_1 = pIp_1.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___main_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_ipAppInit_59 <- 105][L_ipPeriodControl_60 <- 162],\n          a_1, 1).\n  (* Assertion *)\n  Have: valid_rw(Malloc_1, a, 1).\n}\nProve: a = a_1.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 16', 'Error line content: assigns *(pIp->ret);')

Assertion Results:
- True
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CalculateGyroRs.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CalculateGyroRs.c, line 32):\nLet x = to_uint8(1 + j).\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x_1 = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shift_A3_float32(a_2, j).\nLet a_4 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a_3, 0), 3).\nLet a_5 = pIp_0.F13___CalculateGyroRs_VG.\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet x_2 = Mint_0[shift_uint8(a_6, j)].\nLet x_3 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_4 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_5 = Mint_1[a_1].\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_5) /\\\n      is_uint32(x_4) /\\ is_uint32(x_3) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (0 <= i_1) /\\ (i < x) /\\ (i_1 <= 2) /\\ is_uint8(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_6, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((0 <= i_3) -> ((i_4 <= 2) ->\n      ((i_3 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_3\n          + i_4), 5))))).\n  If 6 <= x_5\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_3 != x_4.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Loop assigns ... *)\n  Have: forall a_7 : addr.\n      ((forall i_4,i_3 : Z. ((0 <= i_4) -> ((0 <= i_3) -> ((i_3 <= 2) ->\n        ((i_4 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_4), i_3) != a_7)))))) ->\n      (Mf32_1[a_7] = Mf32_0[a_7])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->\n      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= 2) ->\n       (of_f32(a_5[Mint_0[shift_uint8(a_6, i_3)]][i_4])\n          = of_f32(Mf32_0[shift_float32(shift_A3_float32(a_2, i_3), i_4)]))))))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= 3).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (of_f32(a_4[shift_float32(a_3, i_3)]) = of_f32(a_5[x_2][i_3])))).\n  (* Else *)\n  Have: 3 <= i_2.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_4[shift_float32(shift_A3_float32(a_2, i), i_1)])\n         = of_f32(a_5[Mint_0[shift_uint8(a_6, i)]][i_1]).\nProver Z3 4.8.12 returns Timeout (Qed:64ms) (3s)', 'Error found in file: Output/CalculateGyroRs.c at line: 32', 'Error line content: loop invariant \\forall unint08 m; 0 <= m < j ==>')
- ('Goal Preservation of Invariant (file Output/CalculateGyroRs.c, line 41):\nLet x = to_uint8(1 + i).\nLet a = global(L_Rgtemp_60).\nLet a_1 = shift_A3_float32(a, j).\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a_1, 0), 3).\nLet a_3 = pIp_0.F13___CalculateGyroRs_VG.\nLet a_4 = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a_4).\nLet x_1 = Mint_0[shift_uint8(a_5, j)].\nLet a_6 = a_3[x_1].\nLet a_7 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a_4).\nLet x_2 = Mint_0[a_7].\nLet x_3 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a_4)].\nLet x_4 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a_4)].\nLet x_5 = Mint_1[a_7].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_2) /\\ is_uint8(x_5) /\\\n      is_uint32(x_4) /\\ is_uint32(x_3) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a_4.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x) /\\ is_uint8(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((0 <= i_2) -> ((i_3 <= 2) ->\n      ((i_2 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a_4), i_2\n          + i_3), 5))))).\n  If 6 <= x_5\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_7 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_7 <- Mint_4[a_7]] = Mint_0. }\n  (* Then *)\n  Have: x_3 != x_4.\n  (* Invariant *)\n  Have: 0 <= x_2.\n  (* Loop assigns ... *)\n  Have: forall a_8 : addr.\n      ((forall i_3,i_2 : Z. ((0 <= i_3) -> ((0 <= i_2) -> ((i_2 <= 2) ->\n        ((i_3 <= 4) ->\n        (shift_float32(shift_A3_float32(a, i_3), i_2) != a_8)))))) ->\n      (Mf32_1[a_8] = Mf32_0[a_8])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_2).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->\n      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= 2) ->\n       (of_f32(a_3[Mint_0[shift_uint8(a_5, i_2)]][i_3])\n          = of_f32(Mf32_0[shift_float32(shift_A3_float32(a, i_2), i_3)]))))))).\n  (* Then *)\n  Have: j < x_2.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->\n      (of_f32(a_2[shift_float32(a_1, i_2)]) = of_f32(a_6[i_2])))).\n  (* Then *)\n  Have: i <= 2.\n  (* Invariant *)\n  Have: x <= 3.\n}\nProve: of_f32(a_2[shift_float32(a_1, i) <- a_6[i]][shift_float32(a_1, i_1)])\n         = of_f32(a_6[i_1]).\nProver Z3 4.8.12 returns Timeout (Qed:56ms) (2.6s)', 'Error found in file: Output/CalculateGyroRs.c at line: 41', 'Error line content: loop invariant \\forall unint08 n; 0 <= n < i ==> Rgtemp[j][n] == pIp->VG[k][n];')
- ('Goal Preservation of Invariant (file Output/CalculateGyroRs.c, line 51):\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet x_1 = to_uint8(1 + i).\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shift_A3_float32(a_2, i).\nLet a_4 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a_3, 0), 3).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet x_2 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_3 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(j_1) /\\ is_uint8(x) /\\\n      is_uint32(x_3) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x <= 5.\n  (* Goal *)\n  When: (0 <= i_2) /\\ (x <= i_1) /\\ (i_1 < x_1) /\\ (i_2 <= 2) /\\\n      is_uint8(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_4,i_3 : Z. ((0 <= i_4) -> ((0 <= i_3) -> ((i_4 <= 2) ->\n      ((i_3 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_3\n          + i_4), 5))))).\n  (* Then *)\n  Have: x_2 != x_3.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_6 : addr.\n      ((forall i_4,i_3 : Z. ((0 <= i_4) -> ((0 <= i_3) -> ((i_3 <= 2) ->\n        ((i_4 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_4), i_3) != a_6)))))) ->\n      (Mf32_1[a_6] = Mf32_2[a_6])).\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= x).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j_1) ->\n      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= 2) ->\n       (of_f32((pIp_0.F13___CalculateGyroRs_VG)\n                 [Mint_0[a_1 <- x][shift_uint8(a_5, i_3)]][i_4])\n          = of_f32(Mf32_2[shift_float32(shift_A3_float32(a_2, i_3), i_4)]))))))).\n  (* Else *)\n  Have: x <= j_1.\n  (* Loop assigns ... *)\n  Have: forall a_6 : addr.\n      ((forall i_4,i_3 : Z. ((0 <= i_3) -> ((x <= i_4) -> ((i_3 <= 2) ->\n        ((i_4 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_4), i_3) != a_6)))))) ->\n      (Mf32_2[a_6] = Mf32_0[a_6])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((i_3 < i) -> ((x <= i_3) ->\n      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 <= 2) ->\n       (of_f32(Mf32_0[shift_float32(shift_A3_float32(a_2, i_3), i_4)]) = .0)))))).\n  (* Then *)\n  Have: i <= 4.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 3).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < j) ->\n      (of_f32(a_4[shift_float32(a_3, i_3)]) = .0))).\n  (* Else *)\n  Have: 3 <= j.\n  (* Invariant *)\n  Have: (x <= x_1) /\\ (x_1 <= 5).\n}\nProve: of_f32(a_4[shift_float32(shift_A3_float32(a_2, i_1), i_2)]) = .0.\nProver Z3 4.8.12 returns Timeout (Qed:70ms) (2.6s)', 'Error found in file: Output/CalculateGyroRs.c at line: 51', 'Error line content: loop invariant \\forall unint08 m; pIp->pGyroData->JoinTotal <= m < i ==>')
- ('Goal Preservation of Invariant (file Output/CalculateGyroRs.c, line 58):\nLet x = to_uint8(1 + j).\nLet a = global(L_Rgtemp_60).\nLet a_1 = shift_A3_float32(a, i).\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a_1, 0), 3).\nLet a_3 = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_4 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a_3).\nLet x_1 = Mint_0[a_4].\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a_3).\nLet x_2 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a_3)].\nLet x_3 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a_3)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(j_1) /\\ is_uint8(x_1) /\\\n      is_uint32(x_3) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 5.\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x) /\\ is_uint8(i_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_3,i_2 : Z. ((0 <= i_3) -> ((0 <= i_2) -> ((i_3 <= 2) ->\n      ((i_2 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a_3), i_2\n          + i_3), 5))))).\n  (* Then *)\n  Have: x_2 != x_3.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Loop assigns ... *)\n  Have: forall a_6 : addr.\n      ((forall i_3,i_2 : Z. ((0 <= i_3) -> ((0 <= i_2) -> ((i_2 <= 2) ->\n        ((i_3 <= 4) ->\n        (shift_float32(shift_A3_float32(a, i_3), i_2) != a_6)))))) ->\n      (Mf32_1[a_6] = Mf32_2[a_6])).\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j_1) ->\n      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= 2) ->\n       (of_f32((pIp_0.F13___CalculateGyroRs_VG)\n                 [Mint_0[a_4 <- x_1][shift_uint8(a_5, i_2)]][i_3])\n          = of_f32(Mf32_2[shift_float32(shift_A3_float32(a, i_2), i_3)]))))))).\n  (* Else *)\n  Have: x_1 <= j_1.\n  (* Loop assigns ... *)\n  Have: forall a_6 : addr.\n      ((forall i_3,i_2 : Z. ((0 <= i_2) -> ((x_1 <= i_3) -> ((i_2 <= 2) ->\n        ((i_3 <= 4) ->\n        (shift_float32(shift_A3_float32(a, i_3), i_2) != a_6)))))) ->\n      (Mf32_2[a_6] = Mf32_0[a_6])).\n  (* Invariant *)\n  Have: (x_1 <= i) /\\ (i <= 5).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((i_2 < i) -> ((x_1 <= i_2) ->\n      (forall i_3 : Z. ((0 <= i_3) -> ((i_3 <= 2) ->\n       (of_f32(Mf32_0[shift_float32(shift_A3_float32(a, i_2), i_3)]) = .0)))))).\n  (* Then *)\n  Have: i <= 4.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 3).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < j) ->\n      (of_f32(a_2[shift_float32(a_1, i_2)]) = .0))).\n  (* Then *)\n  Have: j <= 2.\n  (* Invariant *)\n  Have: x <= 3.\n}\nProve: of_f32(a_2[shift_float32(a_1, j) <- to_f32(.0)]\n                [shift_float32(a_1, i_1)]) = .0.\nProver Z3 4.8.12 returns Timeout (Qed:67ms) (3s)', 'Error found in file: Output/CalculateGyroRs.c at line: 58', 'Error line content: loop invariant \\forall unint08 n; 0 <= n < j ==> Rgtemp[i][n] == 0.0f;')

Loop Invariant Results:
- True
- False
- True
- False
- True
- False
- True
- False

Assertion Errors:
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 14) in 'CalculateGyroRsFun' (2/12):\nEffect at line 25\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i_1 <= 2) ->\n      ((i <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i\n          + i_1), 5))))).\n  (* Then *)\n  Have: 6 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:5ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 14', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 14) in 'CalculateGyroRsFun' (3/12):\nEffect at line 25\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i_1 <= 2) ->\n      ((i <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i\n          + i_1), 5))))).\n  (* Else *)\n  Have: x <= 5.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 14', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 14) in 'CalculateGyroRsFun' (8/12):\nEffect at line 68\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_3, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_1\n          + i_2), 5))))).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32((pIp_0.F13___CalculateGyroRs_VG)\n                 [Mint_0[shift_uint8(a_3, i_1)]][i_2])\n          = of_f32(Mf32_1[shift_float32(shift_A3_float32(a_2, i_1), i_2)]))))))).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((i_1 < i) -> ((x <= i_1) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32(Mf32_2[shift_float32(shift_A3_float32(a_2, i_1), i_2)]) = .0)))))).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:97ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 14', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 14) in 'CalculateGyroRsFun' (9/12):\nEffect at line 71\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_3, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_1\n          + i_2), 5))))).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32((pIp_0.F13___CalculateGyroRs_VG)\n                 [Mint_0[shift_uint8(a_3, i_1)]][i_2])\n          = of_f32(Mf32_1[shift_float32(shift_A3_float32(a_2, i_1), i_2)]))))))).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((i_1 < i) -> ((x <= i_1) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32(Mf32_2[shift_float32(shift_A3_float32(a_2, i_1), i_2)]) = .0)))))).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:76ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 14', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 14) in 'CalculateGyroRsFun' (10/12):\nEffect at line 75\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_3, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_1\n          + i_2), 5))))).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32((pIp_0.F13___CalculateGyroRs_VG)\n                 [Mint_0[shift_uint8(a_3, i_1)]][i_2])\n          = of_f32(Mf32_1[shift_float32(shift_A3_float32(a_2, i_1), i_2)]))))))).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((i_1 < i) -> ((x <= i_1) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32(Mf32_2[shift_float32(shift_A3_float32(a_2, i_1), i_2)]) = .0)))))).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:71ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 14', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 14) in 'CalculateGyroRsFun' (11/12):\nEffect at line 78\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet x_1 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_3, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_1\n          + i_2), 5))))).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_0[a_4] = Mf32_1[a_4])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32((pIp_0.F13___CalculateGyroRs_VG)\n                 [Mint_0[shift_uint8(a_3, i_1)]][i_2])\n          = of_f32(Mf32_1[shift_float32(shift_A3_float32(a_2, i_1), i_2)]))))))).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_4 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_4)))))) ->\n      (Mf32_1[a_4] = Mf32_2[a_4])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((i_1 < i) -> ((x <= i_1) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32(Mf32_2[shift_float32(shift_A3_float32(a_2, i_1), i_2)]) = .0)))))).\n  (* Else *)\n  Have: 5 <= i.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:68ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 14', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')
- ("Goal Assigns (file Output/CalculateGyroRs.c, line 14) in 'CalculateGyroRsFun' (12/12):\nEffect at line 81\nLet a = pIp_0.F13___CalculateGyroRs_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet a_2 = global(L_Rgtemp_60).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_4 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a).\nLet x_1 = Mint_2[a_4].\nLet x_2 = Mint_2[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_3 = Mint_1[a_1].\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(pIp_1.F13___CalculateGyroRs_pGyroData).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint32(x_2) /\\ is_uint32(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: 3 <= x.\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_3, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0, shift_A5_float32(a_5, i_1 + i_2), 5))))).\n  If 6 <= x_3\n  Then { Have: Mint_1 = Mint_3. Have: Mint_3[a_1 <- 5] = Mint_0. }\n  Else { Have: Mint_1 = Mint_4. Have: Mint_4[a_1 <- Mint_4[a_1]] = Mint_0. }\n  (* Then *)\n  Have: x_1 != x_2.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Loop assigns ... *)\n  Have: forall a_7 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_7)))))) ->\n      (Mf32_0[a_7] = Mf32_1[a_7])).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32((pIp_0.F13___CalculateGyroRs_VG)\n                 [Mint_0[shift_uint8(a_3, i_1)]][i_2])\n          = of_f32(Mf32_1[shift_float32(shift_A3_float32(a_2, i_1), i_2)]))))))).\n  (* Else *)\n  Have: x <= j.\n  (* Invariant *)\n  Have: x <= 5.\n  (* Loop assigns ... *)\n  Have: forall a_7 : addr.\n      ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x <= i_2) -> ((i_1 <= 2) ->\n        ((i_2 <= 4) ->\n        (shift_float32(shift_A3_float32(a_2, i_2), i_1) != a_7)))))) ->\n      (Mf32_1[a_7] = Mf32_2[a_7])).\n  (* Invariant *)\n  Have: (x <= i) /\\ (i <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((i_1 < i) -> ((x <= i_1) ->\n      (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) ->\n       (of_f32(Mf32_2[shift_float32(shift_A3_float32(a_2, i_1), i_2)]) = .0)))))).\n  (* Else *)\n  Have: 5 <= i.\n}\nProve: (a_4 = a_6) \\/\n    (exists i_2,i_1 : Z.\n     (shift_float32(shift_A5_float32(a_5, i_2), i_1) = a_6) /\\ (0 <= i_2) /\\\n     (0 <= i_1) /\\ (i_2 <= 2) /\\ (i_1 <= 4)).\nProver Z3 4.8.12 returns Unknown (Qed:84ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 14', 'Error line content: assigns pIp->flgGryoCalc, pIp->pGyroData->gyroStatus1, pIp->pGyroData->Rtemp[0..2][0..4];')

Assertion Results:
- True
- False
- False
- True
- True
- True
- True
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/CalculateGyroRs.c, line 13) in 'CalculateGyroRsFun':\nLet a = pIp_1.F13___CalculateGyroRs_pGyroData.\nLet x = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a)].\nLet x_1 = Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a)].\nLet x_2 = Mint_3[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet x_3 = Mint_0\n            [shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(pIp_0.F13___CalculateGyroRs_pGyroData)].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\\n      is_uint8(Mint_2\n                 [shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(pIp_2.F13___CalculateGyroRs_pGyroData)]) /\\\n      is_uint8(x_2) /\\ is_uint32(x_1) /\\ is_uint32(x) /\\ is_uint32(x_3).\n  (* Heap *)\n  Type: (region(pIp_1.F13___CalculateGyroRs_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a), 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_1\n          + i_2), 5))))).\n  If 6 <= x_2\n  Then {\n    Have: Mint_3 = Mint_4.\n    Have: Mint_4[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a) <- 5] =\n        Mint_2.\n  }\n  Else {\n    Let a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\n    Have: Mint_3 = Mint_5.\n    Have: Mint_5[a_1 <- Mint_5[a_1]] = Mint_2.\n  }\n  If x != x_1\n  Then {\n    Let a_2 = pIp_0.F13___CalculateGyroRs_pGyroData.\n    Let x_4 = Mint_2[a_1].\n    Let a_3 = global(L_Rgtemp_60).\n    Let a_4 = { pIp_1 with F13___CalculateGyroRs_flgGryoCalc = 235 }.\n    Have: a_4 = pIp_2.\n    (* Invariant *)\n    Have: 0 <= x_4.\n    (* Loop assigns ... *)\n    Have: forall a_5 : addr.\n        ((forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_1 <= 2) ->\n          ((i_2 <= 4) ->\n          (shift_float32(shift_A3_float32(a_3, i_2), i_1) != a_5)))))) ->\n        (Mf32_0[a_5] = Mf32_1[a_5])).\n    Have: (pIp_3 = pIp_2) /\\ (a_4 = pIp_3).\n    (* Invariant *)\n    Have: (0 <= j) /\\ (j <= x_4).\n    (* Invariant *)\n    Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) -> (is_uint8(i_1) ->\n        (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) -> (is_uint8(i_2) ->\n         (of_f32((pIp_1.F13___CalculateGyroRs_VG)\n                   [Mint_2\n                      [shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a),\n                         i_1)]][i_2])\n            = of_f32(Mf32_1[shift_float32(shift_A3_float32(a_3, i_1), i_2)]))))))))).\n    (* Else *)\n    Have: x_4 <= j.\n    Have: (pIp_4 = pIp_2) /\\ (a_4 = pIp_4).\n    (* Invariant *)\n    Have: x_4 <= 5.\n    (* Loop assigns ... *)\n    Have: forall a_5 : addr.\n        ((forall i_2,i_1 : Z. ((0 <= i_1) -> ((x_4 <= i_2) -> ((i_1 <= 2) ->\n          ((i_2 <= 4) ->\n          (shift_float32(shift_A3_float32(a_3, i_2), i_1) != a_5)))))) ->\n        (Mf32_1[a_5] = Mf32_2[a_5])).\n    (* Invariant *)\n    Have: (x_4 <= i) /\\ (i <= 5).\n    (* Invariant *)\n    Have: forall i_1 : Z. ((i_1 < i) -> ((x_4 <= i_1) -> (is_uint8(i_1) ->\n        (forall i_2 : Z. ((0 <= i_2) -> ((i_2 <= 2) -> (is_uint8(i_2) ->\n         (of_f32(Mf32_2[shift_float32(shift_A3_float32(a_3, i_1), i_2)]) = .0)))))))).\n    (* Else *)\n    Have: 5 <= i.\n    If 3 <= x_4\n    Else { Have: (Mint_6 = Mint_1) /\\ (a_4 = pIp_0). }\n    Have: Mint_6[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus1(a_2)\n            <- Mint_6[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_gyroStatus0(a_2)]] =\n        Mint_0.\n  }\n  Else { Have: (Mint_0 = Mint_1) /\\ (pIp_0 = pIp_1). }\n}\nProve: x_3 = x_1.\nProver Z3 4.8.12 returns Unknown (Qed:119ms)", 'Error found in file: Output/CalculateGyroRs.c at line: 13', 'Error line content: ensures pIp->pGyroData->gyroStatus1 == \\old(pIp->pGyroData->gyroStatus0);')

Postcond Results:
- False

------------------------------------------------
File Name: CheckCal.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CheckCal.c, line 23):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___CheckCal_len.\nLet a = pIp_0.F10___CheckCal_pkv.\nLet x_2 = Mint_0[shift_uint8(a, i)].\nLet x_3 = L_sum(Mint_0, a, 0, i).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: to_uint8(x_2 + x_3) = L_sum(Mint_0, a, 0, x).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)', 'Error found in file: Output/CheckCal.c at line: 23', 'Error line content: loop invariant chksum == sum(pIp->pkv, 0, i);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SendUartData.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: TMProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
- ("Goal Assigns nothing in 'TMProcessFun' (2/41):\nEffect at line 24\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (38/41):\nEffect at line 79\nLet a = global(L_pkv_52).\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (havoc(Mint_undef_0, Mint_0, shift_uint8(a, 0), 32)\n         [shift_uint8(a, i_1)] = 0))).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (41/41):\nEffect at line 85\nLet a = global(L_pkv_52).\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (havoc(Mint_undef_0, Mint_0, shift_uint8(a, 0), 32)\n         [shift_uint8(a, i_1)] = 0))).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:11ms) (3s)", None, None)

Assertion Results:
- True
- False
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- True
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Float.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Tr32Float.c, line 13) in 'Tr32FloatFun' (7/11):\nEffect at line 38\nLet a = pIp_0.F10___Tr32Float_ret.\nLet a_1 = pIp_0.F10___Tr32Float_pA.\nLet a_2 = pIp_0.F10___Tr32Float_pB.\nLet a_3 = pIp_0.F10___Tr32Float_pC.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___Tr32Float_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1) /\\ valid_rw(Malloc_0, a_2, 1) /\\\n      valid_rw(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/Tr32Float.c at line: 13', 'Error line content: assigns *(pIp->pA), *(pIp->pB), *(pIp->pC), *(pIp->ret);')

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True

------------------------------------------------
File Name: NoctrlJudge.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/NoctrlJudge.c, line 16) in 'NoctrlJudgeFun' (2/3):\nEffect at line 27\nProve: false.\nProver Z3 4.8.12 returns Timeout (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 16', 'Error line content: assigns pIp->mFWarning.countAV, pIp->mFWarning.Wav, pIp->nouse;')

Assertion Results:
- True
- False
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GyroChoose.c

Syntax Error:
syntax Error
[kernel] Parsing Output/GyroChoose.c (with preprocessing)
[kernel:annot-error] Output/GyroChoose.c:43: Warning: unexpected token '='
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrusterCtrlLogic.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SAMSubModeCruise.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: GyroProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (2/9):\nEffect at line 23\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData.Gi[0..1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (3/9):\nEffect at line 30\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.88ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData.Gi[0..1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (4/9):\nEffect at line 37\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.89ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData.Gi[0..1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (5/9):\nEffect at line 44\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData.Gi[0..1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (8/9):\nEffect at line 60\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData.Gi[0..1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 12) in 'GyroProceedFun' (9/9):\nEffect at line 74\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 12', 'Error line content: assigns pIp->mGyroData.Gi[0..1];')

Assertion Results:
- True
- False
- False
- False
- False
- True
- True
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Inputproceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Inputproceed.c, line 19) in 'InputproceedFun' (2/4):\nEffect at line 28\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 19', 'Error line content: assigns pIp->mAttitude.angle[0..1], pIp->mAttitude.rate[0..2], pIp->mGyroData.Gi[0..1];')
- ("Goal Assigns (file Output/Inputproceed.c, line 19) in 'InputproceedFun' (4/4):\nEffect at line 32\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 19', 'Error line content: assigns pIp->mAttitude.angle[0..1], pIp->mAttitude.rate[0..2], pIp->mGyroData.Gi[0..1];')

Assertion Results:
- True
- False
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultJudgeSP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 7) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a_1.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_1) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Residual *)\n  When: x_1 <= 33750.\n  If x = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1 + x_2) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_0).\n  }\n  Else {\n    If x_2 != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1\n                                                       + (a_1.F4_TAG_FAULT_WARNING_countSPSeen))\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_2 = pIp_1. }\n    If 3\n         <= ((pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_2 = pIp_3.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_3 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_3.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_0).\n    }\n    Else { Have: pIp_2 = pIp_0. }\n  }\n}\nProve: (x_1 = 0) \\/ (x_1 = (1 + x_2)).\nProver Z3 4.8.12 returns Timeout (Qed:68ms) (3s)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 7', 'Error line content: ensures pIp->mFWarning.countSPLost == 0 || pIp->mFWarning.countSPLost == \\old(pIp->mFWarning.countSPLost) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 8) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet a = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet a_1 = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nLet x_3 = a_1.F4_TAG_FAULT_WARNING_countSPSeen.\nAssume {\n  Type: is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_2) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_3) /\\\n      is_uint32(x) /\\\n      is_uint32((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  If x_1 = 0\n  Then {\n    Let a_2 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: (({ Init_pIp_0 with\n              Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                        } }) = Init_pIp_0) /\\\n        (({ pIp_1 with\n            F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                 F4_TAG_FAULT_WARNING_countSPLost = \n                                                   to_uint32(1\n                                                     + (a_1.F4_TAG_FAULT_WARNING_countSPLost)) ;\n                                                 F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                 } }) = pIp_2).\n  }\n  Else {\n    If (a_1.F4_TAG_FAULT_WARNING_countSPLost) != 0\n    Then {\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_1 with\n              F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = \n                                                     to_uint32(1 + x_3) } }) =\n           pIp_3).\n    }\n    Else { Have: pIp_3 = pIp_1. }\n    If 3\n         <= ((pIp_3.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPSeen)\n    Then {\n      Have: pIp_3 = pIp_4.\n      Have: ({ Init_pIp_0 with\n               Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                         Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                         } }) = Init_pIp_0.\n      Have: (({ Init_pIp_0 with\n                Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                          Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                          } }) = Init_pIp_0) /\\\n          (({ pIp_4 with\n              F10___SoftFaultJudgeSP_mFWarning = {\n                                                   pIp_4.F10___SoftFaultJudgeSP_mFWarning with\n                                                   F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                   F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                   } }) = pIp_2).\n    }\n    Else { Have: pIp_3 = pIp_2. }\n  }\n  If 33751 <= x\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_5).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_5 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_5.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: (x_2 = 0) \\/ (x_2 = (1 + x_3)).\nProver Z3 4.8.12 returns Unknown (Qed:74ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 8', 'Error line content: ensures pIp->mFWarning.countSPSeen == 0 || pIp->mFWarning.countSPSeen == \\old(pIp->mFWarning.countSPSeen) + 1;')

Postcond Results:
- False
- False
- True

------------------------------------------------
File Name: Delay.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: LimitControllerInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitControllerInput.c, line 8) in 'LimitControllerInputFun' (1/2):\nEffect at line 17\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 8', 'Error line content: assigns pIp->mAttitude, pIp->mController[0];')
- ("Goal Assigns (file Output/LimitControllerInput.c, line 8) in 'LimitControllerInputFun' (2/2):\nEffect at line 24\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.71ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 8', 'Error line content: assigns pIp->mAttitude, pIp->mController[0];')

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GyroPick.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroPick.c, line 24):\nLet x = to_uint8(1 + iy_0).\nLet a = pIp_0.F10___GyroPick_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wal(a).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_4 = shift_float32(a_3, 0).\nLet a_5 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_1, a_2, 9), a_4, 9).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_countPick(a).\nLet a_7 = shift_uint8(a_6, 0).\nLet a_8 = shift_uint8(a_6, i).\nAssume {\n  Type: is_uint8(iy_0) /\\ is_uint8(Mint_2[shift_uint8(a_6, iy_0)]).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroPick_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, 9).\n  (* Invariant *)\n  Have: (0 <= iy_0) /\\ (iy_0 <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. let a_9 = shift_uint8(a_6, i_1) in ((0 <= i_1) ->\n      ((i_1 < iy_0) ->\n      (havoc(Mint_undef_0, Mint_1, a_7, 9)[a_9] =\n       (Mint_1[a_9]\n        + (if ((6442451.0/134217728)\n                 < L_abs_diff(of_f32(a_5[shift_float32(a_3, i_1)]),\n                     of_f32(a_5[shift_float32(a_1, i_1)]))) then 1 else 0))))).\n  (* Then *)\n  Have: iy_0 <= 8.\n  If lt_f32(to_f32(.0),\n       sub_f32(a_5[shift_float32(a_3, iy_0)], a_5[shift_float32(a_1, iy_0)]))\n  Then {\n    Have: sub_f32(a_5[shift_float32(a_3, iy_0)],\n            a_5[shift_float32(a_1, iy_0)]) = tmpgi_0.\n  }\n  Else {\n    Have: neg_f32(sub_f32(a_5[shift_float32(a_3, iy_0)],\n                    a_5[shift_float32(a_1, iy_0)])) = tmpgi_0.\n  }\n  If lt_f32(to_f32((6442451.0/134217728)), tmpgi_0)\n  Then {\n    Have: havoc(Mint_undef_0, Mint_1, a_7, 9) = Mint_2.\n    If to_uint8(1 + Mint_2[shift_uint8(a_6, iy_0)]) <= 5\n    Then {\n      Let a_9 = shift_uint8(a_6, iy_0).\n      Have: (Mint_2[a_9 <- to_uint8(1 + Mint_2[a_9])] = Mint_0) /\\\n          (a_5 = Mf32_2).\n      Have: Mf32_2[shift_float32(a_3, iy_0)\n              <- Mf32_2[shift_float32(a_1, iy_0)]] = Mf32_0.\n    }\n    Else {\n      Have: a_5 = Mf32_3.\n      Have: Mf32_3[shift_float32(a_1, iy_0)\n              <- Mf32_3[shift_float32(a_3, iy_0)]] = Mf32_0.\n      Have: Mint_2[a_9 <- 0] = Mint_0.\n    }\n  }\n  Else {\n    Have: (havoc(Mint_undef_0, Mint_1, a_7, 9) = Mint_3) /\\ (a_5 = Mf32_4).\n    Have: Mf32_4[shift_float32(a_1, iy_0)\n            <- Mf32_4[shift_float32(a_3, iy_0)]] = Mf32_0.\n    Have: Mint_3[a_9 <- 0] = Mint_0.\n  }\n  (* Invariant *)\n  Have: x <= 9.\n}\nProve: Mint_0[a_8]\n         = (Mint_1[a_8]\n            + (if ((6442451.0/134217728)\n                     < L_abs_diff(of_f32(Mf32_0[shift_float32(a_3, i)]),\n                         of_f32(Mf32_0[shift_float32(a_1, i)]))) then 1\n               else 0)).\nProver Z3 4.8.12 returns Timeout (Qed:72ms) (3s)', 'Error found in file: Output/GyroPick.c at line: 24', 'Error line content: loop invariant \\forall integer k; 0 <= k < iy ==>')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'TcProcessFun' (1/2):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.84ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TcProcessFun' (2/2):\nEffect at line 31\nAssume { (* Then *) Have: Mint_0[global(L_GetUartData_ret_44)] = 1. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.93ms) (3s)", None, None)

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixInv33F.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 48):\nLet a = global(G_pIp_41).\nLet a_1 = Mptr_0[shiftfield_F10___MatrixInv33F_inv(a)].\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = Mptr_0[shiftfield_F10___MatrixInv33F_src(a)].\nLet a_4 = shift_float32(a_3, 4).\nLet a_5 = shift_float32(a_3, 8).\nLet a_6 = shift_float32(a_3, 5).\nLet a_7 = shift_float32(a_3, 7).\nLet a_8 = sub_f32(mul_f32(Mf32_0[a_4], Mf32_0[a_5]),\n            mul_f32(Mf32_0[a_6], Mf32_0[a_7])).\nLet m = Mf32_0[a_2 <- a_8].\nLet a_9 = shift_float32(a_3, 2).\nLet a_10 = shift_float32(a_3, 1).\nLet m_1 = m[shift_float32(a_1, 1)\n            <- sub_f32(mul_f32(m[a_9], m[a_7]), mul_f32(m[a_10], m[a_5]))].\nLet m_2 = m_1[shift_float32(a_1, 2)\n            <- sub_f32(mul_f32(m_1[a_10], m_1[a_6]),\n                 mul_f32(m_1[a_9], m_1[a_4]))].\nLet a_11 = shift_float32(a_3, 6).\nLet a_12 = shift_float32(a_3, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_6], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_5])).\nLet m_3 = m_2[shift_float32(a_1, 3) <- a_13].\nLet a_14 = shift_float32(a_3, 0).\nLet m_4 = m_3[shift_float32(a_1, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_5]),\n                 mul_f32(m_3[a_9], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a_1, 5)\n            <- sub_f32(mul_f32(m_4[a_9], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_6]))].\nLet a_15 = sub_f32(mul_f32(m_5[a_12], m_5[a_7]),\n             mul_f32(m_5[a_4], m_5[a_11])).\nLet m_6 = m_5[shift_float32(a_1, 6) <- a_15].\nLet m_7 = m_6[shift_float32(a_1, 7)\n            <- sub_f32(mul_f32(m_6[a_10], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_7]))].\nLet m_8 = m_7[shift_float32(a_1, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_4]),\n                 mul_f32(m_7[a_10], m_7[a_12]))].\nLet a_16 = havoc(Mf32_undef_0, m_8, a_2, 9).\nLet r = of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                         mul_f32(m_8[a_10], a_13)), mul_f32(m_8[a_9], a_15))).\nLet x = to_sint8(1 + i).\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: linked(Malloc_0) /\\ framed(Mptr_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, Mptr_0[shiftfield_F10___MatrixInv33F_ret(a)], 1).\n  (* Pre-condition *)\n  Have: valid_rd(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), to_f64(r))\n  Else {\n    (* Then *)\n    Have: lt_f64(to_f64(r),\n            to_f64((-4722366482869645.0/4722366482869645213696))).\n  }\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. let r_1 = of_f32(a_16[shift_float32(a_1, i_1)]) in\n      ((0 <= i_1) -> ((i_1 < i) -> ((r_1 / r) = r_1))).\n  (* Then *)\n  Have: i <= 8.\n}\nProve: (0 <= x) /\\ (x <= 9).\nProver Z3 4.8.12 returns Timeout (Qed:83ms) (2.6s)', 'Error found in file: Output/MatrixInv33F.c at line: 48', 'Error line content: /*@ loop invariant 0 <= i <= 9;')
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 49):\nLet x = to_sint8(1 + i).\nLet a = global(G_pIp_41).\nLet a_1 = Mptr_0[shiftfield_F10___MatrixInv33F_inv(a)].\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = Mptr_0[shiftfield_F10___MatrixInv33F_src(a)].\nLet a_4 = shift_float32(a_3, 4).\nLet a_5 = shift_float32(a_3, 8).\nLet a_6 = shift_float32(a_3, 5).\nLet a_7 = shift_float32(a_3, 7).\nLet a_8 = sub_f32(mul_f32(Mf32_0[a_4], Mf32_0[a_5]),\n            mul_f32(Mf32_0[a_6], Mf32_0[a_7])).\nLet m = Mf32_0[a_2 <- a_8].\nLet a_9 = shift_float32(a_3, 2).\nLet a_10 = shift_float32(a_3, 1).\nLet m_1 = m[shift_float32(a_1, 1)\n            <- sub_f32(mul_f32(m[a_9], m[a_7]), mul_f32(m[a_10], m[a_5]))].\nLet m_2 = m_1[shift_float32(a_1, 2)\n            <- sub_f32(mul_f32(m_1[a_10], m_1[a_6]),\n                 mul_f32(m_1[a_9], m_1[a_4]))].\nLet a_11 = shift_float32(a_3, 6).\nLet a_12 = shift_float32(a_3, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_6], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_5])).\nLet m_3 = m_2[shift_float32(a_1, 3) <- a_13].\nLet a_14 = shift_float32(a_3, 0).\nLet m_4 = m_3[shift_float32(a_1, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_5]),\n                 mul_f32(m_3[a_9], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a_1, 5)\n            <- sub_f32(mul_f32(m_4[a_9], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_6]))].\nLet a_15 = sub_f32(mul_f32(m_5[a_12], m_5[a_7]),\n             mul_f32(m_5[a_4], m_5[a_11])).\nLet m_6 = m_5[shift_float32(a_1, 6) <- a_15].\nLet m_7 = m_6[shift_float32(a_1, 7)\n            <- sub_f32(mul_f32(m_6[a_10], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_7]))].\nLet m_8 = m_7[shift_float32(a_1, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_4]),\n                 mul_f32(m_7[a_10], m_7[a_12]))].\nLet a_16 = havoc(Mf32_undef_0, m_8, a_2, 9).\nLet a_17 = add_f32(add_f32(mul_f32(m_8[a_14], a_8), mul_f32(m_8[a_10], a_13)),\n             mul_f32(m_8[a_9], a_15)).\nLet r = of_f32(a_17).\nLet a_18 = shift_float32(a_1, i).\nLet r_1 = of_f32(a_16[a_18 <- div_f32(a_16[a_18], a_17)]\n                   [shift_float32(a_1, i_1)]).\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: linked(Malloc_0) /\\ framed(Mptr_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, Mptr_0[shiftfield_F10___MatrixInv33F_ret(a)], 1).\n  (* Pre-condition *)\n  Have: valid_rd(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), to_f64(r))\n  Else {\n    (* Then *)\n    Have: lt_f64(to_f64(r),\n            to_f64((-4722366482869645.0/4722366482869645213696))).\n  }\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Invariant *)\n  Have: forall i_2 : Z. let r_2 = of_f32(a_16[shift_float32(a_1, i_2)]) in\n      ((0 <= i_2) -> ((i_2 < i) -> ((r_2 / r) = r_2))).\n  (* Then *)\n  Have: i <= 8.\n  (* Invariant *)\n  Have: (0 <= x) /\\ (x <= 9).\n}\nProve: (r_1 / r) = r_1.\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/MatrixInv33F.c at line: 49', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> pIp->inv[j] == pIp->inv[j] / rank;')
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 60):\nLet a = global(G_pIp_41).\nLet a_1 = Mptr_0[shiftfield_F10___MatrixInv33F_inv(a)].\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = Mptr_0[shiftfield_F10___MatrixInv33F_src(a)].\nLet a_4 = shift_float32(a_3, 4).\nLet a_5 = shift_float32(a_3, 8).\nLet a_6 = shift_float32(a_3, 5).\nLet a_7 = shift_float32(a_3, 7).\nLet a_8 = sub_f32(mul_f32(Mf32_0[a_4], Mf32_0[a_5]),\n            mul_f32(Mf32_0[a_6], Mf32_0[a_7])).\nLet m = Mf32_0[a_2 <- a_8].\nLet a_9 = shift_float32(a_3, 2).\nLet a_10 = shift_float32(a_3, 1).\nLet m_1 = m[shift_float32(a_1, 1)\n            <- sub_f32(mul_f32(m[a_9], m[a_7]), mul_f32(m[a_10], m[a_5]))].\nLet m_2 = m_1[shift_float32(a_1, 2)\n            <- sub_f32(mul_f32(m_1[a_10], m_1[a_6]),\n                 mul_f32(m_1[a_9], m_1[a_4]))].\nLet a_11 = shift_float32(a_3, 6).\nLet a_12 = shift_float32(a_3, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_6], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_5])).\nLet m_3 = m_2[shift_float32(a_1, 3) <- a_13].\nLet a_14 = shift_float32(a_3, 0).\nLet m_4 = m_3[shift_float32(a_1, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_5]),\n                 mul_f32(m_3[a_9], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a_1, 5)\n            <- sub_f32(mul_f32(m_4[a_9], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_6]))].\nLet a_15 = sub_f32(mul_f32(m_5[a_12], m_5[a_7]),\n             mul_f32(m_5[a_4], m_5[a_11])).\nLet m_6 = m_5[shift_float32(a_1, 6) <- a_15].\nLet m_7 = m_6[shift_float32(a_1, 7)\n            <- sub_f32(mul_f32(m_6[a_10], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_7]))].\nLet m_8 = m_7[shift_float32(a_1, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_4]),\n                 mul_f32(m_7[a_10], m_7[a_12]))].\nLet a_16 = havoc(Mf32_undef_0, m_8, a_2, 9).\nLet a_17 = to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                                   mul_f32(m_8[a_10], a_13)),\n                           mul_f32(m_8[a_9], a_15)))).\nLet x = to_sint8(1 + i).\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: linked(Malloc_0) /\\ framed(Mptr_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, Mptr_0[shiftfield_F10___MatrixInv33F_ret(a)], 1).\n  (* Pre-condition *)\n  Have: valid_rd(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Else *)\n  Have: !lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), a_17).\n  (* Else *)\n  Have: !lt_f64(a_17, to_f64((-4722366482869645.0/4722366482869645213696))).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (of_f32(a_16[shift_float32(a_3, i_1)])\n         = of_f32(a_16[shift_float32(a_1, i_1)])))).\n  (* Then *)\n  Have: i <= 8.\n}\nProve: (0 <= x) /\\ (x <= 9).\nProver Z3 4.8.12 returns Timeout (Qed:27ms) (3s)', 'Error found in file: Output/MatrixInv33F.c at line: 60', 'Error line content: /*@ loop invariant 0 <= i <= 9;')
- ('Goal Preservation of Invariant (file Output/MatrixInv33F.c, line 61):\nLet x = to_sint8(1 + i).\nLet a = global(G_pIp_41).\nLet a_1 = Mptr_0[shiftfield_F10___MatrixInv33F_inv(a)].\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = Mptr_0[shiftfield_F10___MatrixInv33F_src(a)].\nLet a_4 = shift_float32(a_3, 4).\nLet a_5 = shift_float32(a_3, 8).\nLet a_6 = shift_float32(a_3, 5).\nLet a_7 = shift_float32(a_3, 7).\nLet a_8 = sub_f32(mul_f32(Mf32_0[a_4], Mf32_0[a_5]),\n            mul_f32(Mf32_0[a_6], Mf32_0[a_7])).\nLet m = Mf32_0[a_2 <- a_8].\nLet a_9 = shift_float32(a_3, 2).\nLet a_10 = shift_float32(a_3, 1).\nLet m_1 = m[shift_float32(a_1, 1)\n            <- sub_f32(mul_f32(m[a_9], m[a_7]), mul_f32(m[a_10], m[a_5]))].\nLet m_2 = m_1[shift_float32(a_1, 2)\n            <- sub_f32(mul_f32(m_1[a_10], m_1[a_6]),\n                 mul_f32(m_1[a_9], m_1[a_4]))].\nLet a_11 = shift_float32(a_3, 6).\nLet a_12 = shift_float32(a_3, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_6], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_5])).\nLet m_3 = m_2[shift_float32(a_1, 3) <- a_13].\nLet a_14 = shift_float32(a_3, 0).\nLet m_4 = m_3[shift_float32(a_1, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_5]),\n                 mul_f32(m_3[a_9], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a_1, 5)\n            <- sub_f32(mul_f32(m_4[a_9], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_6]))].\nLet a_15 = sub_f32(mul_f32(m_5[a_12], m_5[a_7]),\n             mul_f32(m_5[a_4], m_5[a_11])).\nLet m_6 = m_5[shift_float32(a_1, 6) <- a_15].\nLet m_7 = m_6[shift_float32(a_1, 7)\n            <- sub_f32(mul_f32(m_6[a_10], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_7]))].\nLet m_8 = m_7[shift_float32(a_1, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_4]),\n                 mul_f32(m_7[a_10], m_7[a_12]))].\nLet a_16 = havoc(Mf32_undef_0, m_8, a_2, 9).\nLet a_17 = to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                                   mul_f32(m_8[a_10], a_13)),\n                           mul_f32(m_8[a_9], a_15)))).\nLet a_18 = a_16[shift_float32(a_1, i) <- a_16[shift_float32(a_3, i)]].\nAssume {\n  Type: is_sint8(i).\n  (* Heap *)\n  Type: linked(Malloc_0) /\\ framed(Mptr_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, Mptr_0[shiftfield_F10___MatrixInv33F_ret(a)], 1).\n  (* Pre-condition *)\n  Have: valid_rd(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Else *)\n  Have: !lt_f64(to_f64((4722366482869645.0/4722366482869645213696)), a_17).\n  (* Else *)\n  Have: !lt_f64(a_17, to_f64((-4722366482869645.0/4722366482869645213696))).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 9).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->\n      (of_f32(a_16[shift_float32(a_3, i_2)])\n         = of_f32(a_16[shift_float32(a_1, i_2)])))).\n  (* Then *)\n  Have: i <= 8.\n  (* Invariant *)\n  Have: (0 <= x) /\\ (x <= 9).\n}\nProve: of_f32(a_18[shift_float32(a_3, i_1)])\n         = of_f32(a_18[shift_float32(a_1, i_1)]).\nProver Z3 4.8.12 returns Timeout (Qed:29ms) (3s)', 'Error found in file: Output/MatrixInv33F.c at line: 61', 'Error line content: loop invariant \\forall integer j; 0 <= j < i ==> pIp->inv[j] == pIp->src[j];')

Loop Invariant Results:
- False
- False
- False
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/MatrixInv33F.c, line 19) in 'MatrixInv33FFun':\nLet a = global(G_pIp_41).\nLet a_1 = Mptr_0[shiftfield_F10___MatrixInv33F_inv(a)].\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = Mptr_0[shiftfield_F10___MatrixInv33F_src(a)].\nLet a_4 = shift_float32(a_3, 4).\nLet a_5 = shift_float32(a_3, 8).\nLet a_6 = shift_float32(a_3, 5).\nLet a_7 = shift_float32(a_3, 7).\nLet a_8 = sub_f32(mul_f32(Mf32_1[a_4], Mf32_1[a_5]),\n            mul_f32(Mf32_1[a_6], Mf32_1[a_7])).\nLet m = Mf32_1[a_2 <- a_8].\nLet a_9 = shift_float32(a_3, 2).\nLet a_10 = shift_float32(a_3, 1).\nLet m_1 = m[shift_float32(a_1, 1)\n            <- sub_f32(mul_f32(m[a_9], m[a_7]), mul_f32(m[a_10], m[a_5]))].\nLet m_2 = m_1[shift_float32(a_1, 2)\n            <- sub_f32(mul_f32(m_1[a_10], m_1[a_6]),\n                 mul_f32(m_1[a_9], m_1[a_4]))].\nLet a_11 = shift_float32(a_3, 6).\nLet a_12 = shift_float32(a_3, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_6], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_5])).\nLet m_3 = m_2[shift_float32(a_1, 3) <- a_13].\nLet a_14 = shift_float32(a_3, 0).\nLet m_4 = m_3[shift_float32(a_1, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_5]),\n                 mul_f32(m_3[a_9], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a_1, 5)\n            <- sub_f32(mul_f32(m_4[a_9], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_6]))].\nLet a_15 = sub_f32(mul_f32(m_5[a_12], m_5[a_7]),\n             mul_f32(m_5[a_4], m_5[a_11])).\nLet m_6 = m_5[shift_float32(a_1, 6) <- a_15].\nLet m_7 = m_6[shift_float32(a_1, 7)\n            <- sub_f32(mul_f32(m_6[a_10], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_7]))].\nLet m_8 = m_7[shift_float32(a_1, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_4]),\n                 mul_f32(m_7[a_10], m_7[a_12]))].\nLet a_16 = Mptr_0[shiftfield_F10___MatrixInv33F_ret(a)].\nLet a_17 = shiftfield_F10___MatrixInv33F_bAbleInv(a).\nAssume {\n  Type: is_sint8(i) /\\ is_sint8(i_1).\n  (* Heap *)\n  Type: linked(Malloc_0) /\\ framed(Mptr_0).\n  (* Goal *)\n  When: Mint_0[a_16 <- Mint_0[a_17]][a_17] = 144.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_16, 1).\n  (* Pre-condition *)\n  Have: valid_rd(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)),\n       to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                               mul_f32(m_8[a_10], a_13)),\n                       mul_f32(m_8[a_9], a_15)))))\n  Then {\n    Have: Mint_1[a_17 <- 144] = Mint_0.\n    (* Loop assigns ... *)\n    Have: havoc(Mf32_undef_0, m_8, a_2, 9) = Mf32_0.\n    (* Invariant *)\n    Have: (0 <= i) /\\ (i <= 9).\n    (* Invariant *)\n    Have: forall i_2 : Z. let r = of_f32(Mf32_0[shift_float32(a_1, i_2)]) in\n        ((0 <= i_2) -> ((i_2 < i) ->\n        ((r\n          / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                             mul_f32(m_8[a_10], a_13)),\n                     mul_f32(m_8[a_9], a_15)))) = r))).\n    (* Else *)\n    Have: 9 <= i.\n  }\n  Else {\n    If lt_f64(to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                                      mul_f32(m_8[a_10], a_13)),\n                              mul_f32(m_8[a_9], a_15)))),\n         to_f64((-4722366482869645.0/4722366482869645213696)))\n    Then {\n      Have: Mint_1[a_17 <- 144] = Mint_0.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_0, m_8, a_2, 9) = Mf32_0.\n      (* Invariant *)\n      Have: (0 <= i) /\\ (i <= 9).\n      (* Invariant *)\n      Have: forall i_2 : Z.\n          let r = of_f32(Mf32_0[shift_float32(a_1, i_2)]) in ((0 <= i_2) ->\n          ((i_2 < i) ->\n          ((r\n            / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                               mul_f32(m_8[a_10], a_13)),\n                       mul_f32(m_8[a_9], a_15)))) = r))).\n      (* Else *)\n      Have: 9 <= i.\n    }\n    Else {\n      Have: Mint_1[a_17 <- 0] = Mint_0.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_1, m_8, a_2, 9) = Mf32_0.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= 9).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          (of_f32(Mf32_0[shift_float32(a_3, i_2)])\n             = of_f32(Mf32_0[shift_float32(a_1, i_2)])))).\n      (* Else *)\n      Have: 9 <= i_1.\n    }\n  }\n}\nProve: L_determinant(Mptr_0, Mf32_0, a) != .0.\nProver Z3 4.8.12 returns Timeout (Qed:177ms) (2.5s)", 'Error found in file: Output/MatrixInv33F.c at line: 19', 'Error line content: ensures pIp->bAbleInv == TRUE32 ==> determinant(pIp) != 0.0;')
- ("Goal Post-condition (file Output/MatrixInv33F.c, line 20) in 'MatrixInv33FFun':\nLet a = global(G_pIp_41).\nLet a_1 = Mptr_0[shiftfield_F10___MatrixInv33F_inv(a)].\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = Mptr_0[shiftfield_F10___MatrixInv33F_src(a)].\nLet a_4 = shift_float32(a_3, 4).\nLet a_5 = shift_float32(a_3, 8).\nLet a_6 = shift_float32(a_3, 5).\nLet a_7 = shift_float32(a_3, 7).\nLet a_8 = sub_f32(mul_f32(Mf32_1[a_4], Mf32_1[a_5]),\n            mul_f32(Mf32_1[a_6], Mf32_1[a_7])).\nLet m = Mf32_1[a_2 <- a_8].\nLet a_9 = shift_float32(a_3, 2).\nLet a_10 = shift_float32(a_3, 1).\nLet m_1 = m[shift_float32(a_1, 1)\n            <- sub_f32(mul_f32(m[a_9], m[a_7]), mul_f32(m[a_10], m[a_5]))].\nLet m_2 = m_1[shift_float32(a_1, 2)\n            <- sub_f32(mul_f32(m_1[a_10], m_1[a_6]),\n                 mul_f32(m_1[a_9], m_1[a_4]))].\nLet a_11 = shift_float32(a_3, 6).\nLet a_12 = shift_float32(a_3, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_6], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_5])).\nLet m_3 = m_2[shift_float32(a_1, 3) <- a_13].\nLet a_14 = shift_float32(a_3, 0).\nLet m_4 = m_3[shift_float32(a_1, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_5]),\n                 mul_f32(m_3[a_9], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a_1, 5)\n            <- sub_f32(mul_f32(m_4[a_9], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_6]))].\nLet a_15 = sub_f32(mul_f32(m_5[a_12], m_5[a_7]),\n             mul_f32(m_5[a_4], m_5[a_11])).\nLet m_6 = m_5[shift_float32(a_1, 6) <- a_15].\nLet m_7 = m_6[shift_float32(a_1, 7)\n            <- sub_f32(mul_f32(m_6[a_10], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_7]))].\nLet m_8 = m_7[shift_float32(a_1, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_4]),\n                 mul_f32(m_7[a_10], m_7[a_12]))].\nLet a_16 = Mptr_0[shiftfield_F10___MatrixInv33F_ret(a)].\nLet a_17 = shiftfield_F10___MatrixInv33F_bAbleInv(a).\nAssume {\n  Type: is_sint8(i) /\\ is_sint8(i_1).\n  (* Heap *)\n  Type: linked(Malloc_0) /\\ framed(Mptr_0).\n  (* Goal *)\n  When: Mint_0[a_16 <- Mint_0[a_17]][a_17] = 0.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_16, 1).\n  (* Pre-condition *)\n  Have: valid_rd(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)),\n       to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                               mul_f32(m_8[a_10], a_13)),\n                       mul_f32(m_8[a_9], a_15)))))\n  Then {\n    Have: Mint_1[a_17 <- 144] = Mint_0.\n    (* Loop assigns ... *)\n    Have: havoc(Mf32_undef_0, m_8, a_2, 9) = Mf32_0.\n    (* Invariant *)\n    Have: (0 <= i) /\\ (i <= 9).\n    (* Invariant *)\n    Have: forall i_2 : Z. let r = of_f32(Mf32_0[shift_float32(a_1, i_2)]) in\n        ((0 <= i_2) -> ((i_2 < i) ->\n        ((r\n          / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                             mul_f32(m_8[a_10], a_13)),\n                     mul_f32(m_8[a_9], a_15)))) = r))).\n    (* Else *)\n    Have: 9 <= i.\n  }\n  Else {\n    If lt_f64(to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                                      mul_f32(m_8[a_10], a_13)),\n                              mul_f32(m_8[a_9], a_15)))),\n         to_f64((-4722366482869645.0/4722366482869645213696)))\n    Then {\n      Have: Mint_1[a_17 <- 144] = Mint_0.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_0, m_8, a_2, 9) = Mf32_0.\n      (* Invariant *)\n      Have: (0 <= i) /\\ (i <= 9).\n      (* Invariant *)\n      Have: forall i_2 : Z.\n          let r = of_f32(Mf32_0[shift_float32(a_1, i_2)]) in ((0 <= i_2) ->\n          ((i_2 < i) ->\n          ((r\n            / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                               mul_f32(m_8[a_10], a_13)),\n                       mul_f32(m_8[a_9], a_15)))) = r))).\n      (* Else *)\n      Have: 9 <= i.\n    }\n    Else {\n      Have: Mint_1[a_17 <- 0] = Mint_0.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_1, m_8, a_2, 9) = Mf32_0.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= 9).\n      (* Invariant *)\n      Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i_1) ->\n          (of_f32(Mf32_0[shift_float32(a_3, i_2)])\n             = of_f32(Mf32_0[shift_float32(a_1, i_2)])))).\n      (* Else *)\n      Have: 9 <= i_1.\n    }\n  }\n}\nProve: L_determinant(Mptr_0, Mf32_0, a) = .0.\nProver Z3 4.8.12 returns Timeout (Qed:182ms) (2.6s)", 'Error found in file: Output/MatrixInv33F.c at line: 20', 'Error line content: ensures pIp->bAbleInv == FALSE32 ==> determinant(pIp) == 0.0;')
- ("Goal Post-condition (file Output/MatrixInv33F.c, line 21) in 'MatrixInv33FFun':\nLet a = global(G_pIp_41).\nLet a_1 = Mptr_0[shiftfield_F10___MatrixInv33F_inv(a)].\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = Mptr_0[shiftfield_F10___MatrixInv33F_src(a)].\nLet a_4 = shift_float32(a_3, 4).\nLet a_5 = shift_float32(a_3, 8).\nLet a_6 = shift_float32(a_3, 5).\nLet a_7 = shift_float32(a_3, 7).\nLet a_8 = sub_f32(mul_f32(Mf32_1[a_4], Mf32_1[a_5]),\n            mul_f32(Mf32_1[a_6], Mf32_1[a_7])).\nLet m = Mf32_1[a_2 <- a_8].\nLet a_9 = shift_float32(a_3, 2).\nLet a_10 = shift_float32(a_3, 1).\nLet m_1 = m[shift_float32(a_1, 1)\n            <- sub_f32(mul_f32(m[a_9], m[a_7]), mul_f32(m[a_10], m[a_5]))].\nLet m_2 = m_1[shift_float32(a_1, 2)\n            <- sub_f32(mul_f32(m_1[a_10], m_1[a_6]),\n                 mul_f32(m_1[a_9], m_1[a_4]))].\nLet a_11 = shift_float32(a_3, 6).\nLet a_12 = shift_float32(a_3, 3).\nLet a_13 = sub_f32(mul_f32(m_2[a_6], m_2[a_11]),\n             mul_f32(m_2[a_12], m_2[a_5])).\nLet m_3 = m_2[shift_float32(a_1, 3) <- a_13].\nLet a_14 = shift_float32(a_3, 0).\nLet m_4 = m_3[shift_float32(a_1, 4)\n            <- sub_f32(mul_f32(m_3[a_14], m_3[a_5]),\n                 mul_f32(m_3[a_9], m_3[a_11]))].\nLet m_5 = m_4[shift_float32(a_1, 5)\n            <- sub_f32(mul_f32(m_4[a_9], m_4[a_12]),\n                 mul_f32(m_4[a_14], m_4[a_6]))].\nLet a_15 = sub_f32(mul_f32(m_5[a_12], m_5[a_7]),\n             mul_f32(m_5[a_4], m_5[a_11])).\nLet m_6 = m_5[shift_float32(a_1, 6) <- a_15].\nLet m_7 = m_6[shift_float32(a_1, 7)\n            <- sub_f32(mul_f32(m_6[a_10], m_6[a_11]),\n                 mul_f32(m_6[a_14], m_6[a_7]))].\nLet m_8 = m_7[shift_float32(a_1, 8)\n            <- sub_f32(mul_f32(m_7[a_14], m_7[a_4]),\n                 mul_f32(m_7[a_10], m_7[a_12]))].\nLet a_16 = Mptr_0[shiftfield_F10___MatrixInv33F_ret(a)].\nLet a_17 = shiftfield_F10___MatrixInv33F_bAbleInv(a).\nLet x = Mint_0[a_16 <- Mint_0[a_17]][a_17].\nLet a_18 = shift_float32(a_1, i).\nLet r = of_f32(Mf32_0[a_18]).\nAssume {\n  Type: is_sint8(i_1) /\\ is_sint8(i_2) /\\ is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0) /\\ framed(Mptr_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i <= 8).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_16, 1).\n  (* Pre-condition *)\n  Have: valid_rd(Malloc_0, a_14, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If lt_f64(to_f64((4722366482869645.0/4722366482869645213696)),\n       to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                               mul_f32(m_8[a_10], a_13)),\n                       mul_f32(m_8[a_9], a_15)))))\n  Then {\n    Have: Mint_1[a_17 <- 144] = Mint_0.\n    (* Loop assigns ... *)\n    Have: havoc(Mf32_undef_0, m_8, a_2, 9) = Mf32_0.\n    (* Invariant *)\n    Have: (0 <= i_1) /\\ (i_1 <= 9).\n    (* Invariant *)\n    Have: forall i_3 : Z.\n        let r_1 = of_f32(Mf32_0[shift_float32(a_1, i_3)]) in ((0 <= i_3) ->\n        ((i_3 < i_1) ->\n        ((r_1\n          / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                             mul_f32(m_8[a_10], a_13)),\n                     mul_f32(m_8[a_9], a_15)))) = r_1))).\n    (* Else *)\n    Have: 9 <= i_1.\n  }\n  Else {\n    If lt_f64(to_f64(of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                                      mul_f32(m_8[a_10], a_13)),\n                              mul_f32(m_8[a_9], a_15)))),\n         to_f64((-4722366482869645.0/4722366482869645213696)))\n    Then {\n      Have: Mint_1[a_17 <- 144] = Mint_0.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_0, m_8, a_2, 9) = Mf32_0.\n      (* Invariant *)\n      Have: (0 <= i_1) /\\ (i_1 <= 9).\n      (* Invariant *)\n      Have: forall i_3 : Z.\n          let r_1 = of_f32(Mf32_0[shift_float32(a_1, i_3)]) in ((0 <= i_3) ->\n          ((i_3 < i_1) ->\n          ((r_1\n            / of_f32(add_f32(add_f32(mul_f32(m_8[a_14], a_8),\n                               mul_f32(m_8[a_10], a_13)),\n                       mul_f32(m_8[a_9], a_15)))) = r_1))).\n      (* Else *)\n      Have: 9 <= i_1.\n    }\n    Else {\n      Have: Mint_1[a_17 <- 0] = Mint_0.\n      (* Loop assigns ... *)\n      Have: havoc(Mf32_undef_1, m_8, a_2, 9) = Mf32_0.\n      (* Invariant *)\n      Have: (0 <= i_2) /\\ (i_2 <= 9).\n      (* Invariant *)\n      Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n          (of_f32(Mf32_0[shift_float32(a_3, i_3)])\n             = of_f32(Mf32_0[shift_float32(a_1, i_3)])))).\n      (* Else *)\n      Have: 9 <= i_2.\n    }\n  }\n}\nProve: (((x = 0) -> (r = of_f32(Mf32_1[shift_float32(a_3, i)])))) /\\\n    (((x = 144) ->\n     ((of_f32(Mf32_1[a_18]) / L_determinant(Mptr_0, Mf32_0, a)) = r))).\nProver Z3 4.8.12 returns Timeout (Qed:168ms) (3s)", 'Error found in file: Output/MatrixInv33F.c at line: 21', 'Error line content: ensures \\forall integer i; 0 <= i < 9 ==>')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: PeriodControl.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Establishment of Invariant (file Output/PeriodControl.c, line 28):\nLet x = pIp_0.F18___PeriodControl_flg160INT.\nAssume {\n  Type: is_uint32(x).\n  (* Heap *)\n  Type: region(pIp_0.F18___PeriodControl_fun.base) <= 0.\n}\nProve: (x = 13107) \\/ (x = 52428).\nProver Z3 4.8.12 returns Timeout (Qed:0.51ms) (3s)', 'Error found in file: Output/PeriodControl.c at line: 28', 'Error line content: loop invariant pIp->flg160INT == 0x3333 || pIp->flg160INT == 0xCCCC;')
- ('Goal Establishment of Invariant (file Output/PeriodControl.c, line 66):\nLet x = pIp_1.F18___PeriodControl_flg160INT.\nLet x_1 = pIp_0.F18___PeriodControl_flg160INT.\nAssume {\n  Type: is_uint32(v) /\\ is_uint32(x_1) /\\ is_uint32(x).\n  (* Heap *)\n  Type: region(pIp_1.F18___PeriodControl_fun.base) <= 0.\n  (* Invariant *)\n  Have: (x = 13107) \\/ (x = 52428).\n  (* Loop assigns ... *)\n  Have: (({ Init_pIp_0 with Init_F18___PeriodControl_countSate = v_1 }) =\n         Init_pIp_0) /\\\n      (({ Init_pIp_0 with Init_F18___PeriodControl_flgGryoCalc = v_2 }) =\n       Init_pIp_0) /\\\n      (({ Init_pIp_0 with Init_F18___PeriodControl_flg160INT = v_3 }) =\n       Init_pIp_0).\n  (* Invariant *)\n  Have: (v = 13107) \\/ (v = 52428).\n}\nProve: x_1 = 52428.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)', 'Error found in file: Output/PeriodControl.c at line: 66', 'Error line content: loop invariant pIp->flg160INT == 0xCCCC;')

Loop Invariant Results:
- False
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GetUartData.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: GyroStateGet.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 36):\nLet x = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_2 = pIp_0.F14___GyroStateGet_NumGyro.\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\ is_uint64(x) /\\\n      is_uint8(Mint_0[shift_uint8(a, 2)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, 3)]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Then *)\n  Have: 0 < x.\n}\nProve: to_uint64(1 + i) <= x_2.\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 36', 'Error line content: loop invariant 0 <= i <= pIp->NumGyro;')

Loop Invariant Results:
- False

Assertion Errors:
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (3/7):\nEffect at line 24\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (4/7):\nEffect at line 27\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (5/7):\nEffect at line 31\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (7/7):\nEffect at line 40\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet a_2 = shift_uint64(a_1, 0).\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_3 = pIp_1.F14___GyroStateGet_wa.\nLet a_4 = shift_float32(a_3, 0).\nLet a_5 = shift_float32(pIp_0.F14___GyroStateGet_wa, 0).\nLet a_6 = shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, 0).\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: (((!invalid(Malloc_0, a_5, x)) ->\n        (included(a_5, x, a_4, x_1) \\/ included(a_5, x, a_2, x_1)))) /\\\n    (((!invalid(Malloc_0, a_6, x)) ->\n     (included(a_6, x, a_4, x_1) \\/ included(a_6, x, a_2, x_1)))).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1], pIp->stateFlag[0..pIp->NumGyro-1];')

Assertion Results:
- True
- True
- False
- False
- False
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: JetDataGet.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/JetDataGet.c, line 8) in 'JetDataGetFun' (2/2):\nEffect at line 33\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.79ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 8', 'Error line content: assigns pIp->mThrDistribute.stateFlag[0..1];')

Assertion Results:
- True
- False

Postcond Errors:
- ("Goal Post-condition (file Output/JetDataGet.c, line 9) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[0].\nAssume { Type: is_uint8(a_1) /\\ is_uint8(a[1]). }\nProve: a_1 = (if bit_testb(w, 2) then 1 else 0).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 9', 'Error line content: ensures pIp->mThrDistribute.stateFlag[0] == ((ADDR_READ(0xE000) & 0x4) == 0x4 ? 1 : 0);')
- ("Goal Post-condition (file Output/JetDataGet.c, line 10) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[1].\nAssume { Type: is_uint8(a[0]) /\\ is_uint8(a_1). }\nProve: a_1 = (if bit_testb(w, 3) then 1 else 0).\nProver Z3 4.8.12 returns Timeout (Qed:0.88ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 10', 'Error line content: ensures pIp->mThrDistribute.stateFlag[1] == ((ADDR_READ(0xE000) & 0x8) == 0x8 ? 1 : 0);')

Postcond Results:
- False
- False

------------------------------------------------
File Name: SwitchSS.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'SwitchSSFun' (1/2):\nEffect at line 12\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___SwitchSS_fun.base) <= 0) /\\ linked(Malloc_0).\n  (* Then *)\n  Have: ((pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A) = 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Unknown (Qed:0.75ms)", None, None)
- ("Goal Assigns nothing in 'SwitchSSFun' (2/2):\nEffect at line 16\nLet x = (pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SwitchSS_fun.base) <= 0) /\\ linked(Malloc_0).\n  (* Else *)\n  Have: x != 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Unknown (Qed:0.79ms)", None, None)

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SAMSubModePitch.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (4/21):\nEffect at line 24\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (5/21):\nEffect at line 24\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (6/21):\nEffect at line 24\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (7/21):\nEffect at line 27\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (8/21):\nEffect at line 27\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (9/21):\nEffect at line 27\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (13/21):\nEffect at line 47\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32000).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:54ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (14/21):\nEffect at line 47\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32340).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:42ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (15/21):\nEffect at line 47\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32680).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:57ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (16/21):\nEffect at line 48\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32024).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:69ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (17/21):\nEffect at line 48\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32364).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:70ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (18/21):\nEffect at line 48\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32704).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:67ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (19/21):\nEffect at line 49\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32028).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:57ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (20/21):\nEffect at line 49\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32368).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:63ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 8) in 'SAMSubModePitchFun' (21/21):\nEffect at line 49\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = addr_of_int(32708).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Timeout (Qed:66ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 8', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up;')

Assertion Results:
- True
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultProceedSP.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SoftFaultProceedSP.c (with preprocessing)
[kernel] Output/SoftFaultProceedSP.c:33: 
  syntax error:
  Location: line 33, between columns 20 and 21, before or at token: ipSwitchSS
  31        {
  32            case 5:
  33                IPCREATE(SwitchSS, ipSwitchSS);
                            ^
  34                IPCALL(ipSwitchSS);
  35                break;
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrABAutoChoose.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ThrABAutoChoose.c, line 8) in 'ThrABAutoChooseFun' (3/9):\nEffect at line 19\nProve: false.\nProver Z3 4.8.12 returns Timeout (3s)", 'Error found in file: Output/ThrABAutoChoose.c at line: 8', 'Error line content: assigns pIp->mThrDistribute.flgABChoose;')
- ("Goal Assigns (file Output/ThrABAutoChoose.c, line 8) in 'ThrABAutoChooseFun' (5/9):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.51ms) (3s)", 'Error found in file: Output/ThrABAutoChoose.c at line: 8', 'Error line content: assigns pIp->mThrDistribute.flgABChoose;')

Assertion Results:
- True
- True
- False
- True
- False
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True

------------------------------------------------
File Name: LimitFloat32.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/LimitFloat32.c, line 7) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_fin.\nLet a_1 = pIp_1.F10___LimitFloat32_fbound.\nLet a_2 = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fvalue).\nLet r_1 = of_f32(a_1).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Residual *)\n  When: !lt_f32(a_1, a).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n      Init_pIp_0.\n  If lt_f32(a, neg_f32(a_1))\n  Then {\n    Have: ({ pIp_1 with F10___LimitFloat32_fvalue = neg_f32(a_1) }) = pIp_0.\n  }\n  Else { Have: ({ pIp_1 with F10___LimitFloat32_fvalue = a }) = pIp_0. }\n}\nProve: (r = r_1) \\/ (r = of_f32(pIp_1.F10___LimitFloat32_fvalue)) \\/\n    ((r_1 + r) = .0).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/LimitFloat32.c at line: 7', 'Error line content: ensures *pIp->ret == \\old(pIp->fvalue) ||')

Postcond Results:
- False

------------------------------------------------
File Name: DevControl.c

Syntax Error:
syntax Error
[kernel] Parsing Output/DevControl.c (with preprocessing)
[kernel:annot-error] Output/DevControl.c:7: Warning: 
  Assignment operators not allowed in annotations.
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Uint08.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: LimitCtrlAngleInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 19) in 'LimitCtrlAngleInputFun' (3/7):\nEffect at line 26\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0,\n           shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n           1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_54 <- 1][L_ipLimitFloat32_0_55\n                   <- 6][L_LimitFloat32_ret_1_56 <- 1][L_ipLimitFloat32_1_57\n                   <- 6], a_1, 9).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 19) in 'LimitCtrlAngleInputFun' (4/7):\nEffect at line 31\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_54 <- 1][L_ipLimitFloat32_0_55\n                   <- 6][L_LimitFloat32_ret_1_56 <- 1][L_ipLimitFloat32_1_57\n                   <- 6], a_1, 9).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 19) in 'LimitCtrlAngleInputFun' (5/7):\nEffect at line 33\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_54 <- 1][L_ipLimitFloat32_0_55\n                   <- 6][L_LimitFloat32_ret_1_56 <- 1][L_ipLimitFloat32_1_57\n                   <- 6], a_1, 9).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_1)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1))).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 19) in 'LimitCtrlAngleInputFun' (6/7):\nEffect at line 38\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_54 <- 1][L_ipLimitFloat32_0_55\n                   <- 6][L_LimitFloat32_ret_1_56 <- 1][L_ipLimitFloat32_1_57\n                   <- 6], a_1, 9).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 19) in 'LimitCtrlAngleInputFun' (7/7):\nEffect at line 40\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Assertion *)\n  Have: valid_rw(Malloc_0[L_LimitFloat32_ret_0_54 <- 1][L_ipLimitFloat32_0_55\n                   <- 6][L_LimitFloat32_ret_1_56 <- 1][L_ipLimitFloat32_1_57\n                   <- 6], a_1, 9).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_1)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1))).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up;')

Assertion Results:
- True
- True
- True
- True
- True
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SAMSubModeRoll.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (4/22):\nEffect at line 42\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (5/22):\nEffect at line 42\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:12ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (6/22):\nEffect at line 42\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:14ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (7/22):\nEffect at line 43\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:13ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (8/22):\nEffect at line 43\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:14ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (9/22):\nEffect at line 43\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:15ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (13/22):\nEffect at line 66\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:90ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (14/22):\nEffect at line 66\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:90ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (15/22):\nEffect at line 66\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:80ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (16/22):\nEffect at line 67\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:83ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (17/22):\nEffect at line 67\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:103ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (18/22):\nEffect at line 67\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:107ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (19/22):\nEffect at line 68\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32028).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:94ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (20/22):\nEffect at line 68\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32368).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:109ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (21/22):\nEffect at line 68\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = addr_of_int(32708).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: exists i : Z.\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, i)) =\n     a_2) /\\ (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:115ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 17) in 'SAMSubModeRollFun' (22/22):\nEffect at line 78\nLet x = pIp_0.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      If 17 <= to_uint64(1 + (pIp_1.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_1.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_0).\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else { Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_0.\n  }\n  (* Then *)\n  Have: 6251 <= x.\n  Have: ((pIp_0.F11___SAMSubModeRoll_flgPRSAM) = 13107) /\\\n      (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n       Init_pIp_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n      Init_pIp_0.\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:136ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 17', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0..2].Up,')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CalculateGyroDg.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CalculateGyroDg.c, line 22):\nLet x = to_uint8(1 + j).\nLet a = global(L_tmpwa_46).\nLet a_1 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a, 0), 5).\nLet a_2 = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x_1 = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a_2)].\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a_2), 0),\n          x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a_2), 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a_2), i_1\n          + i_2), 5))))).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a_2), 0), 3).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (of_f32(a_1[shift_float32(a, i_1)]) = .0))).\n  (* Then *)\n  Have: j <= 4.\n  (* Invariant *)\n  Have: x <= 5.\n}\nProve: of_f32(a_1[shift_float32(a, j) <- to_f32(.0)][shift_float32(a, i)])\n         = .0.\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/CalculateGyroDg.c at line: 22', 'Error line content: loop invariant \\forall integer l; 0 <= l < j ==> tmpwa[l] == 0;')
- ('Goal Preservation of Invariant (file Output/CalculateGyroDg.c, line 32):\nLet x = to_uint8(1 + j).\nLet a = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x_1 = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_tmpwa_46).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = havoc(Mf32_undef_1, Mf32_0, a_2, 5).\nLet a_4 = havoc(Mf32_undef_0, a_3, a_2, x_1).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet x_2 = Mint_0[shift_uint8(a_6, j)].\nLet a_7 = a_4[shift_float32(a_1, j) <- a_4[shift_float32(a_5, x_2)]].\nAssume {\n  Type: is_uint8(j_1) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_6, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_2,i_1 : Z. ((0 <= i_2) -> ((0 <= i_1) -> ((i_2 <= 2) ->\n      ((i_1 <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i_1\n          + i_2), 5))))).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a), 0), 3).\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->\n      (of_f32(a_3[shift_float32(a_1, i_1)]) = .0))).\n  (* Else *)\n  Have: 5 <= j_1.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (of_f32(a_4[shift_float32(a_5, Mint_0[shift_uint8(a_6, i_1)])])\n         = of_f32(a_4[shift_float32(a_1, i_1)])))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_7[shift_float32(a_5, Mint_0[shift_uint8(a_6, i)])])\n         = of_f32(a_7[shift_float32(a_1, i)]).\nProver Z3 4.8.12 returns Failed\nout of memory', 'Error found in file: Output/CalculateGyroDg.c at line: 32', 'Error line content: loop invariant \\forall integer l; 0 <= l < j ==> tmpwa[l] == pIp->pGyroData->wa[pIp->pGyroData->SignFlag[l]];')

Loop Invariant Results:
- True
- False
- True
- False

Assertion Errors:
- ("Goal Assigns (file Output/CalculateGyroDg.c, line 13) in 'CalculateGyroDgFun' (5/8):\nEffect at line 45\nLet a = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_tmpwa_46).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = havoc(Mf32_undef_0, Mf32_0, a_2, 5).\nLet a_4 = havoc(Mf32_undef_1, a_3, a_2, x).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(j_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_6, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: forall i_1,i : Z. ((0 <= i_1) -> ((0 <= i) -> ((i_1 <= 2) ->\n      ((i <= 4) ->\n      valid_rw(Malloc_0,\n        shift_A5_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a), i\n          + i_1), 5))))).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a), 0), 3).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Invariant *)\n  Have: forall i : Z. ((0 <= i) -> ((i < j) ->\n      (of_f32(a_3[shift_float32(a_1, i)]) = .0))).\n  (* Else *)\n  Have: 5 <= j.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= x).\n  (* Invariant *)\n  Have: forall i : Z. ((0 <= i) -> ((i < j_1) ->\n      (of_f32(a_4[shift_float32(a_5, Mint_0[shift_uint8(a_6, i)])])\n         = of_f32(a_4[shift_float32(a_1, i)])))).\n  (* Else *)\n  Have: x <= j_1.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:9ms)", 'Error found in file: Output/CalculateGyroDg.c at line: 13', 'Error line content: assigns pIp->pGyroData->W[0..2];')

Assertion Results:
- True
- True
- True
- True
- False
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: DSSDataGet.c

Syntax Error:
syntax Error
[kernel] Parsing Output/DSSDataGet.c (with preprocessing)
[kernel] Output/DSSDataGet.c:53: User Error: 
  redefinition of 'ipDelay' in the same scope.
  Previous declaration was at Output/DSSDataGet.c:18
[kernel] User Error: stopping on file "Output/DSSDataGet.c" that has errors. Add
  '-kernel-msg-key pp' for preprocessing command.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: common.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Establishment of Invariant (file Output/common.c, line 18):\nAssume {\n  Type: is_sint32(length_0).\n  (* Pre-condition *)\n  Have: ((0 < length_0) -> (length_0 <= 1)).\n}\nProve: 0 <= length_0.\nProver Z3 4.8.12 returns Timeout (3s)', 'Error found in file: Output/common.c at line: 18', 'Error line content: /*@ loop invariant 0 <= i <= length;')

Loop Invariant Results:
- False
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: ModeControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (2/10):\nEffect at line 35\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (4/10):\nEffect at line 49\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_75)] = 0. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (5/10):\nEffect at line 61\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_75)] = 17. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (6/10):\nEffect at line 73\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_75)] = 34. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (7/10):\nEffect at line 84\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_75)] = 51. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (8/10):\nEffect at line 89\nLet x = Mint_0[global(L_Tr32Uint08_ret_75)].\nLet a = addr_of_int(32000).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_72)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (9/10):\nEffect at line 89\nLet x = Mint_0[global(L_Tr32Uint08_ret_75)].\nLet a = addr_of_int(32340).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_72)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 26) in 'ModeControlFun' (10/10):\nEffect at line 89\nLet x = Mint_0[global(L_Tr32Uint08_ret_75)].\nLet a = addr_of_int(32680).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_72)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 26', 'Error line content: assigns pIp->countMode;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/ModeControl.c, line 27) in 'ModeControlFun':\nLet x = Mint_2[global(L_Tr32Uint08_ret_75)].\nLet a = shiftfield_F15___ModeControl_countMode(global(G_pIp_72)).\nLet x_1 = Mint_1[a].\nLet x_2 = Mint_0[a].\nAssume {\n  Type: is_uint8(x) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(Mint_3[a]).\n  If x = 0\n  Else {\n    If x = 17\n    Else {\n      If x = 34\n      Else {\n        Have: Mint_2 = Mint_4.\n        If Mint_4[global(L_Tr32Uint08_ret_75)] = 51\n        Else {\n          Have: (Mint_4 = Mint_5) /\\\n              (Mint_3[a <- to_uint64(1 + Mint_3[a])] = Mint_0).\n        }\n      }\n    }\n  }\n}\nProve: x_2 = (1 + x_1).\nProver Z3 4.8.12 returns Timeout (Qed:31ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 27', 'Error line content: ensures pIp->countMode == \\old(pIp->countMode) + 1;')

Postcond Results:
- False

------------------------------------------------
File Name: ModPNHP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ModPNHP.c, line 7) in 'ModPNHPFun':\nLet a = pIp_0.F10___ModPNHP_ret.\nLet a_1 = pIp_0.F10___ModPNHP_x.\nLet a_2 = pIp_0.F10___ModPNHP_halfperiod.\nLet a_3 = mul_f32(to_f32(2.0), a_2).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___ModPNHP_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: of_f32(sub_f32(a_1, mul_f32(div_f32(add_f32(a_1, a_2), a_3), a_3)))\n         = of_f32(pIp_0.F10___ModPNHP_npp2).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/ModPNHP.c at line: 7', 'Error line content: ensures *pIp->ret == \\old(pIp->npp2);')

Postcond Results:
- False

------------------------------------------------
File Name: SAMSubModeDamp.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 16) in 'SAMSubModeDampFun' (2/9):\nEffect at line 30\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 16) in 'SAMSubModeDampFun' (4/9):\nEffect at line 52\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 16) in 'SAMSubModeDampFun' (5/9):\nEffect at line 52\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 16) in 'SAMSubModeDampFun' (6/9):\nEffect at line 52\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:17ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 16) in 'SAMSubModeDampFun' (7/9):\nEffect at line 53\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:19ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 16) in 'SAMSubModeDampFun' (8/9):\nEffect at line 53\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:21ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 16) in 'SAMSubModeDampFun' (9/9):\nEffect at line 53\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:21ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 16', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 17) in 'SAMSubModeDampFun':\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet x = pIp_0.F11___SAMSubModeDamp_countPublic.\nLet x_1 = pIp_0.F11___SAMSubModeDamp_countMode.\nLet x_2 = pIp_1.F11___SAMSubModeDamp_flgMode.\nLet x_3 = pIp_0.F11___SAMSubModeDamp_flgMode.\nAssume {\n  Type: is_uint64(pIp_1.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x_2) /\\\n      is_uint64(x) /\\ is_uint64(x_1) /\\ is_uint64(x_3) /\\\n      is_uint64(pIp_2.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 1000.\n  (* Residual *)\n  When: x <= 350.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_3.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_3 = pIp_2.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_2.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_0).\n  }\n  Else { Have: pIp_3 = pIp_0. }\n}\nProve: (x_3 = 17) \\/ (x_3 = x_2).\nProver Z3 4.8.12 returns Unknown (Qed:36ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 17', 'Error line content: ensures pIp->flgMode == \\old(pIp->flgMode) || pIp->flgMode == SAM_PITCH;')
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 18) in 'SAMSubModeDampFun':\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet x = pIp_0.F11___SAMSubModeDamp_countPublic.\nLet x_1 = pIp_0.F11___SAMSubModeDamp_countMode.\nLet x_2 = pIp_1.F11___SAMSubModeDamp_countMode.\nAssume {\n  Type: is_uint64(pIp_1.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(x_2) /\\ is_uint64(pIp_1.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(x) /\\ is_uint64(x_1) /\\\n      is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_2.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 1000.\n  (* Residual *)\n  When: x <= 350.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_3.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_3 = pIp_2.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_2.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_0).\n  }\n  Else { Have: pIp_3 = pIp_0. }\n}\nProve: (x_1 = 0) \\/ (x_1 = x_2).\nProver Z3 4.8.12 returns Unknown (Qed:36ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 18', 'Error line content: ensures pIp->countMode == 0 || pIp->countMode == \\old(pIp->countMode);')
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 19) in 'SAMSubModeDampFun':\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet x = pIp_0.F11___SAMSubModeDamp_countPublic.\nLet x_1 = pIp_0.F11___SAMSubModeDamp_countMode.\nLet x_2 = pIp_1.F11___SAMSubModeDamp_countPublic.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_flgMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1) /\\ is_uint64(pIp_0.F11___SAMSubModeDamp_flgMode) /\\\n      is_uint64(pIp_2.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: x_1 <= 1000.\n  (* Residual *)\n  When: x <= 350.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_55)],\n       pIp_3.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_3 = pIp_2.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_2.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_0).\n  }\n  Else { Have: pIp_3 = pIp_0. }\n}\nProve: (x = 0) \\/ (x = (1 + x_2)).\nProver Z3 4.8.12 returns Unknown (Qed:38ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 19', 'Error line content: ensures pIp->countPublic == 0 || pIp->countPublic == \\old(pIp->countPublic) + 1;')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: LimitCtrlRateInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (1/10):\nEffect at line 25\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (2/10):\nEffect at line 28\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (3/10):\nEffect at line 29\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (4/10):\nEffect at line 30\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (5/10):\nEffect at line 34\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (6/10):\nEffect at line 37\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (7/10):\nEffect at line 41\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (8/10):\nEffect at line 44\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (9/10):\nEffect at line 48\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 19) in 'LimitCtrlRateInputFun' (10/10):\nEffect at line 51\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: exists i : Z.\n    (a_2 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, i))) /\\\n    (0 <= i) /\\ (i <= 2).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 19', 'Error line content: assigns pIp->pSCtrl[0..2].Ud;')

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: PseudoRateModulator.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: DiviationToFloat.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/DiviationToFloat.c, line 15) in 'DiviationToFloatFun':\nLet a = pIp_0.F10___DiviationToFloat_ret.\nLet x = pIp_0.F10___DiviationToFloat_input.\nLet x_1 = pIp_0.F10___DiviationToFloat_mask.\nLet x_2 = pIp_0.F10___DiviationToFloat_offset.\nLet r = real_of_int(to_sint32(land(x, x_1) - x_2)).\nLet a_1 = pIp_0.F10___DiviationToFloat_LSB.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___DiviationToFloat_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (r * of_f32(a_1)) = of_f32(mul_f32(to_f32(r), a_1)).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/DiviationToFloat.c at line: 15', 'Error line content: ensures pIp->fresult == \\old((siint16)((pIp->input & pIp->mask) - pIp->offset)) * pIp->LSB;')

Postcond Results:
- False
- True

------------------------------------------------
File Name: FaultJudgeProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (1/3):\nEffect at line 26\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nAssume {\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (2/3):\nEffect at line 42\nLet a = pIp_1.F13___FaultJudgeProceed_mFWarning.\nLet a_1 = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a_1.F4_TAG_FAULT_WARNING_Wsp.\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Residual *)\n  When: (a_1.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  If x = 0\n  Else { Have: pIp_0 = pIp_1. }\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 235.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:12ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (3/3):\nEffect at line 52\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_CWsp.\nLet x_1 = (pIp_2.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_CWsp.\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_2.F13___FaultJudgeProceed_fun.base) <= 0) /\\\n      linked(Malloc_0).\n  If x_1 = 235\n  Then {\n    Have: pIp_2 = pIp_1.\n    If ((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp)\n         = 0\n    Then {\n      (* Block Out *)\n      Have: Malloc_1[L_ipSoftFaultJudgeSP_49 <- 0] = Malloc_2.\n    }\n    Else {\n      Have: (pIp_1 = pIp_0) /\\\n          (Malloc_0[L_ipNoctrlJudge_56 <- 20] = Malloc_2).\n    }\n  }\n  Else {\n    Have: (pIp_2 = pIp_0) /\\ (Malloc_0[L_ipNoctrlJudge_56 <- 20] = Malloc_2).\n  }\n  If x = 235\n  Then { Have: Malloc_2 = Malloc_3. }\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:28ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixTran.c

Syntax Error:
syntax Error
[kernel] Parsing Output/MatrixTran.c (with preprocessing)
[kernel:annot-error] Output/MatrixTran.c:26: Warning: 
  \old undefined in this context. Ignoring code annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CheckCal16.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CheckCal16.c, line 23):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___CheckCal16_len.\nLet a = pIp_0.F10___CheckCal16_pkv.\nLet x_2 = Mint_0[shift_uint8(a, i)].\nLet x_3 = L_sum(Mint_0, a, 0, i).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint8(x_2) /\\ is_uint32(x_3).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal16_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: to_uint32(x_2 + x_3) = L_sum(Mint_0, a, 0, x).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)', 'Error found in file: Output/CheckCal16.c at line: 23', 'Error line content: loop invariant chksum == sum(pIp->pkv, 0, i);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: B_TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (3/12):\nEffect at line 31\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet a_1 = shift_uint8(a, 0).\nAssume {\n  Type: is_uint8(i).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_0[a_1] = 225.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (4/12):\nEffect at line 37\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (5/12):\nEffect at line 37\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (6/12):\nEffect at line 37\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (7/12):\nEffect at line 41\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (8/12):\nEffect at line 41\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (9/12):\nEffect at line 41\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (10/12):\nEffect at line 45\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (11/12):\nEffect at line 45\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (12/12):\nEffect at line 45\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_45)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 3).\n  (* Else *)\n  Have: 3 <= i.\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: included(a_3, 1, a_2, 4).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[0..3];')

Assertion Results:
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
