File Name: ThreeAxisController.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (2/8):\nEffect at line 30\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (3/8):\nEffect at line 36\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (4/8):\nEffect at line 42\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (5/8):\nEffect at line 47\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (6/8):\nEffect at line 50\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (7/8):\nEffect at line 53\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy;')
- ("Goal Assigns (file Output/ThreeAxisController.c, line 12) in 'ThreeAxisControllerFun' (8/8):\nEffect at line 56\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 12', 'Error line content: assigns pIp->mController[0].fy;')

Assertion Results:
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/ThreeAxisController.c, line 18) in 'ThreeAxisControllerFun':\nLet a = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(shift_S2_TAG_FALSE_RATE_MODULATOR(\n                                                   shiftfield_F13___ThreeAxisController_mModulator(\n                                                     global(G_pIp_46)), 0)).\nLet r = of_f32(Mf32_0[a]).\nProve: (r = (-5452595.0/4194304)) \\/ (r = (5452595.0/4194304)) \\/\n    (of_f32(Mf32_1[a]) = r).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.5s)", 'Error found in file: Output/ThreeAxisController.c at line: 18', 'Error line content: ensures pIp->mModulator[0].u == \\old(pIp->mModulator[0].u) || pIp->mModulator[0].u == 1.3f || pIp->mModulator[0].u == -1.3f;')
- ("Goal Post-condition (file Output/ThreeAxisController.c, line 19) in 'ThreeAxisControllerFun':\nLet a = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(shift_S2_TAG_FALSE_RATE_MODULATOR(\n                                                   shiftfield_F13___ThreeAxisController_mModulator(\n                                                     global(G_pIp_46)), 1)).\nLet r = of_f32(Mf32_0[a]).\nProve: (r = (-5452595.0/4194304)) \\/ (r = (5452595.0/4194304)) \\/\n    (of_f32(Mf32_1[a]) = r).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.5s)", 'Error found in file: Output/ThreeAxisController.c at line: 19', 'Error line content: ensures pIp->mModulator[1].u == \\old(pIp->mModulator[1].u) || pIp->mModulator[1].u == 1.3f || pIp->mModulator[1].u == -1.3f;')
- ("Goal Post-condition (file Output/ThreeAxisController.c, line 20) in 'ThreeAxisControllerFun':\nLet a = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(shift_S2_TAG_FALSE_RATE_MODULATOR(\n                                                   shiftfield_F13___ThreeAxisController_mModulator(\n                                                     global(G_pIp_46)), 2)).\nLet r = of_f32(Mf32_0[a]).\nProve: (r = (-5452595.0/4194304)) \\/ (r = (5452595.0/4194304)) \\/\n    (of_f32(Mf32_1[a]) = r).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/ThreeAxisController.c at line: 20', 'Error line content: ensures pIp->mModulator[2].u == \\old(pIp->mModulator[2].u) || pIp->mModulator[2].u == 1.3f || pIp->mModulator[2].u == -1.3f;')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: TripleFabsMax.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/TripleFabsMax.c, line 7) in 'TripleFabsMaxFun':\nLet a = to_f32(.0).\nLet a_1 = pIp_1.F10___TripleFabsMax_ret.\nLet r = of_f32(pIp_0.F10___TripleFabsMax_fy2).\nLet r_1 = of_f32(pIp_0.F10___TripleFabsMax_fx1).\nLet r_2 = r + (if (r_1 < .0) then (-r_1) else r_1).\nLet r_3 = r_1 + r.\nLet r_4 = of_f32(pIp_0.F10___TripleFabsMax_fz3).\nLet r_5 = -r_4.\nLet r_6 = of_f32(pIp_0.F10___TripleFabsMax_tmax).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___TripleFabsMax_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n  If lt_f32(pIp_1.F10___TripleFabsMax_fx1, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fx1) = fabsfx1_0. }\n  If lt_f32(pIp_1.F10___TripleFabsMax_fy2, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fy2) = fabsfy2_0. }\n  If lt_f32(pIp_1.F10___TripleFabsMax_fz3, a)\n  Then { Have: neg_f32(pIp_1.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Else { Have: (pIp_1.F10___TripleFabsMax_fz3) = fabsfz3_0. }\n  Core: ({ Init_pIp_0 with Init_F10___TripleFabsMax_tmax = true }) =\n      Init_pIp_0.\n  If lt_f32(fabsfy2_0, fabsfx1_0)\n  Then { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfx1_0 }) = pIp_2.\n  }\n  Else { Have: ({ pIp_1 with F10___TripleFabsMax_tmax = fabsfy2_0 }) = pIp_2.\n  }\n  If lt_f32(pIp_2.F10___TripleFabsMax_tmax, fabsfz3_0)\n  Then {\n    Have: pIp_2 = pIp_3.\n    Have: ({ pIp_3 with F10___TripleFabsMax_tmax = fabsfz3_0 }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: if (if (if (r < .0) then (.0 < r_2)\n               else (if (r_1 < .0) then (r_3 < .0) else (r < r_1)))\n           then (if (r_1 < .0)\n                 then (.0 < (r_1 + (if (r_4 < .0) then r_5 else r_4)))\n                 else (if (r_4 < .0) then ((r_1 + r_4) < .0) else (r_1 < r_4)))\n           else (if (r < .0)\n                 then (.0 < (r + (if (r_4 < .0) then r_5 else r_4)))\n                 else (if (r_4 < .0) then ((r + r_4) < .0) else (r < r_4))))\n       then (if (r_4 < .0) then ((r_4 + r_6) = .0) else (r_6 = r_4))\n       else (if (if (r < .0) then (.0 < r_2)\n                 else (if (r_1 < .0) then (r_3 < .0) else (r < r_1)))\n             then (if (r_1 < .0) then ((r_1 + r_6) = .0) else (r_6 = r_1))\n             else (if (r < .0) then ((r + r_6) = .0) else (r_6 = r))).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/TripleFabsMax.c at line: 7', 'Error line content: ensures *(pIp->ret) == \\let abs_fx1 = (pIp->fx1 < 0.0f ? -pIp->fx1 : pIp->fx1);')

Postcond Results:
- False

------------------------------------------------
File Name: MatrixMulti.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/MatrixMulti.c, line 11) in 'MatrixMultiFun':\nOutput/MatrixMulti.c:12: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: array type non-supported({ ℤ}ℝ)\nOutput/MatrixMulti.c:13: warning from wp:\n - Warning: Hide sub-term definition\n   Reason: Lambda-functions not yet implemented\nLet x = pIp_0.F10___MatrixMulti_nrow.\nLet x_1 = pIp_0.F10___MatrixMulti_nrc.\nLet x_2 = pIp_0.F10___MatrixMulti_ncol.\nLet a = pIp_0.F10___MatrixMulti_product.\nLet a_1 = shift_float32(a, 0).\nLet x_3 = x * x_2.\nLet a_2 = pIp_0.F10___MatrixMulti_multiplier.\nLet a_3 = pIp_0.F10___MatrixMulti_faciend.\nAssume {\n  Type: is_uint8(ir_0) /\\ is_uint8(x) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixMulti_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (0 <= i) /\\ (i_1 < x) /\\ (i < x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x * x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1 * x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: (0 < x) /\\ (0 < x_1) /\\ (0 < x_2).\n  (* Invariant *)\n  Have: (0 <= ir_0) /\\ (ir_0 <= x).\n  (* Else *)\n  Have: x <= ir_0.\n}\nProve: of_f32(havoc(Mf32_undef_0, Mf32_0, a_1, x_3)\n                [shift_float32(a, i + (i_1 * x_2))]) = w.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/MatrixMulti.c at line: 11', 'Error line content: ensures \\forall integer i, j; 0 <= i < pIp->nrow && 0 <= j < pIp->ncol ==>')

Postcond Results:
- False

------------------------------------------------
File Name: InitVar.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (2/10):\nEffect at line 48\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:0.92ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (3/10):\nEffect at line 48\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (4/10):\nEffect at line 48\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (5/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32024), 1).\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (6/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32364), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (7/10):\nEffect at line 49\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32704), 1).\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (8/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (9/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')
- ("Goal Assigns (file Output/InitVar.c, line 6) in 'InitVarFun' (10/10):\nEffect at line 50\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/InitVar.c at line: 6', 'Error line content: assigns pIp->flg160INT, pIp->flgPRSAM, pIp->mGyroData.gyroStatus0, pIp->mGyroData.gyroStatus1,')

Assertion Results:
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

------------------------------------------------
File Name: AppInit.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'AppInitFun' (1/3):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (2/3):\nEffect at line 30\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'AppInitFun' (3/3):\nEffect at line 36\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32899), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: main.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (1/3):\nEffect at line 14\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (2/3):\nEffect at line 17\nLet a = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')
- ("Goal Assigns (file Output/main.c, line 8) in 'mainFun' (3/3):\nEffect at line 19\nLet a = pIp_1.F12___main_ret.\nLet a_1 = pIp_0.F12___main_ret.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___main_fun.base) <= 0) /\\ (region(a.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: a_1 = a.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/main.c at line: 8', 'Error line content: assigns *(pIp->ret);')

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: CalculateGyroRs.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CalculateGyroRs.c (with preprocessing)
[kernel:annot-error] Output/CalculateGyroRs.c:21: Warning: 
  unbound logic variable Rgtrans. Ignoring logic specification of function CalculateGyroRsFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CheckCal.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CheckCal.c, line 25):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___CheckCal_len.\nLet a = pIp_0.F10___CheckCal_pkv.\nLet x_2 = Mint_0[shift_uint8(a, i)].\nLet x_3 = L_sum(Mint_0, a, 0, i).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3).\n  (* Heap *)\n  Type: (region(pIp_0.F10___CheckCal_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a, 0), x_1).\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: L_sum(Mint_0, a, 0, 0) = 0.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: to_uint8(x_2 + x_3) = L_sum(Mint_0, a, 0, x).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)', 'Error found in file: Output/CheckCal.c at line: 25', 'Error line content: loop invariant chksum == sum(pIp->pkv, 0, i);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: SendUartData.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SendUartData.c (with preprocessing)
[kernel:annot-error] Output/SendUartData.c:8: Warning: 
  \old(pIp)->addr is not a pointer.. Ignoring logic specification of function SendUartDataFun
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TMProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
- ("Goal Assigns nothing in 'TMProcessFun' (2/41):\nEffect at line 32\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (38/41):\nEffect at line 86\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TMProcessFun' (41/41):\nEffect at line 92\nAssume {\n  Type: is_uint64(i).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= 32).\n  (* Else *)\n  Have: 32 <= i.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (3s)", None, None)

Assertion Results:
- True
- False
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- False
- True
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Float.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: NoctrlJudge.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/NoctrlJudge.c, line 11) in 'NoctrlJudgeFun' (2/3):\nEffect at line 23\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.80ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 11', 'Error line content: assigns pIp->mFWarning.countAV, pIp->mFWarning.Wav, pIp->nouse;')

Assertion Results:
- True
- False
- True

Postcond Errors:
- ("Goal Post-condition (file Output/NoctrlJudge.c, line 10) in 'NoctrlJudgeFun':\nLet x = (pIp_1.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV.\nLet x_1 = (pIp_0.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\\n      is_uint32((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_3.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV) /\\\n      is_uint32((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV).\n  (* Heap *)\n  Type: region(pIp_0.F11___NoctrlJudge_fun.base) <= 0.\n  If lt_f32(to_f32(2.0), Mf32_0[global(L_TripleFabsMax_ret_41)])\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F11___NoctrlJudge_mFWarning = {\n                                                  Init_pIp_0.Init_F11___NoctrlJudge_mFWarning with\n                                                  Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                  } }) = Init_pIp_0.\n    If 301\n         <= to_uint32(1\n              + ((pIp_2.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV))\n    Then {\n      Let a = pIp_2.F11___NoctrlJudge_mFWarning.\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a with\n                                               F4_TAG_FAULT_WARNING_Wav = 235 ;\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_1.\n    }\n    Else {\n      Have: ({ pIp_2 with\n               F11___NoctrlJudge_mFWarning = { a with\n                                               F4_TAG_FAULT_WARNING_countAV = \n                                                 to_uint32(1\n                                                   + (a.F4_TAG_FAULT_WARNING_countAV))\n                                               } }) = pIp_1.\n    }\n  }\n  Else {\n    If 0 < ((pIp_4.F11___NoctrlJudge_mFWarning).F4_TAG_FAULT_WARNING_countAV)\n    Then {\n      Let a_1 = pIp_3.F11___NoctrlJudge_mFWarning.\n      Have: pIp_4 = pIp_3.\n      Have: (({ Init_pIp_1 with\n                Init_F11___NoctrlJudge_mFWarning = {\n                                                     Init_pIp_1.Init_F11___NoctrlJudge_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countAV = true\n                                                     } }) = Init_pIp_1) /\\\n          (({ pIp_3 with\n              F11___NoctrlJudge_mFWarning = { a_1 with\n                                              F4_TAG_FAULT_WARNING_countAV = \n                                                to_uint32((a_1.F4_TAG_FAULT_WARNING_countAV)\n                                                  - 1) } }) = pIp_1).\n    }\n    Else {\n      Have: pIp_4 = pIp_1.\n      Have: ({ Init_pIp_1 with Init_F11___NoctrlJudge_nouse = true }) =\n          Init_pIp_1.\n    }\n  }\n}\nProve: x_1 <= x.\nProver Z3 4.8.12 returns Timeout (Qed:29ms) (3s)", 'Error found in file: Output/NoctrlJudge.c at line: 10', 'Error line content: ensures pIp->mFWarning.countAV >= \\old(pIp->mFWarning.countAV);')

Postcond Results:
- False

------------------------------------------------
File Name: GyroChoose.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroChoose.c, line 24):\nLet a = pIp_0.F10___GyroChoose_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a).\nLet x = Mint_0[a_1].\nLet x_1 = to_uint8(1 + i_1).\nLet a_2 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_stateFlag(a).\nLet x_2 = Mint_2[shift_uint64(a_2, i_1)].\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_4 = shift_uint8(a_3, 0).\nLet x_3 = Mint_1[a_1].\nAssume {\n  Type: is_uint8(i_1) /\\ is_uint8(v) /\\ is_uint8(x) /\\ is_uint8(x_3) /\\\n      is_uint64(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroChoose_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (Mint_2[shift_uint64(a_2, i)] = 235) /\\ (0 <= i) /\\ (i < x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_2, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Pre-condition *)\n  Have: (0 <= x_3) /\\ (x_3 <= 9).\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= 9).\n  (* Invariant *)\n  Have: (v <= i_1) /\\ (0 <= v).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((Mint_2[shift_uint64(a_2, i_2)] = 235) ->\n      ((0 <= i_2) -> ((i_2 < i_1) ->\n      (havoc(Mint_undef_0, Mint_1[a_1 <- 0], a_4, 9)[a_1 <- v]\n         [shift_uint8(a_3, v - 1)] = i_2)))).\n  (* Then *)\n  Have: i_1 <= 8.\n  If x_2 = 235\n  Then {\n    Let a_5 = havoc(Mint_undef_0, Mint_1[a_1 <- 0], a_4, 9)[a_1 <- v]\n                [shift_uint8(a_3, v) <- i_1].\n    Have: a_5[a_1 <- to_uint8(1 + a_5[a_1])] = Mint_0.\n  }\n  Else {\n    Have: havoc(Mint_undef_0, Mint_1[a_1 <- 0], a_4, 9)[a_1 <- v] = Mint_0.\n  }\n  (* Invariant *)\n  Have: x_1 <= 9.\n  (* Invariant *)\n  Have: (0 <= x) /\\ (x <= x_1).\n}\nProve: Mint_0[shift_uint8(a_3, x - 1)] = i.\nProver Z3 4.8.12 returns Timeout (Qed:24ms) (3s)', 'Error found in file: Output/GyroChoose.c at line: 24', 'Error line content: loop invariant \\forall integer k; 0 <= k < i ==>')

Loop Invariant Results:
- True
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrusterCtrlLogic.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 7) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(x_6) /\\ is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 2).\nProver Z3 4.8.12 returns Timeout (Qed:81ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 7', 'Error line content: ensures (pIp->mModulator[0].Yp != 0 ==> (pIp->mThrDistribute.wPulse & 0x04) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 8) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[0].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[1].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_6) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 3).\nProver Z3 4.8.12 returns Timeout (Qed:82ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 8', 'Error line content: ensures (pIp->mModulator[0].Yn != 0 ==> (pIp->mThrDistribute.wPulse & 0x08) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 9) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[1].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x_6) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 4).\nProver Z3 4.8.12 returns Timeout (Qed:81ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 9', 'Error line content: ensures (pIp->mModulator[1].Yp != 0 ==> (pIp->mThrDistribute.wPulse & 0x10) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 10) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[1].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[2].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\ is_uint8(x_6) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 5).\nProver Z3 4.8.12 returns Timeout (Qed:76ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 10', 'Error line content: ensures (pIp->mModulator[1].Yn != 0 ==> (pIp->mThrDistribute.wPulse & 0x20) != 0);')
- ("Goal Post-condition (file Output/ThrusterCtrlLogic.c, line 11) in 'ThrusterCtrlLogicFun':\nLet x = (pIp_7.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_1 = (pIp_8.F10___ThrusterCtrlLogic_mModulator)[2].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_2 = (pIp_9.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_3 = (pIp_10.F10___ThrusterCtrlLogic_mModulator)[1].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_4 = (pIp_11.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yn.\nLet x_5 = (pIp_12.F10___ThrusterCtrlLogic_mModulator)[0].F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet a = pIp_0.F10___ThrusterCtrlLogic_mModulator.\nLet a_1 = a[2].\nLet x_6 = a_1.F2_TAG_FALSE_RATE_MODULATOR_Yp.\nLet x_7 = (pIp_0.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse.\nLet a_2 = a[0].\nLet a_3 = a[1].\nAssume {\n  Type: is_uint8(x_7) /\\\n      is_uint8((pIp_1.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_2.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_3.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_4.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_5.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8((pIp_6.F10___ThrusterCtrlLogic_mThrDistribute).F3_TAG_UPS_2MS_wPulse) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_2.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yp) /\\\n      is_uint8(a_3.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x_6) /\\\n      is_uint8(a_1.F2_TAG_FALSE_RATE_MODULATOR_Yn) /\\ is_uint8(x) /\\\n      is_uint8(x_1) /\\ is_uint8(x_2) /\\ is_uint8(x_3) /\\ is_uint8(x_4) /\\\n      is_uint8(x_5).\n  (* Heap *)\n  Type: region(pIp_12.F10___ThrusterCtrlLogic_fun.base) <= 0.\n  (* Goal *)\n  When: x_6 != 0.\n  If x_5 != 0\n  Then {\n    Let a_4 = pIp_6.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_12 = pIp_6.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_6 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_4 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(4,\n                                                         a_4.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_11).\n  }\n  Else { Have: pIp_12 = pIp_11. }\n  If x_4 != 0\n  Then {\n    Let a_5 = pIp_5.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_11 = pIp_5.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_5 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_5 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(8,\n                                                         a_5.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_10).\n  }\n  Else { Have: pIp_11 = pIp_10. }\n  If x_3 != 0\n  Then {\n    Let a_6 = pIp_4.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_10 = pIp_4.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_6 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(16,\n                                                         a_6.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_9).\n  }\n  Else { Have: pIp_10 = pIp_9. }\n  If x_2 != 0\n  Then {\n    Let a_7 = pIp_3.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_9 = pIp_3.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_7 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(32,\n                                                         a_7.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_8).\n  }\n  Else { Have: pIp_9 = pIp_8. }\n  If x_1 != 0\n  Then {\n    Let a_8 = pIp_2.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_8 = pIp_2.\n    Have: (({ Init_pIp_0 with\n              Init_F10___ThrusterCtrlLogic_mThrDistribute = {\n                                                              Init_pIp_0.Init_F10___ThrusterCtrlLogic_mThrDistribute with\n                                                              Init_F3_TAG_UPS_2MS_wPulse = true\n                                                              } }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with\n            F10___ThrusterCtrlLogic_mThrDistribute = { a_8 with\n                                                       F3_TAG_UPS_2MS_wPulse = lor(64,\n                                                         a_8.F3_TAG_UPS_2MS_wPulse)\n                                                       } }) = pIp_7).\n  }\n  Else { Have: pIp_8 = pIp_7. }\n  If x != 0\n  Then {\n    Let a_9 = pIp_1.F10___ThrusterCtrlLogic_mThrDistribute.\n    Have: pIp_7 = pIp_1.\n    Have: ({ pIp_1 with\n             F10___ThrusterCtrlLogic_mThrDistribute = { a_9 with\n                                                        F3_TAG_UPS_2MS_wPulse = lor(128,\n                                                          a_9.F3_TAG_UPS_2MS_wPulse)\n                                                        } }) = pIp_0.\n  }\n  Else { Have: pIp_7 = pIp_0. }\n}\nProve: bit_test(x_7, 6).\nProver Z3 4.8.12 returns Timeout (Qed:83ms) (3s)", 'Error found in file: Output/ThrusterCtrlLogic.c at line: 11', 'Error line content: ensures (pIp->mModulator[2].Yp != 0 ==> (pIp->mThrDistribute.wPulse & 0x40) != 0);')

Postcond Results:
- False
- False
- False
- False
- False
- True

------------------------------------------------
File Name: SAMSubModeCruise.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/GyroProceed.c, line 14) in 'GyroProceedFun' (2/9):\nEffect at line 21\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 14', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 14) in 'GyroProceedFun' (3/9):\nEffect at line 24\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.85ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 14', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 14) in 'GyroProceedFun' (4/9):\nEffect at line 27\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 14', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 14) in 'GyroProceedFun' (5/9):\nEffect at line 30\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 14', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 14) in 'GyroProceedFun' (8/9):\nEffect at line 37\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 14', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')
- ("Goal Assigns (file Output/GyroProceed.c, line 14) in 'GyroProceedFun' (9/9):\nEffect at line 43\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroProceed.c at line: 14', 'Error line content: assigns pIp->mGyroData.Gi[0], pIp->mGyroData.Gi[1];')

Assertion Results:
- True
- False
- False
- False
- False
- True
- True
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Inputproceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (2/4):\nEffect at line 20\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1];')
- ("Goal Assigns (file Output/Inputproceed.c, line 9) in 'InputproceedFun' (4/4):\nEffect at line 24\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.86ms) (3s)", 'Error found in file: Output/Inputproceed.c at line: 9', 'Error line content: assigns pIp->mAttitude.angle[0], pIp->mAttitude.angle[1];')

Assertion Results:
- True
- False
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: SoftFaultJudgeSP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 7) in 'SoftFaultJudgeSPFun':\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet x_1 = 1 + x.\nLet a_1 = Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning.\nLet a_2 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_2 = a_2.F4_TAG_FAULT_WARNING_countSPLost.\nAssume {\n  Type: is_uint8(a_2.F4_TAG_FAULT_WARNING_Wsp) /\\ is_uint32(x_2) /\\\n      is_uint32(a_2.F4_TAG_FAULT_WARNING_countSPSeen) /\\\n      is_uint32(a_2.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x) /\\\n      is_uint32(a.F4_TAG_FAULT_WARNING_countSPSeen).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: ((pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP) = 0.\n  Have: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                     } }) = Init_pIp_0.\n  Have: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = { a_1 with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                     } }) = Init_pIp_0.\n  If 33751 <= to_uint32(x_1)\n  Then {\n    Let a_3 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: Init_pIp_0 = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_3 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else {\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPLost = \n                                                    to_uint32(x_1) ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                  } }) = pIp_0.\n  }\n}\nProve: x_2 = x_1.\nProver Z3 4.8.12 returns Unknown (Qed:23ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 7', 'Error line content: ensures \\old(pIp->mDSSData.flgSP) == 0 ==> pIp->mFWarning.countSPLost == \\old(pIp->mFWarning.countSPLost) + 1;')
- ("Goal Post-condition (file Output/SoftFaultJudgeSP.c, line 9) in 'SoftFaultJudgeSPFun':\nLet x = (pIp_2.F10___SoftFaultJudgeSP_mFWarning).F4_TAG_FAULT_WARNING_countSPLost.\nLet a = pIp_1.F10___SoftFaultJudgeSP_mFWarning.\nLet x_1 = a.F4_TAG_FAULT_WARNING_countSPSeen.\nLet x_2 = 1 + x_1.\nLet x_3 = (pIp_1.F10___SoftFaultJudgeSP_mDSSData).F5_TAG_DSS_DATA_flgSP.\nLet x_4 = a.F4_TAG_FAULT_WARNING_countSPLost.\nLet a_1 = pIp_0.F10___SoftFaultJudgeSP_mFWarning.\nLet x_5 = a_1.F4_TAG_FAULT_WARNING_countSPSeen.\nAssume {\n  Type: is_uint8(a_1.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPLost) /\\ is_uint32(x_5) /\\\n      is_uint32(a_1.F4_TAG_FAULT_WARNING_countSPset) /\\ is_uint32(x_4) /\\\n      is_uint32(x_1) /\\ is_uint32(x) /\\ is_uint64(x_3).\n  (* Heap *)\n  Type: region(pIp_1.F10___SoftFaultJudgeSP_fun.base) <= 0.\n  (* Goal *)\n  When: (x_3 != 0) /\\ (x_4 != 0).\n  Have: ({ Init_pIp_0 with\n           Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                     Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                     Init_F4_TAG_FAULT_WARNING_countSPSeen = true\n                                                     } }) = Init_pIp_0.\n  If 3 <= to_uint32(x_2)\n  Then {\n    Have: ({ Init_pIp_0 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = {\n                                                       Init_pIp_0.Init_F10___SoftFaultJudgeSP_mFWarning with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_0.\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = 0\n                                                  } }) = pIp_2.\n  }\n  Else {\n    Have: ({ pIp_1 with\n             F10___SoftFaultJudgeSP_mFWarning = { a with\n                                                  F4_TAG_FAULT_WARNING_countSPSeen = \n                                                    to_uint32(x_2) } }) =\n        pIp_2.\n  }\n  If 33751 <= x\n  Then {\n    Let a_2 = Init_pIp_1.Init_F10___SoftFaultJudgeSP_mFWarning.\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_Wsp = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ Init_pIp_1 with\n             Init_F10___SoftFaultJudgeSP_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_countSPLost = true\n                                                       } }) = Init_pIp_1.\n    Have: ({ pIp_3 with\n             F10___SoftFaultJudgeSP_mFWarning = {\n                                                  pIp_3.F10___SoftFaultJudgeSP_mFWarning with\n                                                  F4_TAG_FAULT_WARNING_Wsp = 235 ;\n                                                  F4_TAG_FAULT_WARNING_countSPLost = 0 ;\n                                                  F4_TAG_FAULT_WARNING_countSPset = 0\n                                                  } }) = pIp_0.\n  }\n  Else { Have: pIp_2 = pIp_0. }\n}\nProve: x_5 = x_2.\nProver Z3 4.8.12 returns Unknown (Qed:44ms)", 'Error found in file: Output/SoftFaultJudgeSP.c at line: 9', 'Error line content: ensures \\old(pIp->mDSSData.flgSP) != 0 && \\old(pIp->mFWarning.countSPLost) != 0 ==> pIp->mFWarning.countSPSeen == \\old(pIp->mFWarning.countSPSeen) + 1;')

Postcond Results:
- False
- True
- False
- True
- True

------------------------------------------------
File Name: Delay.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: LimitControllerInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitControllerInput.c, line 8) in 'LimitControllerInputFun' (1/2):\nEffect at line 14\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.58ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 8', 'Error line content: assigns pIp->mController[0], pIp->mAttitude;')
- ("Goal Assigns (file Output/LimitControllerInput.c, line 8) in 'LimitControllerInputFun' (2/2):\nEffect at line 17\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/LimitControllerInput.c at line: 8', 'Error line content: assigns pIp->mController[0], pIp->mAttitude;')

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: GyroPick.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroPick.c, line 20):\nLet x = to_uint8(1 + iy_0).\nLet a = pIp_0.F10___GyroPick_pGyroData.\nLet a_1 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wal(a).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_4 = shift_float32(a_3, 0).\nLet a_5 = havoc(Mf32_undef_0, havoc(Mf32_undef_1, Mf32_1, a_2, 9), a_4, 9).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_countPick(a).\nLet a_7 = shift_uint8(a_6, 0).\nLet a_8 = havoc(Mint_undef_0, Mint_2, a_7, 9).\nLet x_1 = Mint_0[shift_uint8(a_6, i)].\nAssume {\n  Type: is_uint8(iy_0) /\\ is_uint8(Mint_1[shift_uint8(a_6, iy_0)]).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GyroPick_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_7, 9).\n  (* Invariant *)\n  Have: (0 <= iy_0) /\\ (iy_0 <= 9).\n  (* Invariant *)\n  Have: forall i_1 : Z. let a_9 = a_8[shift_uint8(a_6, i_1)] in\n      ((0 <= i_1) -> ((i_1 < iy_0) ->\n      ((a_9 = 0) \\/\n       (of_f32(a_5[shift_float32(a_1, i_1)])\n          = of_f32(a_5[shift_float32(a_3, i_1)])) \\/ (a_9 <= 5)))).\n  (* Then *)\n  Have: iy_0 <= 8.\n  If lt_f32(to_f32(.0),\n       sub_f32(a_5[shift_float32(a_3, iy_0)], a_5[shift_float32(a_1, iy_0)]))\n  Then {\n    Have: sub_f32(a_5[shift_float32(a_3, iy_0)],\n            a_5[shift_float32(a_1, iy_0)]) = tmpgi_0.\n  }\n  Else {\n    Have: neg_f32(sub_f32(a_5[shift_float32(a_3, iy_0)],\n                    a_5[shift_float32(a_1, iy_0)])) = tmpgi_0.\n  }\n  If lt_f32(to_f32((6442451.0/134217728)), tmpgi_0)\n  Then {\n    Have: a_8 = Mint_1.\n    If to_uint8(1 + Mint_1[shift_uint8(a_6, iy_0)]) <= 5\n    Then {\n      Let a_9 = shift_uint8(a_6, iy_0).\n      Have: (Mint_1[a_9 <- to_uint8(1 + Mint_1[a_9])] = Mint_0) /\\\n          (a_5 = Mf32_2).\n      Have: Mf32_2[shift_float32(a_3, iy_0)\n              <- Mf32_2[shift_float32(a_1, iy_0)]] = Mf32_0.\n    }\n    Else {\n      Have: a_5 = Mf32_3.\n      Have: Mf32_3[shift_float32(a_1, iy_0)\n              <- Mf32_3[shift_float32(a_3, iy_0)]] = Mf32_0.\n      Have: Mint_1[a_9 <- 0] = Mint_0.\n    }\n  }\n  Else {\n    Have: (a_8 = Mint_3) /\\ (a_5 = Mf32_4).\n    Have: Mf32_4[shift_float32(a_1, iy_0)\n            <- Mf32_4[shift_float32(a_3, iy_0)]] = Mf32_0.\n    Have: Mint_3[a_9 <- 0] = Mint_0.\n  }\n  (* Invariant *)\n  Have: x <= 9.\n}\nProve: (x_1 = 0) \\/\n    (of_f32(Mf32_0[shift_float32(a_1, i)])\n       = of_f32(Mf32_0[shift_float32(a_3, i)])) \\/ (x_1 <= 5).\nProver Z3 4.8.12 returns Timeout (Qed:74ms) (2.6s)', 'Error found in file: Output/GyroPick.c at line: 20', 'Error line content: loop invariant \\forall integer k; 0 <= k < iy ==>')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'TcProcessFun' (1/2):\nEffect at line 22\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.80ms) (3s)", None, None)
- ("Goal Assigns nothing in 'TcProcessFun' (2/2):\nEffect at line 31\nAssume { (* Then *) Have: Mint_0[global(L_GetUartData_ret_44)] = 1. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:0.80ms) (3s)", None, None)

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: MatrixInv33F.c

Syntax Error:
syntax Error
[kernel] Parsing Output/MatrixInv33F.c (with preprocessing)
[kernel] "/home/yangfp/AutoSpec/Output/MatrixInv33F.c":66: User Error: 
  Can't preprocess annotation: Preprocessor call exited with an error
  Some annotations will be kept as is
[kernel:annot-error] Output/MatrixInv33F.c:12: Warning: 
  lexical error, unexpected block-comment opening
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: PeriodControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True
- True
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: GetUartData.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GetUartData.c, line 20):\nLet x = to_uint64(1 + i).\nLet x_1 = pIp_0.F10___GetUartData_len.\nLet a = pIp_0.F10___GetUartData_data.\nLet a_1 = shift_uint8(a, 0).\nLet a_2 = havoc(Mint_undef_0, Mint_0, a_1, x_1).\nLet a_3 = pIp_0.F10___GetUartData_ret.\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(x_1) /\\\n      is_uint64(pIp_0.F10___GetUartData_bSucc).\n  (* Heap *)\n  Type: (region(pIp_0.F10___GetUartData_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i_1) /\\ (i_1 < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 1).\n  Have: ({ Init_pIp_0 with Init_F10___GetUartData_bSucc = true }) =\n      Init_pIp_0.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Invariant *)\n  Have: forall i_2 : Z. ((0 <= i_2) -> ((i_2 < i) ->\n      (a_2[shift_uint8(a, i_2)] = w_2))).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: a_2[shift_uint8(a, i) <- to_uint8(w)][shift_uint8(a, i_1)] = w_1.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)', 'Error found in file: Output/GetUartData.c at line: 20', 'Error line content: loop invariant \\forall integer k; 0 <= k < i ==> pIp->data[k] == \\at(ADDR_READ(pIp->addr), Pre);')

Loop Invariant Results:
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/GetUartData.c, line 8) in 'GetUartDataFun':\nLet x = pIp_1.F10___GetUartData_len.\nLet a = pIp_1.F10___GetUartData_data.\nLet a_1 = shift_uint8(a, 0).\nLet a_2 = pIp_1.F10___GetUartData_ret.\nLet x_1 = pIp_1.F10___GetUartData_bSucc.\nLet x_2 = pIp_0.F10___GetUartData_bSucc.\nAssume {\n  Type: is_uint64(fifoCnt_0) /\\ is_uint64(i) /\\ is_uint64(x) /\\\n      is_uint64(x_1) /\\ is_uint64(x_2).\n  (* Heap *)\n  Type: (region(pIp_1.F10___GetUartData_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  Have: ({ Init_pIp_0 with Init_F10___GetUartData_bSucc = true }) =\n      Init_pIp_0.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < i) ->\n      (havoc(Mint_undef_0, Mint_0, a_1, x)[shift_uint8(a, i_1)] = w))).\n  (* Else *)\n  Have: x <= i.\n  If x = fifoCnt_0\n  Then { Have: ({ pIp_1 with F10___GetUartData_bSucc = 1 }) = pIp_0. }\n  Else { Have: ({ pIp_1 with F10___GetUartData_bSucc = 0 }) = pIp_0. }\n}\nProve: x_2 = x_1.\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/GetUartData.c at line: 8', 'Error line content: ensures *(pIp->ret) == \\old(pIp->bSucc);')

Postcond Results:
- False

------------------------------------------------
File Name: GyroStateGet.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 41):\nLet x = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_2 = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_3 = to_uint64(2 + to_uint64(2 * i_1)).\nAssume {\n  Type: is_uint64(i_1) /\\ is_uint64(i) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(x) /\\ is_uint8(Mint_0[shift_uint8(a, x_3)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, to_uint64(1 + x_3))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: valid_rw(Malloc_1, shift_float32(pIp_2.F14___GyroStateGet_wa, 0), x).\n  (* Invariant *)\n  Have: valid_rw(Malloc_1,\n          shift_uint64(pIp_2.F14___GyroStateGet_stateFlag, 0), x).\n  (* Invariant *)\n  Have: (0 <= i_1) /\\ (i_1 <= x).\n  (* Then *)\n  Have: i_1 < x.\n}\nProve: to_uint64(1 + i) <= x_2.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 41', 'Error line content: /*@ loop invariant 0 <= i <= pIp->NumGyro;')
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 42):\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_1 = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_2 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_3 = to_uint64(2 + to_uint64(2 * i)).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(i_1) /\\ is_uint64(x_2) /\\ is_uint64(x) /\\\n      is_uint64(x_1) /\\ is_uint8(Mint_0[shift_uint8(a, x_3)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, to_uint64(1 + x_3))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_2).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: valid_rw(Malloc_2, shift_float32(pIp_2.F14___GyroStateGet_wa, 0),\n          x_1).\n  (* Invariant *)\n  Have: valid_rw(Malloc_2,\n          shift_uint64(pIp_2.F14___GyroStateGet_stateFlag, 0), x_1).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: to_uint64(1 + i_1) <= x.\n}\nProve: valid_rw(Malloc_0[L_DiviationToFloat_ret_75 <- 0]\n                  [L_ipDiviationToFloat_76 <- 0],\n         shift_float32(pIp_0.F14___GyroStateGet_wa, 0), x).\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 42', 'Error line content: loop invariant \\valid(pIp->wa + (0..pIp->NumGyro-1));')
- ('Goal Establishment of Invariant (file Output/GyroStateGet.c, line 42):\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n}\nProve: valid_rw(Malloc_0, shift_float32(pIp_0.F14___GyroStateGet_wa, 0), x).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 42', 'Error line content: loop invariant \\valid(pIp->wa + (0..pIp->NumGyro-1));')
- ('Goal Preservation of Invariant (file Output/GyroStateGet.c, line 43):\nLet m = Malloc_0[L_DiviationToFloat_ret_75 <- 0][L_ipDiviationToFloat_76\n          <- 0].\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet x_1 = pIp_2.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_2 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nLet x_3 = to_uint64(2 + to_uint64(2 * i)).\nAssume {\n  Type: is_uint64(i) /\\ is_uint64(i_1) /\\ is_uint64(x_2) /\\ is_uint64(x) /\\\n      is_uint64(x_1) /\\ is_uint8(Mint_0[shift_uint8(a, x_3)]) /\\\n      is_uint8(Mint_0[shift_uint8(a, to_uint64(1 + x_3))]).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_2).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: valid_rw(Malloc_2, shift_float32(pIp_2.F14___GyroStateGet_wa, 0),\n          x_1).\n  (* Invariant *)\n  Have: valid_rw(Malloc_2,\n          shift_uint64(pIp_2.F14___GyroStateGet_stateFlag, 0), x_1).\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_1).\n  (* Then *)\n  Have: i < x_1.\n  (* Invariant *)\n  Have: to_uint64(1 + i_1) <= x.\n  (* Invariant *)\n  Have: valid_rw(m, shift_float32(pIp_0.F14___GyroStateGet_wa, 0), x).\n}\nProve: valid_rw(m, shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, 0), x).\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 43', 'Error line content: loop invariant \\valid(pIp->stateFlag + (0..pIp->NumGyro-1));')
- ('Goal Establishment of Invariant (file Output/GyroStateGet.c, line 43):\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a = global(L_gyroRecvData_63).\nLet a_1 = pIp_1.F14___GyroStateGet_stateFlag.\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_2 = pIp_1.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a_2.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_float32(a_2, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_uint64(a_1, 0), x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: valid_rw(Malloc_0, shift_float32(pIp_0.F14___GyroStateGet_wa, 0), x).\n}\nProve: valid_rw(Malloc_0,\n         shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, 0), x).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)', 'Error found in file: Output/GyroStateGet.c at line: 43', 'Error line content: loop invariant \\valid(pIp->stateFlag + (0..pIp->NumGyro-1));')

Loop Invariant Results:
- False
- False
- False

Assertion Errors:
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (3/7):\nEffect at line 25\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (4/7):\nEffect at line 28\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (5/7):\nEffect at line 32\nLet a = pIp_0.F14___GyroStateGet_stateFlag.\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = pIp_0.F14___GyroStateGet_wa.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_1, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint64(a, 0), x).\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1];')
- ("Goal Assigns (file Output/GyroStateGet.c, line 12) in 'GyroStateGetFun' (7/7):\nEffect at line 47\nLet a = shift_uint64(pIp_0.F14___GyroStateGet_stateFlag, 0).\nLet x = pIp_0.F14___GyroStateGet_NumGyro.\nLet a_1 = shift_float32(pIp_0.F14___GyroStateGet_wa, 0).\nLet a_2 = global(L_gyroRecvData_63).\nLet a_3 = pIp_1.F14___GyroStateGet_stateFlag.\nLet a_4 = shift_uint64(a_3, 0).\nLet x_1 = pIp_1.F14___GyroStateGet_NumGyro.\nLet a_5 = pIp_1.F14___GyroStateGet_wa.\nLet a_6 = shift_float32(a_5, 0).\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_1.F14___GyroStateGet_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a_5.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_6, x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, x_1).\n  (* Then *)\n  Have: Mint_0[shift_uint8(a_2, 0)] = 235.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a_2, 1)] = 145.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: valid_rw(Malloc_1, a_1, x).\n  (* Invariant *)\n  Have: valid_rw(Malloc_1, a, x).\n}\nProve: (((!invalid(Malloc_0, a_1, x)) ->\n        (included(a_1, x, a_6, x_1) \\/ included(a_1, x, a_4, x_1)))) /\\\n    (((!invalid(Malloc_0, a, x)) ->\n     (included(a, x, a_6, x_1) \\/ included(a, x, a_4, x_1)))).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/GyroStateGet.c at line: 12', 'Error line content: assigns pIp->wa[0..pIp->NumGyro-1];')

Assertion Results:
- True
- True
- False
- False
- False
- True
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: JetDataGet.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/JetDataGet.c, line 8) in 'JetDataGetFun' (2/2):\nEffect at line 35\nProve: false.\nProver Z3 4.8.12 returns Timeout (3s)", 'Error found in file: Output/JetDataGet.c at line: 8', 'Error line content: assigns pIp->mThrDistribute.stateFlag[0..1];')

Assertion Results:
- True
- False

Postcond Errors:
- ("Goal Post-condition (file Output/JetDataGet.c, line 9) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[0].\nAssume {\n  Type: is_uint8(a_1) /\\ is_uint8(a[1]).\n  (* Goal *)\n  When: bit_test(w, 2).\n}\nProve: a_1 = 1.\nProver Z3 4.8.12 returns Timeout (Qed:0.92ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 9', 'Error line content: ensures (ADDR_READ(0xE000) & 0x4) == 0x4 ==> pIp->mThrDistribute.stateFlag[0] == 1;')
- ("Goal Post-condition (file Output/JetDataGet.c, line 10) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[0].\nAssume {\n  Type: is_uint8(a_1) /\\ is_uint8(a[1]).\n  (* Goal *)\n  When: !bit_test(w, 2).\n}\nProve: a_1 = 0.\nProver Z3 4.8.12 returns Timeout (Qed:0.89ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 10', 'Error line content: ensures (ADDR_READ(0xE000) & 0x4) != 0x4 ==> pIp->mThrDistribute.stateFlag[0] == 0;')
- ("Goal Post-condition (file Output/JetDataGet.c, line 11) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[1].\nAssume {\n  Type: is_uint8(a[0]) /\\ is_uint8(a_1).\n  (* Goal *)\n  When: bit_test(w, 3).\n}\nProve: a_1 = 1.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 11', 'Error line content: ensures (ADDR_READ(0xE000) & 0x8) == 0x8 ==> pIp->mThrDistribute.stateFlag[1] == 1;')
- ("Goal Post-condition (file Output/JetDataGet.c, line 12) in 'JetDataGetFun':\nLet a = (pIp_0.F11___JetDataGet_mThrDistribute).F3_TAG_UPS_2MS_stateFlag.\nLet a_1 = a[1].\nAssume {\n  Type: is_uint8(a[0]) /\\ is_uint8(a_1).\n  (* Goal *)\n  When: !bit_test(w, 3).\n}\nProve: a_1 = 0.\nProver Z3 4.8.12 returns Timeout (Qed:0.90ms) (3s)", 'Error found in file: Output/JetDataGet.c at line: 12', 'Error line content: ensures (ADDR_READ(0xE000) & 0x8) != 0x8 ==> pIp->mThrDistribute.stateFlag[1] == 0;')

Postcond Results:
- False
- False
- False
- False

------------------------------------------------
File Name: SwitchSS.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'SwitchSSFun' (1/2):\nEffect at line 15\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F10___SwitchSS_fun.base) <= 0) /\\ linked(Malloc_0).\n  (* Then *)\n  Have: ((pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A) = 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", None, None)
- ("Goal Assigns nothing in 'SwitchSSFun' (2/2):\nEffect at line 19\nLet x = (pIp_0.F10___SwitchSS_mDSSData).F5_TAG_DSS_DATA_stateFlag_A.\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SwitchSS_fun.base) <= 0) /\\ linked(Malloc_0).\n  (* Else *)\n  Have: x != 1.\n}\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Unknown (Qed:0.64ms)", None, None)

Assertion Results:
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: SAMSubModePitch.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (4/21):\nEffect at line 37\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (5/21):\nEffect at line 37\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (6/21):\nEffect at line 37\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (7/21):\nEffect at line 40\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (8/21):\nEffect at line 40\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (9/21):\nEffect at line 40\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (10/21):\nEffect at line 46\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Else *)\n  Have: to_uint64(1 + x) <= 16.\n}\nProve: invalid(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Up(a_2), 1).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (11/21):\nEffect at line 47\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Else *)\n  Have: to_uint64(1 + x) <= 16.\n}\nProve: invalid(Malloc_0,\n         shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)),\n         1).\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (12/21):\nEffect at line 48\nLet x = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  (* Else *)\n  Have: to_uint64(1 + x) <= 16.\n}\nProve: invalid(Malloc_0,\n         shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)),\n         1).\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (13/21):\nEffect at line 60\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:54ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (14/21):\nEffect at line 60\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:53ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (15/21):\nEffect at line 60\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:54ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (16/21):\nEffect at line 61\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32024), 1).\nProver Z3 4.8.12 returns Timeout (Qed:63ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (17/21):\nEffect at line 61\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32364), 1).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (18/21):\nEffect at line 61\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32704), 1).\nProver Z3 4.8.12 returns Timeout (Qed:50ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (19/21):\nEffect at line 62\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:61ms) (2.5s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (20/21):\nEffect at line 62\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:62ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')
- ("Goal Assigns (file Output/SAMSubModePitch.c, line 12) in 'SAMSubModePitchFun' (21/21):\nEffect at line 62\nLet x = pIp_1.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Type: is_sint32(fabs_0) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countPublic) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x) /\\\n      is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    Have: (ta_tmp_0=false).\n    If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n    Then {\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true\n               }) = Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F10___SAMSubModePitch_countPublic))\n      Then {\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true\n                 }) = Init_pIp_0.\n        Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n                 F10___SAMSubModePitch_countMode = 0 ;\n                 F10___SAMSubModePitch_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: ({ pIp_0 with\n                 F10___SAMSubModePitch_countPublic = to_uint64(1\n                                                       + (pIp_0.F10___SAMSubModePitch_countPublic))\n                 }) = pIp_1.\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 5626 <= x.\n}\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:66ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 12', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode;')

Assertion Results:
- True
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModePitch.c, line 13) in 'SAMSubModePitchFun':\nLet x = pIp_2.F10___SAMSubModePitch_countMode.\nLet a = pIp_0.F10___SAMSubModePitch_pCtrl.\nLet a_1 = pIp_0.F10___SAMSubModePitch_pSDS.\nLet x_1 = pIp_1.F10___SAMSubModePitch_countPublic.\nLet x_2 = pIp_1.F10___SAMSubModePitch_countMode.\nLet x_3 = pIp_1.F10___SAMSubModePitch_flgMode.\nLet x_4 = pIp_0.F10___SAMSubModePitch_countPublic.\nLet a_2 = pIp_1.F10___SAMSubModePitch_pCtrl.\nAssume {\n  Have: 1.0 < L_abs(of_f32(Mf32_1[shiftfield_F5_TAG_DSS_DATA_piyaw(a_1)])).\n  Type: is_sint32(fabs_0) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(x_3) /\\ is_uint64(x_4) /\\\n      is_uint64(pIp_0.F10___SAMSubModePitch_countMode) /\\ is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  If lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0)))\n  Then {\n    Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n        Init_pIp_0.\n    If 17 <= to_uint64(1 + x_4)\n    Then {\n      Have: Mf32_1[addr_of_int(32028) <- v][addr_of_int(32368) <- v_1]\n              [addr_of_int(32708) <- v_2] = Mf32_2.\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n          Init_pIp_0.\n      Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true }) =\n          Init_pIp_0.\n      Have: ({ pIp_0 with F10___SAMSubModePitch_countPublic = 0 ;\n               F10___SAMSubModePitch_countMode = 0 ;\n               F10___SAMSubModePitch_flgMode = 51 }) = pIp_2.\n    }\n    Else {\n      Let a_3 = to_f32(.0).\n      Have: ({ pIp_0 with\n               F10___SAMSubModePitch_countPublic = to_uint64(1 + x_4) }) =\n          pIp_2.\n      Have: Mf32_1\n              [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a,\n                                                   0)) <- a_3]\n              [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a,\n                                                   1)) <- a_3]\n              [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a,\n                                                   2)) <- a_3] = Mf32_2.\n    }\n  }\n  Else { Have: (Mf32_2 = Mf32_1) /\\ (pIp_2 = pIp_0). }\n  If 5626 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Mf32_2 = Mf32_3) /\\ (pIp_2 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F10___SAMSubModePitch_flgMode = true }) =\n        Init_pIp_1.\n    Have: Mf32_3[addr_of_int(32024) <- v_3][addr_of_int(32364) <- v_4]\n            [addr_of_int(32704) <- v_5][addr_of_int(32028) <- v_6]\n            [addr_of_int(32368) <- v_7][addr_of_int(32708) <- v_8] = Mf32_0.\n    Have: ({ Init_pIp_1 with Init_F10___SAMSubModePitch_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ pIp_3 with F10___SAMSubModePitch_countPublic = 0 ;\n             F10___SAMSubModePitch_countMode = 0 ;\n             F10___SAMSubModePitch_flgMode = 34 }) = pIp_1.\n  }\n  Else { Have: (Mf32_2 = Mf32_0) /\\ (pIp_2 = pIp_1). }\n}\nProve: (((17 <= x_4) -> ((x_1 = 0) /\\ (x_2 = 0) /\\ (x_3 = 51)))) /\\\n    (((x_4 <= 16) ->\n     ((of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2,\n                                                     0))]) = .0) /\\\n      (of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2,\n                                                     1))]) = .0) /\\\n      (of_f32(Mf32_0\n                [shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_2,\n                                                     2))]) = .0)))).\nProver Z3 4.8.12 returns Timeout (Qed:102ms) (3s)", 'Error found in file: Output/SAMSubModePitch.c at line: 13', 'Error line content: ensures \\old(pIp->pSDS->flgSP) == 1 ==>')
- ("Goal Post-condition (file Output/SAMSubModePitch.c, line 20) in 'SAMSubModePitchFun':\nLet x = pIp_1.F10___SAMSubModePitch_countPublic.\nLet a = pIp_1.F10___SAMSubModePitch_pCtrl.\nLet a_1 = pIp_1.F10___SAMSubModePitch_pSDS.\nLet x_1 = pIp_1.F10___SAMSubModePitch_countMode.\nLet x_2 = pIp_0.F10___SAMSubModePitch_countMode.\nLet x_3 = pIp_0.F10___SAMSubModePitch_countPublic.\nLet x_4 = pIp_0.F10___SAMSubModePitch_flgMode.\nAssume {\n  Type: is_sint32(fabs_0) /\\ is_uint64(x_3) /\\ is_uint64(x_2) /\\\n      is_uint64(x_4) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F10___SAMSubModePitch_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: lt_f32(to_f32(1.0), to_f32(real_of_int(fabs_0))).\n  (* Residual *)\n  When: x_2 <= 5625.\n  (* Residual *)\n  When: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a_1)] = 1.\n  (* Goal *)\n  When: 5626 <= x_1.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a, 0), 9).\n  Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countPublic = true }) =\n      Init_pIp_0.\n  If 17 <= to_uint64(1 + x)\n  Then {\n    Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_flgMode = true }) =\n        Init_pIp_0.\n    Have: ({ Init_pIp_0 with Init_F10___SAMSubModePitch_countMode = true }) =\n        Init_pIp_0.\n    Have: ({ pIp_1 with F10___SAMSubModePitch_countPublic = 0 ;\n             F10___SAMSubModePitch_countMode = 0 ;\n             F10___SAMSubModePitch_flgMode = 51 }) = pIp_0.\n  }\n  Else {\n    Have: ({ pIp_1 with F10___SAMSubModePitch_countPublic = to_uint64(1 + x)\n             }) = pIp_0.\n  }\n}\nProve: (x_3 = 0) /\\ (x_2 = 0) /\\ (x_4 = 34).\nProver Z3 4.8.12 returns Timeout (Qed:70ms) (2.6s)", 'Error found in file: Output/SAMSubModePitch.c at line: 20', 'Error line content: ensures \\old(pIp->countMode) > 5625 ==>')

Postcond Results:
- False
- False

------------------------------------------------
File Name: SoftFaultProceedSP.c

Syntax Error:
syntax Error
[kernel] Parsing Output/SoftFaultProceedSP.c (with preprocessing)
[kernel] Output/SoftFaultProceedSP.c:23: 
  syntax error:
  Location: line 23, between columns 20 and 21, before or at token: ipSwitchSS
  21        {
  22            case 5:
  23                IPCREATE(SwitchSS, ipSwitchSS);
                            ^
  24                IPCALL(ipSwitchSS);
  25                break;
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: ThrABAutoChoose.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: LimitFloat32.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/LimitFloat32.c, line 7) in 'LimitFloat32Fun':\nLet a = pIp_1.F10___LimitFloat32_ret.\nLet r = of_f32(pIp_0.F10___LimitFloat32_fbound).\nLet r_1 = of_f32(pIp_0.F10___LimitFloat32_fin).\nLet r_2 = of_f32(pIp_0.F10___LimitFloat32_fvalue).\nLet r_3 = r_1 + r.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F10___LimitFloat32_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\\n      (region(pIp_1.F10___LimitFloat32_pSCtrl.base) <= 0) /\\\n      linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n  If lt_f32(pIp_1.F10___LimitFloat32_fbound, pIp_1.F10___LimitFloat32_fin)\n  Then {\n    Have: ({ pIp_1 with\n             F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fbound }) =\n        pIp_0.\n  }\n  Else {\n    Core: ({ Init_pIp_0 with Init_F10___LimitFloat32_fvalue = true }) =\n        Init_pIp_0.\n    If lt_f32(pIp_1.F10___LimitFloat32_fin,\n         neg_f32(pIp_1.F10___LimitFloat32_fbound))\n    Then {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = neg_f32(pIp_1.F10___LimitFloat32_fbound)\n               }) = pIp_0.\n    }\n    Else {\n      Have: ({ pIp_1 with\n               F10___LimitFloat32_fvalue = pIp_1.F10___LimitFloat32_fin }) =\n          pIp_0.\n    }\n  }\n}\nProve: (((r < r_1) -> (r_2 = r))) /\\ (((r_3 < .0) -> ((r + r_2) = .0))) /\\\n    (((r_1 <= r) -> ((.0 <= r_3) -> (r_2 = r_1)))).\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/LimitFloat32.c at line: 7', 'Error line content: ensures (pIp->fin > pIp->fbound ==> pIp->fvalue == pIp->fbound) &&')

Postcond Results:
- False
- True

------------------------------------------------
File Name: DevControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'DevControlFun' (1/3):\nEffect at line 13\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(34842), 1).\nProver Z3 4.8.12 returns Timeout (3s)", None, None)
- ("Goal Assigns nothing in 'DevControlFun' (2/3):\nEffect at line 18\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32768), 1).\nProver Z3 4.8.12 returns Timeout (Qed:0.92ms) (3s)", None, None)
- ("Goal Assigns nothing in 'DevControlFun' (3/3):\nEffect at line 23\nAssume { (* Heap *) Type: linked(Malloc_0). }\nProve: invalid(Malloc_0, addr_of_int(32776), 1).\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: Tr32Uint08.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/Tr32Uint08.c, line 9) in 'Tr32Uint08Fun':\nLet a = pIp_1.F10___Tr32Uint08_pA.\nLet x = Mint_0[a].\nLet a_1 = pIp_1.F10___Tr32Uint08_pB.\nLet x_1 = Mint_0[a_1].\nLet a_2 = pIp_1.F10___Tr32Uint08_pC.\nLet a_3 = pIp_1.F10___Tr32Uint08_ret.\nLet x_2 = pIp_0.F10___Tr32Uint08_uiresult.\nLet m = Mint_1[(pIp_0.F10___Tr32Uint08_ret) <- x_2].\nLet x_3 = m[pIp_0.F10___Tr32Uint08_pA].\nLet x_4 = m[pIp_0.F10___Tr32Uint08_pC].\nLet x_5 = m[pIp_0.F10___Tr32Uint08_pB].\nAssume {\n  Type: is_uint8(uitemp1_0) /\\ is_uint8(uitemp2_0) /\\ is_uint8(uitemp3_0) /\\\n      is_uint8(x_2) /\\ is_uint8(Mint_0[a_2]) /\\ is_uint8(x_1) /\\\n      is_uint8(x) /\\ is_uint8(x_4) /\\ is_uint8(x_5) /\\ is_uint8(x_3).\n  (* Heap *)\n  Type: (region(pIp_1.F10___Tr32Uint08_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a_1.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_3.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (x_3 = x_4) /\\ (x_3 = x_5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1) /\\ valid_rw(Malloc_0, a_1, 1) /\\\n      valid_rw(Malloc_0, a, 1) /\\ valid_rw(Malloc_0, a_3, 1).\n  If x = x_1\n  Then {\n    If x = Mint_0[a_2]\n    Then {\n      Have: Mint_1 = Mint_0.\n      Have: ({ pIp_1 with F10___Tr32Uint08_uiresult = x }) = pIp_0.\n    }\n    Else {\n      Let x_6 = lor(uitemp1_0, lor(uitemp2_0, uitemp3_0)).\n      Let x_7 = Mint_0[a_2].\n      Have: to_uint8(land(x_1, x)) = uitemp1_0.\n      Have: to_uint8(land(x_7, x)) = uitemp2_0.\n      Have: to_uint8(land(x_7, x_1)) = uitemp3_0.\n      Have: (({ Init_pIp_0 with Init_F10___Tr32Uint08_uiresult = true }) =\n             Init_pIp_0) /\\\n          (({ pIp_1 with F10___Tr32Uint08_uiresult = x_6 }) = pIp_0).\n      Have: Mint_0[a <- x_6][a_1 <- x_6][a_2 <- x_6] = Mint_1.\n    }\n  }\n  Else {\n    Have: to_uint8(land(x_1, x)) = uitemp1_0.\n    Have: to_uint8(land(x_7, x)) = uitemp2_0.\n    Have: to_uint8(land(x_7, x_1)) = uitemp3_0.\n    Have: (({ Init_pIp_0 with Init_F10___Tr32Uint08_uiresult = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_1 with F10___Tr32Uint08_uiresult = x_6 }) = pIp_0).\n    Have: Mint_0[a <- x_6][a_1 <- x_6][a_2 <- x_6] = Mint_1.\n  }\n}\nProve: x_2 = x.\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (3s)", 'Error found in file: Output/Tr32Uint08.c at line: 9', 'Error line content: ensures (*(pIp->pA) == *(pIp->pB) && *(pIp->pA) == *(pIp->pC)) ==> pIp->uiresult == \\old(*(pIp->pA));')

Postcond Results:
- True
- False
- True

------------------------------------------------
File Name: LimitCtrlAngleInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 17) in 'LimitCtrlAngleInputFun' (4/7):\nEffect at line 27\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 17) in 'LimitCtrlAngleInputFun' (5/7):\nEffect at line 29\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_3).\nLet a_5 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_5), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 17) in 'LimitCtrlAngleInputFun' (6/7):\nEffect at line 33\nLet a = pIp_0.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_0.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')
- ("Goal Assigns (file Output/LimitCtrlAngleInput.c, line 17) in 'LimitCtrlAngleInputFun' (7/7):\nEffect at line 35\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)).\nLet a_2 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)).\nLet a_3 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_4 = shiftfield_F7_TAG_CONTROLLERIN_Up(a_3).\nLet a_5 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nLet a_6 = shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_5.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_6, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_3, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_5, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_5), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_4, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 1).\n}\nProve: (a_6 = a_4) \\/ (a_6 = a_2) \\/ (a_6 = a_1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 17', 'Error line content: assigns pIp->pSCtrl[0].Up, pIp->pSCtrl[1].Up, pIp->pSCtrl[2].Up;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/LimitCtrlAngleInput.c, line 14) in 'LimitCtrlAngleInputFun':\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 0][L_ipLimitFloat32_0_41\n                  <- 0][L_LimitFloat32_ret_1_42 <- 0][L_ipLimitFloat32_1_43\n                  <- 0],\n         shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                             0)), 1).\nProver Z3 4.8.12 returns Unknown (Qed:4ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 14', 'Error line content: ensures \\valid(&(pIp->pSCtrl[0].Up));')
- ("Goal Post-condition (file Output/LimitCtrlAngleInput.c, line 15) in 'LimitCtrlAngleInputFun':\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 0][L_ipLimitFloat32_0_41\n                  <- 0][L_LimitFloat32_ret_1_42 <- 0][L_ipLimitFloat32_1_43\n                  <- 0],\n         shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                             1)), 1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 15', 'Error line content: ensures \\valid(&(pIp->pSCtrl[1].Up));')
- ("Goal Post-condition (file Output/LimitCtrlAngleInput.c, line 16) in 'LimitCtrlAngleInputFun':\nLet a = pIp_1.F11___LimitCtrlAngleInput_pSCtrl.\nLet a_1 = shift_S7_TAG_CONTROLLERIN(a, 0).\nLet a_2 = pIp_1.F11___LimitCtrlAngleInput_pSA.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F11___LimitCtrlAngleInput_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_1, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a_2, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_angle(a_2), 0), 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shiftfield_F7_TAG_CONTROLLERIN_Up(a_1), 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 1)),\n          1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a, 2)),\n          1).\n}\nProve: valid_rw(Malloc_0[L_LimitFloat32_ret_0_40 <- 0][L_ipLimitFloat32_0_41\n                  <- 0][L_LimitFloat32_ret_1_42 <- 0][L_ipLimitFloat32_1_43\n                  <- 0],\n         shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(pIp_0.F11___LimitCtrlAngleInput_pSCtrl,\n                                             2)), 1).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlAngleInput.c at line: 16', 'Error line content: ensures \\valid(&(pIp->pSCtrl[2].Up));')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: SAMSubModeRoll.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (4/22):\nEffect at line 27\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (5/22):\nEffect at line 27\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (6/22):\nEffect at line 27\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:10ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (7/22):\nEffect at line 28\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:12ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (8/22):\nEffect at line 28\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:12ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (9/22):\nEffect at line 28\nLet x = pIp_0.F11___SAMSubModeRoll_countPublic.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Then *)\n  Have: Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)] = 1.\n  If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n  Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n  Else {\n    Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) = tmproyaw_0.\n  }\n  (* Then *)\n  Have: lt_f32(to_f32(1.0), tmproyaw_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n  (* Then *)\n  Have: 17 <= to_uint64(1 + x).\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:15ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (13/22):\nEffect at line 48\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:82ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (14/22):\nEffect at line 48\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:85ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (15/22):\nEffect at line 48\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:77ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (16/22):\nEffect at line 49\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32024).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:99ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (17/22):\nEffect at line 49\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32364).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:92ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (18/22):\nEffect at line 49\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32704).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:93ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (19/22):\nEffect at line 50\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32028).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:86ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (20/22):\nEffect at line 50\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32368).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:101ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (21/22):\nEffect at line 50\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_0.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_0.F11___SAMSubModeRoll_pCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = addr_of_int(32708).\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_0.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_0 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_0.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_0. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_0 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  (* Then *)\n  Have: 6251 <= x.\n}\nProve: (shiftfield_F7_TAG_CONTROLLERIN_Up(a_2) = a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 1)) =\n     a_3) \\/\n    (shiftfield_F7_TAG_CONTROLLERIN_Up(shift_S7_TAG_CONTROLLERIN(a_1, 2)) =\n     a_3).\nProver Z3 4.8.12 returns Unknown (Qed:107ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')
- ("Goal Assigns (file Output/SAMSubModeRoll.c, line 10) in 'SAMSubModeRollFun' (22/22):\nEffect at line 58\nLet x = pIp_0.F11___SAMSubModeRoll_countMode.\nLet a = pIp_1.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_1.F11___SAMSubModeRoll_pCtrl.\nAssume {\n  Type: is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      If 17 <= to_uint64(1 + (pIp_1.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_0.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_1 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_1.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_0).\n      }\n    }\n    Else { Have: pIp_0 = pIp_1. }\n  }\n  Else { Have: ({ pIp_1 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_0.\n  }\n  (* Then *)\n  Have: 6251 <= x.\n  Have: ((pIp_0.F11___SAMSubModeRoll_flgPRSAM) = 13107) /\\\n      (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n       Init_pIp_0).\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n      Init_pIp_0.\n  Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n      Init_pIp_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:121ms)", 'Error found in file: Output/SAMSubModeRoll.c at line: 10', 'Error line content: assigns pIp->countPublic, pIp->flgMode, pIp->countMode, pIp->pCtrl[0].Up, pIp->pCtrl[1].Up, pIp->pCtrl[2].Up, pIp->mFWarning.flgups, pIp->mFWarning.countUPSpc, pIp->flgPRSAM;')

Assertion Results:
- True
- True
- True
- False
- False
- False
- False
- False
- False
- True
- True
- True
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModeRoll.c, line 9) in 'SAMSubModeRollFun':\nLet x = pIp_1.F11___SAMSubModeRoll_countMode.\nLet a = pIp_2.F11___SAMSubModeRoll_pSDS.\nLet x_1 = Mint_0[shiftfield_F5_TAG_DSS_DATA_flgSP(a)].\nLet a_1 = pIp_2.F11___SAMSubModeRoll_pCtrl.\nLet x_2 = pIp_0.F11___SAMSubModeRoll_countPublic.\nAssume {\n  Type: is_uint64(x_2) /\\ is_uint64(x) /\\ is_uint64(x_1).\n  (* Heap *)\n  Type: (region(pIp_2.F11___SAMSubModeRoll_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  If x_1 = 1\n  Then {\n    If lt_f32(to_f32(.0), Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)])\n    Then { Have: Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)] = tmproyaw_0. }\n    Else {\n      Have: neg_f32(Mf32_0[shiftfield_F5_TAG_DSS_DATA_royaw(a)]) =\n          tmproyaw_0.\n    }\n    If lt_f32(to_f32(1.0), tmproyaw_0)\n    Then {\n      Have: Mf32_0 = Mf32_1.\n      Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n          Init_pIp_0.\n      If 17 <= to_uint64(1 + (pIp_2.F11___SAMSubModeRoll_countPublic))\n      Then {\n        Have: Mf32_1 = Mf32_2.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n            Init_pIp_0.\n        Have: ({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countMode = true }) =\n            Init_pIp_0.\n        Have: ({ pIp_2 with F11___SAMSubModeRoll_countPublic = 0 ;\n                 F11___SAMSubModeRoll_countMode = 0 ;\n                 F11___SAMSubModeRoll_flgMode = 51 }) = pIp_1.\n      }\n      Else {\n        Have: (Mf32_1 = Mf32_3) /\\\n            (({ pIp_2 with\n                F11___SAMSubModeRoll_countPublic = to_uint64(1\n                                                     + (pIp_2.F11___SAMSubModeRoll_countPublic))\n                }) = pIp_1).\n      }\n    }\n    Else { Have: pIp_1 = pIp_2. }\n  }\n  Else {\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_2 with F11___SAMSubModeRoll_countPublic = 0 }) = pIp_1).\n  }\n  If 6251 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (Malloc_0 = Malloc_1) /\\\n        (pIp_1 = pIp_3).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeRoll_countPublic = true }) =\n        Init_pIp_1.\n    If (pIp_3.F11___SAMSubModeRoll_flgPRSAM) = 13107\n    Then {\n      Have: Malloc_1 = Malloc_2.\n      Have: ({ pIp_4 with F11___SAMSubModeRoll_flgPRSAM = 52428 }) = pIp_0.\n    }\n    Else {\n      Let a_2 = Init_pIp_2.Init_F11___SAMSubModeRoll_mFWarning.\n      Have: Init_pIp_1 = Init_pIp_2.\n      Have: ({ Init_pIp_2 with Init_F11___SAMSubModeRoll_flgPRSAM = true }) =\n          Init_pIp_2.\n      Have: ({ Init_pIp_2 with\n               Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                       Init_F4_TAG_FAULT_WARNING_flgups = true\n                                                       } }) = Init_pIp_2.\n      Have: (({ Init_pIp_2 with\n                Init_F11___SAMSubModeRoll_mFWarning = { a_2 with\n                                                        Init_F4_TAG_FAULT_WARNING_countUPSpc = true\n                                                        } }) = Init_pIp_2) /\\\n          (({ pIp_3 with F11___SAMSubModeRoll_countPublic = 0 ;\n              F11___SAMSubModeRoll_countMode = 0 ;\n              F11___SAMSubModeRoll_flgMode = 17 ;\n              F11___SAMSubModeRoll_flgPRSAM = 13107 ;\n              F11___SAMSubModeRoll_mFWarning = {\n                                                 pIp_3.F11___SAMSubModeRoll_mFWarning with\n                                                 F4_TAG_FAULT_WARNING_flgups = 235 ;\n                                                 F4_TAG_FAULT_WARNING_countUPSpc = 0\n                                                 } }) = pIp_0).\n    }\n  }\n  Else { Have: pIp_1 = pIp_0. }\n}\nProve: (x_2 = 0) \\/ (x_2 <= 16).\nProver Z3 4.8.12 returns Timeout (Qed:238ms) (3s)", 'Error found in file: Output/SAMSubModeRoll.c at line: 9', 'Error line content: ensures pIp->countPublic == 0 || pIp->countPublic <= 16;')

Postcond Results:
- False

------------------------------------------------
File Name: CalculateGyroDg.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/CalculateGyroDg.c, line 24):\nLet x = to_uint8(1 + j).\nLet a = global(L_tmpwa_48).\nLet a_1 = havoc(Mf32_undef_0, Mf32_0, shift_float32(a, 0), 5).\nLet a_2 = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet a_3 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a_2).\nLet x_1 = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a_2)].\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a_2.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_uint8(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a_2), 0),\n          x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a_2), 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a_2), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_A5_float32(a_3, 0), 15).\n  (* Pre-condition *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 2) ->\n      valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_3, i_1), 0), 5))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (of_f32(a_1[shift_float32(a, i_1)]) = .0))).\n  (* Then *)\n  Have: j <= 4.\n  (* Invariant *)\n  Have: x <= 5.\n}\nProve: of_f32(a_1[shift_float32(a, j) <- to_f32(.0)][shift_float32(a, i)])\n         = .0.\nProver Z3 4.8.12 returns Timeout (Qed:7ms) (3s)', 'Error found in file: Output/CalculateGyroDg.c at line: 24', 'Error line content: loop invariant \\forall integer i; 0 <= i < j ==> tmpwa[i] == 0;')
- ('Goal Preservation of Invariant (file Output/CalculateGyroDg.c, line 34):\nLet x = to_uint8(1 + j).\nLet a = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x_1 = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_tmpwa_48).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = havoc(Mf32_undef_1, Mf32_0, a_2, 5).\nLet a_4 = havoc(Mf32_undef_0, a_3, a_2, x_1).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_7 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nLet x_2 = Mint_0[shift_uint8(a_6, j)].\nLet a_8 = a_4[shift_float32(a_1, j) <- a_4[shift_float32(a_5, x_2)]].\nAssume {\n  Type: is_uint8(j_1) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (i < x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_6, 0), x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_A5_float32(a_7, 0), 15).\n  (* Pre-condition *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 2) ->\n      valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_7, i_1), 0), 5))).\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->\n      (of_f32(a_3[shift_float32(a_1, i_1)]) = .0))).\n  (* Else *)\n  Have: 5 <= j_1.\n  (* Invariant *)\n  Have: 0 <= x_1.\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (of_f32(a_4[shift_float32(a_5, Mint_0[shift_uint8(a_6, i_1)])])\n         = of_f32(a_4[shift_float32(a_1, i_1)])))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_8[shift_float32(a_5, Mint_0[shift_uint8(a_6, i)])])\n         = of_f32(a_8[shift_float32(a_1, i)]).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (3s)', 'Error found in file: Output/CalculateGyroDg.c at line: 34', 'Error line content: loop invariant \\forall integer i; 0 <= i < j ==> tmpwa[i] == pIp->pGyroData->wa[pIp->pGyroData->SignFlag[i]];')

Loop Invariant Results:
- True
- False
- True
- False

Assertion Errors:
- ("Goal Assigns (file Output/CalculateGyroDg.c, line 14) in 'CalculateGyroDgFun' (5/8):\nEffect at line 47\nLet a = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_tmpwa_48).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = havoc(Mf32_undef_0, Mf32_0, a_2, 5).\nLet a_4 = havoc(Mf32_undef_1, a_3, a_2, x).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_7 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(j_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_6, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a), 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_A5_float32(a_7, 0), 15).\n  (* Pre-condition *)\n  Have: forall i : Z. ((0 <= i) -> ((i <= 2) ->\n      valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_7, i), 0), 5))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Invariant *)\n  Have: forall i : Z. ((0 <= i) -> ((i < j) ->\n      (of_f32(a_3[shift_float32(a_1, i)]) = .0))).\n  (* Else *)\n  Have: 5 <= j.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= x).\n  (* Invariant *)\n  Have: forall i : Z. ((0 <= i) -> ((i < j_1) ->\n      (of_f32(a_4[shift_float32(a_5, Mint_0[shift_uint8(a_6, i)])])\n         = of_f32(a_4[shift_float32(a_1, i)])))).\n  (* Else *)\n  Have: x <= j_1.\n  (* Then *)\n  Have: 3 <= x.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:9ms)", 'Error found in file: Output/CalculateGyroDg.c at line: 14', 'Error line content: assigns pIp->pGyroData->W[0 .. 2];')

Assertion Results:
- True
- True
- True
- True
- False
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/CalculateGyroDg.c, line 15) in 'CalculateGyroDgFun':\nLet a = pIp_1.F11___CalculateGyroDg_pGyroData.\nLet x = Mint_0[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a)].\nLet a_1 = global(L_tmpwa_48).\nLet a_2 = shift_float32(a_1, 0).\nLet a_3 = havoc(Mf32_undef_0, Mf32_1, a_2, 5).\nLet a_4 = havoc(Mf32_undef_1, a_3, a_2, x).\nLet a_5 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_wa(a).\nLet a_6 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_SignFlag(a).\nLet a_7 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_Rtemp(a).\nLet a_8 = shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a).\nLet a_9 = pIp_0.F11___CalculateGyroDg_pGyroData.\nLet r = of_f32(Mf32_0\n                 [shift_float32(shiftfield_F1_TAG_DIGITAL_GYRO_DATA_W(a_9),\n                    i)]).\nAssume {\n  Type: is_uint8(j) /\\ is_uint8(j_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_1.F11___CalculateGyroDg_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Residual *)\n  When: 3 <= x.\n  (* Goal *)\n  When: (0 <= i) /\\ (i <= 2) /\\\n      (3 <= Mint_1[shiftfield_F1_TAG_DIGITAL_GYRO_DATA_JoinTotal(a_9)]).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 69).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_uint8(a_6, 0), x).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_5, 0), 5).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_8, 0), 3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_A5_float32(a_7, 0), 15).\n  (* Pre-condition *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 <= 2) ->\n      valid_rw(Malloc_0, shift_float32(shift_A5_float32(a_7, i_1), 0), 5))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= 5).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j) ->\n      (of_f32(a_3[shift_float32(a_1, i_1)]) = .0))).\n  (* Else *)\n  Have: 5 <= j.\n  (* Invariant *)\n  Have: 0 <= x.\n  (* Invariant *)\n  Have: (0 <= j_1) /\\ (j_1 <= x).\n  (* Invariant *)\n  Have: forall i_1 : Z. ((0 <= i_1) -> ((i_1 < j_1) ->\n      (of_f32(a_4[shift_float32(a_5, Mint_0[shift_uint8(a_6, i_1)])])\n         = of_f32(a_4[shift_float32(a_1, i_1)])))).\n  (* Else *)\n  Have: x <= j_1.\n}\nProve: (r = .0) \\/ (of_f32(Mf32_1[shift_float32(a_8, i)]) = r).\nProver Z3 4.8.12 returns Timeout (Qed:27ms) (3s)", 'Error found in file: Output/CalculateGyroDg.c at line: 15', 'Error line content: ensures \\forall integer i; 0 <= i < 3 ==> (pIp->pGyroData->JoinTotal >= 3 ==> pIp->pGyroData->W[i] == \\old(pIp->pGyroData->W[i]) || pIp->pGyroData->W[i] == 0.0f);')

Postcond Results:
- False

------------------------------------------------
File Name: DSSDataGet.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
- True

Assertion Errors:
- ("Goal Assigns (file Output/DSSDataGet.c, line 9) in 'DSSDataGetFun' (6/16):\nEffect at line 45\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nLet a_1 = addr_of_int(41216).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (shiftfield_F5_TAG_DSS_DATA_flgSP(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_piyaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 9', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP, pIp->pDSSData->royaw, pIp->pDSSData->piyaw;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 9) in 'DSSDataGetFun' (7/16):\nEffect at line 48\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:9ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 9', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP, pIp->pDSSData->royaw, pIp->pDSSData->piyaw;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 9) in 'DSSDataGetFun' (9/16):\nEffect at line 53\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 9', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP, pIp->pDSSData->royaw, pIp->pDSSData->piyaw;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 9) in 'DSSDataGetFun' (13/16):\nEffect at line 66\nTags: Case 0.\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 9', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP, pIp->pDSSData->royaw, pIp->pDSSData->piyaw;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 9) in 'DSSDataGetFun' (14/16):\nEffect at line 68\nTags: Case 0.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(pIp_0.F12___DSSDataGet_pDSSData).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (a_1 = shiftfield_F5_TAG_DSS_DATA_flgSP(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_royaw(a)) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 9', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP, pIp->pDSSData->royaw, pIp->pDSSData->piyaw;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 9) in 'DSSDataGetFun' (15/16):\nEffect at line 75\nTags: Case 1.\nLet a = pIp_0.F12___DSSDataGet_pDSSData.\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_0.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:10ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 9', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP, pIp->pDSSData->royaw, pIp->pDSSData->piyaw;')
- ("Goal Assigns (file Output/DSSDataGet.c, line 9) in 'DSSDataGetFun' (16/16):\nEffect at line 77\nTags: Case 1.\nLet a = pIp_1.F12___DSSDataGet_pDSSData.\nLet a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(pIp_0.F12___DSSDataGet_pDSSData).\nAssume {\n  Type: is_uint8(si_0) /\\ is_uint8(stateFlag_0).\n  (* Heap *)\n  Type: (region(pIp_1.F12___DSSDataGet_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_1, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 5).\n  (* Invariant *)\n  Have: (0 <= si_0) /\\ (si_0 <= 2).\n  (* Else *)\n  Have: 2 <= si_0.\n  (* Then *)\n  Have: 0 < stateFlag_0.\n}\nProve: (a_1 = shiftfield_F5_TAG_DSS_DATA_flgSP(a)) \\/\n    (a_1 = shiftfield_F5_TAG_DSS_DATA_piyaw(a)) \\/\n    (shiftfield_F5_TAG_DSS_DATA_royaw(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_A(a) = a_1) \\/\n    (shiftfield_F5_TAG_DSS_DATA_stateFlag_B(a) = a_1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/DSSDataGet.c at line: 9', 'Error line content: assigns pIp->pDSSData->stateFlag_A, pIp->pDSSData->stateFlag_B, pIp->pDSSData->flgSP, pIp->pDSSData->royaw, pIp->pDSSData->piyaw;')

Assertion Results:
- True
- True
- True
- True
- True
- False
- False
- True
- False
- True
- True
- True
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: common.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Establishment of Invariant (file Output/common.c, line 30):\nAssume { Type: is_sint32(n). (* Pre-condition *) Have: ((0 < n) -> (n <= 1)).\n}\nProve: 0 <= n.\nProver Z3 4.8.12 returns Timeout (Qed:0.91ms) (3s)', 'Error found in file: Output/common.c at line: 30', 'Error line content: loop invariant 0 <= i <= n;')

Loop Invariant Results:
- False
- True

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True
- True

------------------------------------------------
File Name: ModeControl.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (2/10):\nEffect at line 23\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:1ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (4/10):\nEffect at line 32\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 0. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (5/10):\nEffect at line 37\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 17. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (6/10):\nEffect at line 42\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 34. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (7/10):\nEffect at line 47\nAssume { Have: Mint_0[global(L_Tr32Uint08_ret_61)] = 51. }\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (8/10):\nEffect at line 51\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32000).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_56)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (9/10):\nEffect at line 51\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32340).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_56)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')
- ("Goal Assigns (file Output/ModeControl.c, line 15) in 'ModeControlFun' (10/10):\nEffect at line 51\nLet x = Mint_0[global(L_Tr32Uint08_ret_61)].\nLet a = addr_of_int(32680).\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a, 1).\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 17.\n  (* Else *)\n  Have: x != 34.\n  (* Else *)\n  Have: x != 51.\n}\nProve: shiftfield_F15___ModeControl_countMode(global(G_pIp_56)) = a.\nProver Z3 4.8.12 returns Timeout (Qed:6ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 15', 'Error line content: assigns pIp->countMode;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/ModeControl.c, line 14) in 'ModeControlFun':\nLet x = Mint_2[global(L_Tr32Uint08_ret_61)].\nLet a = shiftfield_F15___ModeControl_countMode(global(G_pIp_56)).\nLet x_1 = Mint_1[a].\nLet x_2 = Mint_0[a].\nAssume {\n  Type: is_uint8(x) /\\ is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(Mint_3[a]).\n  If x = 0\n  Else {\n    If x = 17\n    Else {\n      If x = 34\n      Else {\n        Have: Mint_2 = Mint_4.\n        If Mint_4[global(L_Tr32Uint08_ret_61)] = 51\n        Else {\n          Have: (Mint_4 = Mint_5) /\\\n              (Mint_3[a <- to_uint64(1 + Mint_3[a])] = Mint_0).\n        }\n      }\n    }\n  }\n}\nProve: x_2 = (1 + x_1).\nProver Z3 4.8.12 returns Timeout (Qed:43ms) (3s)", 'Error found in file: Output/ModeControl.c at line: 14', 'Error line content: ensures pIp->countMode == \\old(pIp->countMode) + 1;')

Postcond Results:
- False

------------------------------------------------
File Name: ModPNHP.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: SAMSubModeDamp.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun' (2/9):\nEffect at line 17\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:1ms)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun' (4/9):\nEffect at line 29\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32000), 1).\nProver Z3 4.8.12 returns Timeout (Qed:15ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun' (5/9):\nEffect at line 29\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32340), 1).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun' (6/9):\nEffect at line 29\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32680), 1).\nProver Z3 4.8.12 returns Timeout (Qed:14ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun' (7/9):\nEffect at line 30\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32028), 1).\nProver Z3 4.8.12 returns Timeout (Qed:17ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun' (8/9):\nEffect at line 30\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32368), 1).\nProver Z3 4.8.12 returns Timeout (Qed:18ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')
- ("Goal Assigns (file Output/SAMSubModeDamp.c, line 9) in 'SAMSubModeDampFun' (9/9):\nEffect at line 30\nLet x = pIp_2.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_0.F11___SAMSubModeDamp_rate.\nAssume {\n  Type: is_uint64(pIp_0.F11___SAMSubModeDamp_countPublic) /\\\n      is_uint64(pIp_1.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_3.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_0.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_4.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_4 = pIp_3.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_3 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_3.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_2).\n  }\n  Else { Have: pIp_4 = pIp_2. }\n  If 351 <= x\n  Else {\n    Have: pIp_2 = pIp_1.\n    (* Then *)\n    Have: 1001 <= (pIp_1.F11___SAMSubModeDamp_countMode).\n  }\n}\nProve: invalid(Malloc_0, addr_of_int(32708), 1).\nProver Z3 4.8.12 returns Timeout (Qed:18ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 9', 'Error line content: assigns pIp->countPublic, pIp->countMode, pIp->flgMode;')

Assertion Results:
- True
- False
- True
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/SAMSubModeDamp.c, line 8) in 'SAMSubModeDampFun':\nLet x = pIp_3.F11___SAMSubModeDamp_countPublic.\nLet a = pIp_1.F11___SAMSubModeDamp_rate.\nLet x_1 = pIp_1.F11___SAMSubModeDamp_countPublic.\nLet x_2 = pIp_0.F11___SAMSubModeDamp_countPublic.\nAssume {\n  Type: is_uint64(x_1) /\\ is_uint64(x_2) /\\\n      is_uint64(pIp_2.F11___SAMSubModeDamp_countMode) /\\ is_uint64(x) /\\\n      is_uint64(pIp_4.F11___SAMSubModeDamp_countPublic).\n  (* Heap *)\n  Type: (region(pIp_1.F11___SAMSubModeDamp_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a, 0), 3).\n  If lt_f32(Mf32_0[global(L_TripleFabsMax_ret_41)],\n       pIp_5.F11___SAMSubModeDamp_max)\n  Then {\n    Have: pIp_5 = pIp_4.\n    Have: (({ Init_pIp_0 with Init_F11___SAMSubModeDamp_countPublic = true }) =\n           Init_pIp_0) /\\\n        (({ pIp_4 with\n            F11___SAMSubModeDamp_countPublic = to_uint64(1\n                                                 + (pIp_4.F11___SAMSubModeDamp_countPublic))\n            }) = pIp_3).\n  }\n  Else { Have: pIp_5 = pIp_3. }\n  If 351 <= x\n  Then {\n    Have: (Init_pIp_0 = Init_pIp_1) /\\ (pIp_3 = pIp_6).\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_flgMode = true }) =\n        Init_pIp_1.\n    Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_countMode = true }) =\n        Init_pIp_1.\n    Have: ({ pIp_6 with F11___SAMSubModeDamp_countPublic = 0 ;\n             F11___SAMSubModeDamp_countMode = 0 ;\n             F11___SAMSubModeDamp_flgMode = 17 }) = pIp_0.\n  }\n  Else {\n    Have: (Init_pIp_0 = Init_pIp_2) /\\ (pIp_3 = pIp_2).\n    If 1001 <= (pIp_2.F11___SAMSubModeDamp_countMode)\n    Then {\n      Have: (Init_pIp_2 = Init_pIp_1) /\\ (pIp_2 = pIp_6).\n      Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_flgMode = true }) =\n          Init_pIp_1.\n      Have: ({ Init_pIp_1 with Init_F11___SAMSubModeDamp_countMode = true }) =\n          Init_pIp_1.\n      Have: ({ pIp_6 with F11___SAMSubModeDamp_countPublic = 0 ;\n               F11___SAMSubModeDamp_countMode = 0 ;\n               F11___SAMSubModeDamp_flgMode = 17 }) = pIp_0.\n    }\n    Else { Have: pIp_2 = pIp_0. }\n  }\n}\nProve: (x_2 = x_1) \\/ (x_2 = (1 + x_1)).\nProver Z3 4.8.12 returns Timeout (Qed:59ms) (3s)", 'Error found in file: Output/SAMSubModeDamp.c at line: 8', 'Error line content: ensures pIp->countPublic == \\old(pIp->countPublic) + 1 || pIp->countPublic == \\old(pIp->countPublic);')

Postcond Results:
- False

------------------------------------------------
File Name: LimitCtrlRateInput.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (1/10):\nEffect at line 18\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (2/10):\nEffect at line 20\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (3/10):\nEffect at line 21\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (4/10):\nEffect at line 22\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (5/10):\nEffect at line 26\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (6/10):\nEffect at line 28\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              0)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (7/10):\nEffect at line 32\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (8/10):\nEffect at line 34\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              1)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (9/10):\nEffect at line 38\nLet a = pIp_0.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_0.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')
- ("Goal Assigns (file Output/LimitCtrlRateInput.c, line 12) in 'LimitCtrlRateInputFun' (10/10):\nEffect at line 40\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nLet a_2 = shift_S7_TAG_CONTROLLERIN(a_1, 0).\nLet a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl,\n                                              2)).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: (a_3 = shiftfield_F7_TAG_CONTROLLERIN_Ud(a_2)) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 1))) \\/\n    (a_3 =\n     shiftfield_F7_TAG_CONTROLLERIN_Ud(shift_S7_TAG_CONTROLLERIN(a_1, 2))).\nProver Z3 4.8.12 returns Unknown (Qed:3ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 12', 'Error line content: assigns pIp->pSCtrl[0].Ud, pIp->pSCtrl[1].Ud, pIp->pSCtrl[2].Ud;')

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
- ("Goal Post-condition (file Output/LimitCtrlRateInput.c, line 11) in 'LimitCtrlRateInputFun':\nLet a = pIp_1.F12___LimitCtrlRateInput_pSA.\nLet a_1 = pIp_1.F12___LimitCtrlRateInput_pSCtrl.\nAssume {\n  (* Heap *)\n  Type: (region(pIp_1.F12___LimitCtrlRateInput_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ (region(a_1.base) <= 0) /\\ linked(Malloc_1).\n  (* Goal *)\n  When: (0 <= i) /\\ (i <= 2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, a, 6).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1, shift_S7_TAG_CONTROLLERIN(a_1, 0), 9).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_1,\n          shift_float32(shiftfield_F6_TAG_ATTITUDE_PARA_rate(a), 0), 3).\n}\nProve: valid_rw(Malloc_0[L_Tr32Float_ret_46 <- 0][L_ipTr32Float_47 <- 0]\n                  [L_LimitFloat32_ret_0_48 <- 0][L_ipLimitFloat32_0_49 <- 0]\n                  [L_LimitFloat32_ret_1_50 <- 0][L_ipLimitFloat32_1_51 <- 0]\n                  [L_LimitFloat32_ret_2_52 <- 0][L_ipLimitFloat32_2_53 <- 0],\n         shift_S7_TAG_CONTROLLERIN(pIp_0.F12___LimitCtrlRateInput_pSCtrl, i),\n         3).\nProver Z3 4.8.12 returns Unknown (Qed:5ms)", 'Error found in file: Output/LimitCtrlRateInput.c at line: 11', 'Error line content: ensures \\forall int i; 0 <= i < 3 ==> \\valid(&(pIp->pSCtrl[i]));')

Postcond Results:
- False

------------------------------------------------
File Name: PseudoRateModulator.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True
- True
- True
- True
- True
- True
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 8) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1).\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(Mf32_1[a_3]).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(a) + r) < of_f32(Mf32_1[a_2]).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(Mf32_0[a_2], a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(Mf32_0[a_2], a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 15) /\\ (x_1 = 0) /\\\n    (((10318659.0/134217728) + ((1935881.0/2097152) * of_f32(a_4))) = r).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (2.6s)", 'Error found in file: Output/PseudoRateModulator.c at line: 8', 'Error line content: ensures ((pIp->pModulator->u - pIp->pModulator->r) > pIp->h1) ==> (pIp->pModulator->Yp == 0x0 && pIp->pModulator->Yn == 0xF && pIp->pModulator->r == \\old(0.9231f * pIp->pModulator->r + 0.07688f));')
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 9) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1).\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(Mf32_1[a_3]).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (of_f32(a) + of_f32(Mf32_1[a_2])) < r.\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(Mf32_0[a_2], a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(Mf32_0[a_2], a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 0) /\\ (x_1 = 15) /\\\n    (((1935881.0/2097152) * of_f32(a_4)) = ((10318659.0/134217728) + r)).\nProver Z3 4.8.12 returns Timeout (Qed:12ms) (2.5s)", 'Error found in file: Output/PseudoRateModulator.c at line: 9', 'Error line content: ensures ((pIp->pModulator->u - pIp->pModulator->r) < -pIp->h1) ==> (pIp->pModulator->Yp == 0xF && pIp->pModulator->Yn == 0x0 && pIp->pModulator->r == \\old(0.9231f * pIp->pModulator->r - 0.07688f));')
- ("Goal Post-condition (file Output/PseudoRateModulator.c, line 10) in 'PseudoRateModulatorFun':\nLet a = pIp_0.F10___PseudoRateModulator_h1.\nLet a_1 = pIp_0.F10___PseudoRateModulator_pModulator.\nLet a_2 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_u(a_1).\nLet a_3 = shiftfield_F2_TAG_FALSE_RATE_MODULATOR_r(a_1).\nLet a_4 = Mf32_0[a_3].\nLet r = of_f32(Mf32_1[a_2]).\nLet r_1 = of_f32(a).\nLet r_2 = of_f32(Mf32_1[a_3]).\nLet x = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1)].\nLet x_1 = Mint_0[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1)].\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___PseudoRateModulator_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (r <= (r_1 + r_2)) /\\ (r_2 <= (r_1 + r)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  If lt_f32(a, sub_f32(Mf32_0[a_2], a_4))\n  Then {\n    Have: Mint_1[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n            [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 15] = Mint_0.\n    Have: Mf32_0[a_3\n            <- add_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                 to_f32((10318659.0/134217728)))] = Mf32_1.\n  }\n  Else {\n    If lt_f32(sub_f32(Mf32_0[a_2], a_4), neg_f32(a))\n    Then {\n      Have: Mint_2[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 15]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3\n              <- sub_f32(mul_f32(to_f32((1935881.0/2097152)), a_4),\n                   to_f32((10318659.0/134217728)))] = Mf32_1.\n    }\n    Else {\n      Have: Mint_3[shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yp(a_1) <- 0]\n              [shiftfield_F2_TAG_FALSE_RATE_MODULATOR_Yn(a_1) <- 0] = Mint_0.\n      Have: Mf32_0[a_3 <- mul_f32(to_f32((1935881.0/2097152)), a_4)] =\n          Mf32_1.\n    }\n  }\n}\nProve: (x = 0) /\\ (x_1 = 0) /\\ (((1935881.0/2097152) * of_f32(a_4)) = r_2).\nProver Z3 4.8.12 returns Timeout (Qed:13ms) (2.5s)", 'Error found in file: Output/PseudoRateModulator.c at line: 10', 'Error line content: ensures !((pIp->pModulator->u - pIp->pModulator->r) > pIp->h1) && !((pIp->pModulator->u - pIp->pModulator->r) < -pIp->h1) ==> (pIp->pModulator->Yp == 0x0 && pIp->pModulator->Yn == 0x0 && pIp->pModulator->r == \\old(0.9231f * pIp->pModulator->r));')

Postcond Results:
- False
- False
- False

------------------------------------------------
File Name: DiviationToFloat.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
- ("Goal Post-condition (file Output/DiviationToFloat.c, line 9) in 'DiviationToFloatFun':\nLet a = pIp_0.F10___DiviationToFloat_ret.\nLet x = pIp_0.F10___DiviationToFloat_input.\nLet x_1 = pIp_0.F10___DiviationToFloat_mask.\nLet x_2 = pIp_0.F10___DiviationToFloat_offset.\nLet r = real_of_int(to_sint32(land(x, x_1) - x_2)).\nLet a_1 = pIp_0.F10___DiviationToFloat_LSB.\nAssume {\n  Type: is_uint32(x) /\\ is_uint32(x_1) /\\ is_uint32(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___DiviationToFloat_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a, 1).\n}\nProve: (r * of_f32(a_1)) = of_f32(mul_f32(to_f32(r), a_1)).\nProver Z3 4.8.12 returns Failed\nout of memory", 'Error found in file: Output/DiviationToFloat.c at line: 9', 'Error line content: ensures pIp->fresult == ((siint16)((pIp->input & pIp->mask) - pIp->offset)) * pIp->LSB;')

Postcond Results:
- False
- True

------------------------------------------------
File Name: FaultJudgeProceed.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (1/3):\nEffect at line 24\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nAssume {\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:2ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (2/3):\nEffect at line 35\nLet a = pIp_1.F13___FaultJudgeProceed_mFWarning.\nLet a_1 = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a_1.F4_TAG_FAULT_WARNING_Wsp.\nAssume {\n  Type: is_uint8(x).\n  (* Heap *)\n  Type: region(pIp_0.F13___FaultJudgeProceed_fun.base) <= 0.\n  (* Residual *)\n  When: (a_1.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  If x = 0\n  Else { Have: pIp_0 = pIp_1. }\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_CWsp) = 235.\n  (* Then *)\n  Have: (a.F4_TAG_FAULT_WARNING_Wsp) = 235.\n}\nProve: false.\nProver Z3 4.8.12 returns Unknown (Qed:11ms)", None, None)
- ("Goal Assigns nothing in 'FaultJudgeProceedFun' (3/3):\nEffect at line 43\nLet a = pIp_0.F13___FaultJudgeProceed_mFWarning.\nLet x = a.F4_TAG_FAULT_WARNING_CWsp.\nLet x_1 = (pIp_2.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_CWsp.\nAssume {\n  Type: is_uint8(x) /\\ is_uint8(a.F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp) /\\\n      is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_2.F13___FaultJudgeProceed_fun.base) <= 0) /\\\n      linked(Malloc_0).\n  If x_1 = 235\n  Then {\n    Have: pIp_2 = pIp_1.\n    If ((pIp_1.F13___FaultJudgeProceed_mFWarning).F4_TAG_FAULT_WARNING_Wsp)\n         = 0\n    Then {\n      (* Block Out *)\n      Have: Malloc_1[L_ipSoftFaultJudgeSP_51 <- 0] = Malloc_2.\n    }\n    Else {\n      Have: (pIp_1 = pIp_0) /\\\n          (Malloc_0[L_ipNoctrlJudge_54 <- 20] = Malloc_2).\n    }\n  }\n  Else {\n    Have: (pIp_2 = pIp_0) /\\ (Malloc_0[L_ipNoctrlJudge_54 <- 20] = Malloc_2).\n  }\n  If x = 235\n  Then { Have: Malloc_2 = Malloc_3. }\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:29ms) (3s)", None, None)

Assertion Results:
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
- True

------------------------------------------------
File Name: MatrixTran.c

Syntax Error:


Loop Invariant Errors:
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 18):\nLet x = to_uint8(1 + i_2).\nLet x_1 = pIp_0.F10___MatrixTran_nrow.\nLet x_2 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_3 = x_1 * x_2.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = pIp_0.F10___MatrixTran_mat.\nLet a_4 = havoc(Mf32_undef_1, Mf32_0, a_1, x_3).\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(j) /\\ is_uint8(x_1) /\\ is_uint8(x_2).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (0 <= i) /\\ (0 <= i_1) /\\ (i_1 < x_2) /\\ (i < x) /\\ is_uint8(i).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: 0 < x_1.\n  (* Pre-condition *)\n  Have: 0 < x_2.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x_1).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_2) ->\n       (of_f32(a_4[shift_float32(a, i_3 + (i_4 * x_1))])\n          = of_f32(a_4[shift_float32(a_3, i_4 + (i_3 * x_2))]))))))).\n  (* Then *)\n  Have: i_2 < x_1.\n  (* Invariant *)\n  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) ->\n      (forall i_4 : Z. ((0 <= i_4) -> (is_uint8(i_4) ->\n       ((if (i_3 < i_2) then (i_4 < x_2) else (i_4 < 0)) ->\n       (of_f32(a_4[shift_float32(a, i_3 + (i_4 * x_1))])\n          = of_f32(a_4[shift_float32(a_3, i_4 + (i_3 * x_2))])))))))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((i_3 <= i_2) -> ((0 <= i_3) ->\n      (forall i_4 : Z. ((0 <= i_4) -> (is_uint8(i_4) ->\n       ((if (i_3 < i_2) then (i_4 < x_2) else (i_4 < j)) ->\n       (of_f32(a_2[shift_float32(a, i_3 + (i_4 * x_1))])\n          = of_f32(a_2[shift_float32(a_3, i_4 + (i_3 * x_2))])))))))).\n  (* Else *)\n  Have: x_2 <= j.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_2[shift_float32(a, i + (i_1 * x_1))])\n         = of_f32(a_2[shift_float32(a_3, i_1 + (i * x_2))]).\nProver Z3 4.8.12 returns Timeout (Qed:18ms) (3s)', 'Error found in file: Output/MatrixTran.c at line: 18', 'Error line content: loop invariant \\forall unint08 k; 0 <= k < i ==>')
- ('Goal Preservation of Invariant (file Output/MatrixTran.c, line 27):\nLet x = to_uint8(1 + j).\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = pIp_0.F10___MatrixTran_nrow.\nLet x_3 = x_2 * x_1.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_3).\nLet a_3 = pIp_0.F10___MatrixTran_mat.\nLet a_4 = havoc(Mf32_undef_1, Mf32_0, a_1, x_3).\nLet a_5 = a_2[shift_float32(a, i + (j * x_2))\n            <- a_2[shift_float32(a_3, j + (i * x_1))]].\nAssume {\n  Type: is_uint8(i) /\\ is_uint8(j) /\\ is_uint8(x_2) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (i_1 <= i) /\\ (0 <= i_1) /\\ (0 <= i_2) /\\ is_uint8(i_2) /\\\n      (if (i_1 < i) then (i_2 < x_1) else (i_2 < x)).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_3).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_3).\n  (* Pre-condition *)\n  Have: 0 < x_2.\n  (* Pre-condition *)\n  Have: 0 < x_1.\n  (* Invariant *)\n  Have: (0 <= i) /\\ (i <= x_2).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i) ->\n      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->\n       (of_f32(a_4[shift_float32(a, i_3 + (i_4 * x_2))])\n          = of_f32(a_4[shift_float32(a_3, i_4 + (i_3 * x_1))]))))))).\n  (* Then *)\n  Have: i < x_2.\n  (* Invariant *)\n  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->\n      (forall i_4 : Z. ((0 <= i_4) -> (is_uint8(i_4) ->\n       ((if (i_3 < i) then (i_4 < x_1) else (i_4 < 0)) ->\n       (of_f32(a_4[shift_float32(a, i_3 + (i_4 * x_2))])\n          = of_f32(a_4[shift_float32(a_3, i_4 + (i_3 * x_1))])))))))).\n  (* Invariant *)\n  Have: (0 <= j) /\\ (j <= x_1).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((i_3 <= i) -> ((0 <= i_3) ->\n      (forall i_4 : Z. ((0 <= i_4) -> (is_uint8(i_4) ->\n       ((if (i_3 < i) then (i_4 < x_1) else (i_4 < j)) ->\n       (of_f32(a_2[shift_float32(a, i_3 + (i_4 * x_2))])\n          = of_f32(a_2[shift_float32(a_3, i_4 + (i_3 * x_1))])))))))).\n  (* Then *)\n  Have: j < x_1.\n  (* Invariant *)\n  Have: x <= x_1.\n}\nProve: of_f32(a_5[shift_float32(a, i_1 + (i_2 * x_2))])\n         = of_f32(a_5[shift_float32(a_3, i_2 + (i_1 * x_1))]).\nProver Z3 4.8.12 returns Timeout (Qed:21ms) (2.6s)', 'Error found in file: Output/MatrixTran.c at line: 27', 'Error line content: loop invariant \\forall unint08 k; 0 <= k <= i ==>')
- ('Goal Establishment of Invariant (file Output/MatrixTran.c, line 27):\nLet x = pIp_0.F10___MatrixTran_nrow.\nLet x_1 = pIp_0.F10___MatrixTran_ncol.\nLet a = pIp_0.F10___MatrixTran_tran.\nLet a_1 = shift_float32(a, 0).\nLet x_2 = x * x_1.\nLet a_2 = havoc(Mf32_undef_0, Mf32_0, a_1, x_2).\nLet a_3 = pIp_0.F10___MatrixTran_mat.\nAssume {\n  Type: is_uint8(i_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F10___MatrixTran_fun.base) <= 0) /\\\n      (region(a_3.base) <= 0) /\\ (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: (i <= i_2) /\\ (0 <= i) /\\ (i < i_2) /\\ (0 <= i_1) /\\ (i_1 < x_1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, shift_float32(a_3, 0), x_2).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, x_2).\n  (* Pre-condition *)\n  Have: 0 < x.\n  (* Pre-condition *)\n  Have: 0 < x_1.\n  (* Invariant *)\n  Have: (0 <= i_2) /\\ (i_2 <= x).\n  (* Invariant *)\n  Have: forall i_3 : Z. ((0 <= i_3) -> ((i_3 < i_2) ->\n      (forall i_4 : Z. ((0 <= i_4) -> ((i_4 < x_1) ->\n       (of_f32(a_2[shift_float32(a, i_3 + (i_4 * x))])\n          = of_f32(a_2[shift_float32(a_3, i_4 + (i_3 * x_1))]))))))).\n  (* Then *)\n  Have: i_2 < x.\n}\nProve: of_f32(a_2[shift_float32(a, i + (i_1 * x))])\n         = of_f32(a_2[shift_float32(a_3, i_1 + (i * x_1))]).\nProver Z3 4.8.12 returns Timeout (Qed:8ms) (3s)', 'Error found in file: Output/MatrixTran.c at line: 27', 'Error line content: loop invariant \\forall unint08 k; 0 <= k <= i ==>')

Loop Invariant Results:
- True
- False
- True
- False

Assertion Errors:
No Assertion Errors.

Assertion Results:
- True
- True

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: CheckCal16.c

Syntax Error:
syntax Error
[kernel] Parsing Output/CheckCal16.c (with preprocessing)
[kernel:annot-error] Output/CheckCal16.c:25: Warning: 
  invalid implicit conversion from 'unint08 const *' to 'unint16 *'. Ignoring loop annotation
[kernel] User Error: warning annot-error treated as fatal error.
[kernel] Frama-C aborted: invalid user input.


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
No Assertion Errors.

Assertion Results:
No Assertion Results.

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
File Name: B_TcProcess.c

Syntax Error:


Loop Invariant Errors:
No Loop Invariant Errors.

Loop Invariant Results:
No Loop Invariant Results.

Assertion Errors:
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (1/10):\nEffect at line 22\nLet a = pIp_0.F11___B_TcProcess_tcaData.\nLet a_1 = shift_uint8(a, 0).\nAssume {\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a.base) <= 0) /\\ linked(Malloc_0).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_1, 4).\n  (* Then *)\n  Have: Mint_0[a_1] = 225.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 1)] = 0.\n}\nProve: false.\nProver Z3 4.8.12 returns Timeout (Qed:2ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (2/10):\nEffect at line 36\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (3/10):\nEffect at line 36\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (4/10):\nEffect at line 36\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 0.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (5/10):\nEffect at line 40\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:3ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (6/10):\nEffect at line 40\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (7/10):\nEffect at line 40\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 3)].\nLet x_1 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(x_1) /\\ is_uint8(x).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x = x_1.\n  (* Then *)\n  Have: Mint_0[shift_uint8(a, 2)] = 1.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (8/10):\nEffect at line 44\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32000).\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (9/10):\nEffect at line 44\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32340).\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:4ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')
- ("Goal Assigns (file Output/B_TcProcess.c, line 8) in 'B_TcProcessFun' (10/10):\nEffect at line 44\nLet a = pIp_1.F11___B_TcProcess_tcaData.\nLet x = Mint_0[shift_uint8(a, 2)].\nLet x_1 = Mint_0[shift_uint8(a, 3)].\nLet x_2 = Mint_0[global(L_chksum_40)].\nLet a_1 = pIp_0.F11___B_TcProcess_tcaData.\nLet a_2 = shift_uint8(a_1, 0).\nLet a_3 = addr_of_int(32680).\nAssume {\n  Type: is_uint8(x_2) /\\ is_uint8(x) /\\ is_uint8(x_1).\n  (* Heap *)\n  Type: (region(pIp_0.F11___B_TcProcess_fun.base) <= 0) /\\\n      (region(a_1.base) <= 0) /\\ linked(Malloc_0).\n  (* Goal *)\n  When: !invalid(Malloc_0, a_3, 1).\n  (* Pre-condition *)\n  Have: valid_rw(Malloc_0, a_2, 4).\n  (* Then *)\n  Have: Mint_1[a_2] = 225.\n  (* Then *)\n  Have: Mint_1[shift_uint8(a_1, 1)] = 0.\n  (* Then *)\n  Have: x_1 = x_2.\n  (* Else *)\n  Have: x != 0.\n  (* Else *)\n  Have: x != 1.\n}\nProve: shift_uint8(a_1, 2) = a_3.\nProver Z3 4.8.12 returns Timeout (Qed:5ms) (3s)", 'Error found in file: Output/B_TcProcess.c at line: 8', 'Error line content: assigns pIp->tcaData[2];')

Assertion Results:
- False
- False
- False
- False
- False
- False
- False
- False
- False
- False

Postcond Errors:
No Postcond Errors.

Postcond Results:
No Postcond Results.

------------------------------------------------
